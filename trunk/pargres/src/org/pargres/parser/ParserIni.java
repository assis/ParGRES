//### This file created by BYACC 1.8(/Java extension  1.11)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package org.pargres.parser;



//#line 1 "parser_ini.y"
  
  import java.io.*;
  import java.util.ArrayList;
  import java.sql.ResultSet;  
  import org.pargres.jdbc.PargresDatabaseMetaData;
  import org.pargres.commons.util.ParserSilentException;
  import org.pargres.commons.util.ParserException;  
//#line 25 "ParserIni.java"




public class ParserIni
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserIniVal is defined in ParserIniVal.java


String   yytext;//user variable to return contextual strings
ParserIniVal yyval; //used to return semantic vals from action routines
ParserIniVal yylval;//the 'lval' (result) I got from yylex()
ParserIniVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserIniVal[YYSTACKSIZE];
  yyval=new ParserIniVal();
  yylval=new ParserIniVal();
  valptr=-1;
}
void val_push(ParserIniVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserIniVal val_pop()
{
  if (valptr<0)
    return new ParserIniVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserIniVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserIniVal();
  return valstk[ptr];
}
//#### end semantic value section ####
public final static short TK_SELECT=257;
public final static short TK_ALL=258;
public final static short TK_DISTINCT=259;
public final static short TK_USER=260;
public final static short TK_INDICATOR=261;
public final static short TK_NAME=262;
public final static short TK_APPROXNUM=263;
public final static short TK_INTNUM=264;
public final static short TK_DATE=265;
public final static short TK_INTERVAL1=266;
public final static short TK_INTERVAL2=267;
public final static short TK_COMENTARIO=268;
public final static short TK_EXISTS=269;
public final static short TK_PLIC=270;
public final static short TK_STRING=271;
public final static short TK_CONCATENATION=272;
public final static short TK_AVG=273;
public final static short TK_MIN=274;
public final static short TK_MAX=275;
public final static short TK_SUM=276;
public final static short TK_COUNT=277;
public final static short TK_INTO=278;
public final static short TK_FROM=279;
public final static short TK_WHERE=280;
public final static short TK_OR=281;
public final static short TK_AND=282;
public final static short TK_NOT=283;
public final static short TK_NULL=284;
public final static short TK_IS=285;
public final static short TK_BETWEEN=286;
public final static short TK_LIKE=287;
public final static short TK_ESCAPE=288;
public final static short TK_DIFERENTE=289;
public final static short TK_MENOR_IG=290;
public final static short TK_VERTBAR=291;
public final static short TK_MAIOR_IG=292;
public final static short TK_GROUP=293;
public final static short TK_BY=294;
public final static short TK_HAVING=295;
public final static short TK_ORDER=296;
public final static short TK_ASC=297;
public final static short TK_DESC=298;
public final static short TK_AS=299;
public final static short TK_IN=300;
public final static short TK_LIMIT=301;
public final static short TK_NULLIF=302;
public final static short TK_COALESCE=303;
public final static short TK_CASE=304;
public final static short TK_END=305;
public final static short TK_WHEN=306;
public final static short TK_THEN=307;
public final static short TK_ELSE=308;
public final static short TK_TRUE=309;
public final static short TK_FALSE=310;
public final static short TK_ANY=311;
public final static short TK_SOME=312;
public final static short TK_EXTRACT=313;
public final static short TK_SUBSTRING=314;
public final static short TK_FOR=315;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    3,    3,    6,    6,    2,    2,    7,    7,
    8,    9,   10,   10,   11,   12,   12,   13,   13,   15,
   15,   16,   16,   17,   17,   17,   20,   20,   20,   24,
   24,   24,   23,   23,   23,   21,   21,   21,   30,   30,
   30,   31,   31,   32,   32,   32,   33,   33,   33,   33,
   33,   33,   33,   25,   25,   26,   26,   26,   26,   27,
   27,   27,   27,   42,   42,   43,   43,   45,   45,   44,
   14,   36,   36,   36,   36,   36,   36,   36,   52,   52,
   52,   52,   52,   52,   52,   46,   47,   48,   50,   50,
   51,   49,   49,   34,   53,   53,   53,   53,   53,   54,
   54,   54,   54,   57,   57,   57,   58,   58,   58,   59,
   59,   60,   60,   60,   61,   61,   61,   61,   61,   61,
   38,   62,   63,   64,   39,   65,   65,   55,   35,   35,
   35,   56,    4,   28,   28,   28,   66,   66,   67,   37,
   37,   68,   68,   70,   72,   74,   73,   73,   69,   69,
   75,   75,   77,   77,   79,   78,   76,   76,   80,   80,
   81,   71,    5,    5,   83,   83,   83,   85,   85,   85,
   87,   87,   87,   89,   89,   89,   91,   86,   92,   93,
   93,   94,   95,   95,   95,   96,   96,   96,   97,   97,
   98,   98,   98,   99,   99,   99,   90,  100,  100,  101,
  101,  101,  101,  102,  102,   82,  103,  103,  104,  104,
  104,  104,  104,  104,  104,  105,  105,  105,  108,  108,
  108,  106,  109,  107,  107,  110,   84,  111,  111,  112,
  112,  113,  113,  114,  114,  114,  115,  115,  115,  117,
  117,  117,  116,  116,  116,  119,  119,  119,  120,  120,
  121,  121,  121,  122,  122,  122,  122,  122,  118,  118,
  118,  123,  123,  124,  124,  124,  124,  126,  126,   19,
  125,  125,  125,  125,  127,  127,   88,   18,   18,   22,
   22,   22,   22,   22,   22,   40,   40,   29,   41,
};
final static short yylen[] = {                            2,
    4,    1,    2,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    3,    1,    3,    1,    1,    3,    1,
    3,    1,    2,    1,    1,    1,    1,    3,    1,    1,
    1,    1,    1,    4,    3,    1,    3,    3,    1,    3,
    3,    1,    3,    1,    2,    2,    1,    1,    3,    1,
    1,    1,    1,    5,    6,    3,    4,    4,    5,    7,
    8,    5,    6,    1,    3,    2,    1,    2,    1,    2,
    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    4,    1,    1,    1,    1,    1,    1,
    2,    2,    1,    1,    3,    3,    1,    3,    3,    1,
    3,    2,    2,    1,    1,    3,    1,    1,    1,    1,
    1,    6,    1,    1,    1,    6,    8,    1,    1,    3,
    3,    1,    2,    1,    1,    1,    1,    3,    1,    1,
    1,    6,    4,    1,    1,    1,    1,    3,    1,    1,
    4,    5,    1,    2,    4,    2,    3,    4,    1,    2,
    4,    1,    2,    1,    2,    1,    1,    2,    1,    1,
    2,    1,    1,    2,    1,    1,    2,    3,    1,    1,
    3,    1,    1,    3,    3,    1,    3,    3,    1,    3,
    2,    2,    1,    1,    3,    1,    3,    1,    3,    1,
    2,    1,    2,    1,    1,    2,    1,    3,    1,    3,
    4,    5,    6,    7,    8,    1,    2,    3,    1,    3,
    5,    3,    1,    1,    3,    1,    2,    1,    3,    1,
    3,    1,    2,    1,    1,    1,    1,    3,    1,    1,
    4,    3,    1,    3,    3,    1,    3,    3,    1,    3,
    1,    2,    2,    1,    3,    1,    1,    1,    1,    1,
    1,    5,    6,    3,    4,    4,    5,    2,    2,    4,
    7,    8,    5,    6,    1,    3,    2,    3,    4,    1,
    1,    1,    1,    1,    1,    2,    2,    3,    1,
};
final static short yydefred[] = {                         0,
    2,    0,    0,    5,    6,   71,   87,   88,    0,   92,
   93,    0,   86,   95,   96,   97,   98,   99,    0,   91,
  144,  145,  146,   89,   90,    0,    0,   11,    0,    0,
    0,    0,    0,    8,    9,   10,   12,    0,   15,    0,
    0,    0,    0,   22,   24,   25,   26,    0,   29,   30,
   31,   32,    0,    0,    0,   44,   47,    0,   50,   51,
   52,   53,   72,   73,   74,   76,   77,   78,    0,  121,
  125,  140,  141,    0,    0,    0,  149,  150,   75,    0,
   23,    0,    0,    0,   45,   48,   46,    0,    0,    0,
    0,    4,    0,    7,    0,    0,    0,    0,    0,    0,
    0,    0,  281,  284,  285,    0,  280,  282,  283,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  162,    0,    0,    0,  289,    0,    0,  123,    0,    0,
    0,    0,    0,  115,  118,  119,  120,   79,   80,   81,
   83,   84,   85,  117,    0,    0,    0,    0,  114,   49,
    0,  139,    0,  133,    0,    0,    0,  206,    0,  209,
    0,    1,    3,    0,    0,    0,    0,    0,  163,    0,
  167,    0,  170,    0,  173,    0,  176,   14,   16,  130,
  131,   19,   21,    0,    0,    0,    0,    0,    0,  135,
  134,  136,    0,   33,   28,    0,   37,   38,   40,   41,
   43,    0,  278,  132,  128,  100,    0,    0,    0,  103,
    0,    0,    0,    0,    0,    0,    0,  157,    0,    0,
  160,  270,    0,    0,   82,    0,  112,  113,    0,    0,
    0,    0,    0,    0,   70,    0,   69,   66,    0,  223,
    0,    0,    0,    0,    0,  217,    0,    0,    0,    0,
  234,  235,    0,  257,  258,  256,  227,    0,    0,  232,
  236,    0,  239,    0,    0,    0,  251,  259,  260,  261,
    0,  277,    0,  177,  165,  168,  171,  174,    0,    0,
    0,    0,    0,   57,    0,    0,    0,    0,    0,  279,
   94,  101,  102,    0,    0,  143,    0,    0,  151,    0,
  154,  156,  158,  288,  124,    0,  116,    0,  105,  106,
  108,  109,  111,   68,  138,    0,    0,    0,  208,  218,
  233,    0,  254,  253,  252,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  194,  196,  178,  179,    0,  182,    0,    0,    0,  193,
    0,    0,  197,    0,    0,   59,    0,    0,   54,  286,
  287,    0,    0,   62,   35,    0,    0,  148,  161,    0,
  152,  122,    0,  126,    0,    0,    0,  222,    0,  255,
  229,  231,    0,    0,    0,    0,    0,    0,    0,    0,
  240,  238,  244,  245,  247,  248,  250,    0,  191,  192,
    0,    0,    0,    0,    0,    0,  204,  205,  203,  201,
    0,   55,    0,   63,   65,    0,   34,  142,  155,    0,
    0,  226,    0,    0,    0,  221,    0,    0,    0,    0,
    0,  265,    0,    0,    0,    0,    0,  195,  181,  184,
  185,  187,  188,  190,  199,    0,   60,  127,    0,  213,
    0,    0,    0,  267,    0,    0,  262,  268,  269,    0,
    0,  273,  242,    0,   61,    0,  225,  214,  263,    0,
  274,    0,  276,  241,  215,    0,  271,  272,
};
final static short yydgoto[] = {                          2,
    3,   32,   90,   91,   92,   33,   34,   35,   36,   37,
   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
   48,  110,  195,   49,   50,   51,   52,  196,  126,   53,
   54,   55,   56,   57,   58,   59,   60,   61,   62,  284,
  127,  287,  152,  153,  238,  138,  139,  140,  141,  142,
  143,  256,   69,  207,  208,  209,  145,  146,  147,  148,
  149,   70,  129,  306,   71,  154,  155,   72,   73,   74,
  212,   75,  213,   76,   77,   78,  216,  220,  217,  123,
  124,   93,  169,  170,  171,  172,  173,  174,  175,  176,
  177,  343,  344,  345,  346,  347,  348,  349,  350,  353,
  354,  409,  158,  159,  160,  241,  423,  161,  242,  424,
  322,  258,  259,  260,  261,  262,  392,  263,  264,  265,
  266,  267,  268,  269,  270,  432,  435,
};
final static short yysindex[] = {                      -222,
    0,    0, 1068,    0,    0,    0,    0,    0, -220,    0,
    0,   18,    0,    0,    0,    0,    0,    0, 1457,    0,
    0,    0,    0,    0,    0,   44,   50,    0, 1393, 1533,
 1533, -103, 1185,    0,    0,    0,    0,   60,    0, -205,
   73, -158, -152,    0,    0,    0,    0,  471,    0,    0,
    0,    0,  175,   10, -129,    0,    0, -102,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   99,    0,
    0,    0,    0,  148,  153, 1208,    0,    0,    0,  -44,
    0,  -53, 1549,  210,    0,    0,    0,  196,  -29,  200,
  -13,    0, -175,    0, 1393,  -53,  -27, 1393, 1393, -173,
 1480, 1480,    0,    0,    0,  255,    0,    0,    0, 1273,
 1480, 1480, 1480, 1480, 1480, -125,  666, 1393, 1393, 1393,
    0,    9, -121,   25,    0,  293, 1068,    0,   57, -220,
 1549, 1607, 1607,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   68,  182,  114,   48,    0,    0,
  -53,    0,  -56,    0,  309,  120,  316,    0,  334,    0,
 -243,    0,    0, 1635,   85, 1393,   86,  118,    0, -104,
    0, -253,    0, -127,    0,   90,    0,    0,    0,    0,
    0,    0,    0, 1480, 1480,  346,  116,  108, 1340,    0,
    0,    0, 1340,    0,    0,  362,    0,    0,    0,    0,
    0,  122,    0,    0,    0,    0,  371,  -53, 1549,    0,
  359,  370,  376,  111, 1393, -110,    9,    0, 1393,  121,
    0,    0, -103, 1549,    0,  378,    0,    0,  159, 1549,
 1549, 1549, 1549, 1549,    0,  196,    0,    0,  196,    0,
  387, 1068,  -53,  -29,  -53,    0, 1668, 1635,  381,  381,
    0,    0, -102,    0,    0,    0,    0,  154,  147,    0,
    0,  715,    0,  185,  130,  145,    0,    0,    0,    0,
  350,    0,  -26,    0,    0,    0,    0,    0,  155,  108,
 1340, 1480,  886,    0,  394, 1068,  402,  403,  -44,    0,
    0,    0,    0, 1393, 1393,    0, 1393,  150,    0,  162,
    0,    0,    0,    0,    0,  414,    0,  -40,    0,    0,
    0,    0,    0,    0,    0,   41, -103,  425,    0,    0,
    0,  433,    0,    0,    0, 1635, 1635, -132, 1242, 1242,
  436,  597, 1242, 1242, 1242, 1242, 1242,  350,  405,  405,
    0,    0,    0,    0,  442,    0,  245,  131,  189,    0,
  -76,  -76,    0,  443, 1480,    0, 1068,  447,    0,    0,
    0, 1393, -103,    0,    0,  448,  460,    0,    0, 1393,
    0,    0,  238,    0,  -53,  -53,  463,    0,  -53,    0,
    0,    0, 1242, 1242,  464,  223,  226, 1102,  789,  478,
    0,    0,    0,    0,    0,    0,    0,  465,    0,    0,
  350,  350,  350,  350,  350,  350,    0,    0,    0,    0,
  -26,    0, -103,    0,    0,  481,    0,    0,    0,  486,
  479,    0,  489,  492,  -53,    0,  257,  226, 1102, 1242,
  886,    0, 1068,  498,  504,  506,  -44,    0,    0,    0,
    0,    0,    0,    0,    0,  507,    0,    0,  -53,    0,
  -53,  515, 1242,    0, 1068,  519,    0,    0,    0, -103,
 1242,    0,    0,  520,    0,  521,    0,    0,    0, -103,
    0,  522,    0,    0,    0,  529,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -47,    0,   39,
 1881, 1848,  126,    0,    0,    0,    0,  685,    0,    0,
    0,    0, 1974, 1823, 1912,    0,    0, 1943,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   -5,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -36,  -31,   35,    0,    0,
    0,    0,  -35,    0,  296,    0,  748,    0,  -28,    0,
  -38,    0,    0,    0,    0,    0,    0,    0,    0,    5,
    0,   38,    0,   94,    0,  105,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1744,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  531,    0,    0,    0,    0,  -97,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2242,    0,    0,    0,    0,  307,  228,    0,
    0,    3,    0, 2280, 2073, 2030,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1780,
    0,    0,    0,    0,  541,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  530,    0, 1125,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  165,    0,  -19,   93,   27,    0,
  -21,  -12,    0,   -4,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  836,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  158,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1095,    0,    0,  543,    0,    0,    0,  215,    0,    0,
    0,    0,    0,  544,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0, -120,  218,    0,  496,    0,  557,  -52,    0,  497,
    0,    0,  664,  204,  495,    0,  572,  217,  391,    0,
  466,  335,    0,    0,    0,    0,    0,  264, -118,  133,
  483,    0,  275,    0,  788,    0, 1002,  931,  974,  324,
 -148, -277,    0, -136,    0,   30,  231,   -3,  380,  439,
  654,  -30,    0,    0,    0,    0,  253,   88,  373,    0,
  205,    0,    0,    0,    0,  372,    0,    0,    0,    0,
  -68,    0,  314,    0,    0,    0,  393,  404,    0,  494,
    0,    0,    0,    0,  449,    0,  453,    0,  452,    0,
  451,    0,  229,    0, -314,  -48,  227,    0,   21,  224,
    0,  284,  397,    0,    0,    0, -358,    0,    0,    0,
 -146,  322,    0,  409,    0, 1961,    0,    0,   28,  326,
    0,  119,    0,    0,    0,  251, -395,
};
final static int YYTABLESIZE=2581;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         65,
  374,  151,  216,  358,  104,  216,  223,  122,   67,  107,
  156,  107,  207,  107,   28,   65,  237,  257,    6,  202,
  216,  183,  202,  398,  183,   65,   65,   65,  200,   65,
  207,  200,   63,  456,    1,  164,  198,  202,   79,  183,
  286,  166,  167,  237,  180,  166,  200,  168,   63,  211,
   13,  113,  144,  164,  198,  245,  114,   80,   63,   63,
   63,  237,   63,  166,  206,  473,  452,  189,  189,  189,
  189,  189,   65,  189,  288,  110,  110,  110,  169,  110,
  376,  110,   17,   82,  415,  189,  144,  440,  441,   83,
  466,   65,  467,   96,   65,   65,  169,   65,   65,  314,
  144,  144,  144,   95,  164,   63,   65,   65,   65,   65,
   65,   65,  184,  185,   65,   65,   65,  165,   97,  166,
  167,  317,   98,   65,   63,  168,  186,   63,   63,   99,
   63,   63,  357,  186,  172,  186,  186,  186,  117,   63,
   63,   63,   63,   63,   63,  175,  298,   63,   63,   63,
  302,  186,  172,  383,  384,  232,   63,  202,  203,  225,
  233,  115,   65,  175,  274,  363,   20,  385,  167,   20,
  366,  335,  404,  168,   88,   89,  336,  405,  144,  381,
   65,   65,  116,  218,   20,   65,  219,  118,  165,   65,
  166,  167,  119,  144,  299,   63,  168,  219,  264,  144,
  144,  144,  144,  144,  236,  180,  159,  153,    6,  159,
  153,   65,  125,   63,   63,   65,  264,  111,   63,  112,
  407,  408,   63,  180,  230,  367,  231,  333,  369,  334,
   13,   13,    6,   64,    6,    6,  413,    8,   65,  433,
  342,  216,  104,   67,   63,  199,  200,  107,   63,   64,
  150,  207,  361,  151,  216,  266,  216,  216,  162,   64,
   64,   64,  216,   64,  207,   89,  207,  207,  230,  352,
  436,   63,  207,  266,  373,  183,  183,   65,   65,  202,
  455,  183,   65,  237,  237,  128,  230,  402,  200,  403,
   65,   65,  157,   65,  189,  237,  198,  237,  237,  179,
  181,  419,    6,  237,   85,   87,   64,  342,  342,  342,
   63,   63,  460,  110,  215,   63,   17,   17,  464,  311,
  312,  189,  189,   63,   63,   64,   63,  189,   64,   64,
  120,   64,   64,  222,  470,  224,  227,  228,  234,  375,
   64,   64,   64,   64,   64,   64,  229,  228,   64,   64,
   64,   65,  239,   65,  235,  442,  443,   64,   65,  399,
  400,  243,  395,  396,  246,  228,   65,  324,  325,  210,
  342,  342,  342,  342,  342,  342,  240,  244,  271,  273,
  251,    8,   66,  226,   63,  281,   63,  186,  186,  338,
  168,   63,  339,  186,  340,  283,   64,  282,   66,   63,
  459,  289,  294,   20,   20,  290,   20,  352,   66,   66,
   66,  291,   66,  295,   64,   64,  296,  297,  307,   64,
  248,   20,  308,   64,   20,  303,   20,  316,  327,   65,
   20,   20,   20,   20,  326,  337,  355,  362,  264,  264,
  304,   67,  364,  365,  338,   64,  318,  157,  320,   64,
  264,   65,  264,  264,  372,   66,  370,   67,  264,  180,
  180,  293,   63,  251,  251,  180,  371,   67,   67,   67,
  379,   67,   64,  380,   66,  388,  305,   66,   66,  406,
   66,   66,  309,  310,   63,  401,  411,  414,  417,   66,
   66,   66,   66,   66,   66,  266,  266,   66,   66,   66,
  418,  420,  425,  429,  430,  438,   66,  266,  230,  266,
  266,   64,   64,  431,   67,  266,   64,  437,  449,  377,
  230,  447,  230,  230,   64,   64,  448,   64,  230,  450,
  108,  107,  109,   67,  378,  451,   67,   67,  453,   67,
   67,  461,  251,  251,  462,   66,  463,  465,   67,   67,
   67,   67,   67,   67,  252,  468,   67,   67,   67,  471,
  474,  475,  477,   66,   66,   67,  187,  188,   66,  478,
  210,  147,   66,  210,  137,  194,  197,  198,  421,  422,
  416,   64,  426,  224,  275,   64,  163,   64,  210,   94,
   81,  178,   64,  183,   66,  390,  332,  201,   66,  228,
   64,  228,  228,  356,   67,  251,  313,  228,  368,  301,
  315,    6,    7,    8,  130,   10,   11,  221,  275,  300,
   13,   66,   67,   67,  276,  277,  278,   67,  422,  439,
  446,   67,  444,   20,  445,  410,  389,  252,  252,  249,
  319,  250,    6,    7,    8,  130,   10,   11,  382,  279,
  280,   13,  422,   67,  422,  321,   68,   67,   24,   25,
   66,   66,  397,   64,   20,   66,    6,    7,    8,  130,
   10,   11,   68,   66,   66,   13,   66,  472,  454,    0,
   67,    0,   68,   68,   68,   64,   68,  476,   20,   24,
   25,    0,   84,   26,   27,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  131,    0,   28,  132,    0,
  133,    0,    0,   24,   25,    0,  252,  252,    0,   67,
   67,    0,    0,    0,   67,   27,    0,    0,   27,   68,
    0,    0,   67,   67,   66,   67,   66,    0,    0,  121,
    0,   66,    0,   27,    0,    0,    0,  359,   68,   66,
    0,   68,   68,  100,   68,   68,  101,  102,    0,  103,
  104,  182,  105,   68,   68,   68,   68,   68,   68,    0,
  106,   68,   68,   68,  108,  107,  109,    0,    0,  252,
   68,  121,  121,  214,    0,    0,    0,    0,  219,    0,
    0,  219,    0,   67,    0,   67,    0,    0,    0,    0,
   67,    0,    0,    0,    0,    0,  219,    0,   67,  210,
    0,    0,   66,    0,    0,    0,    0,   86,   86,   68,
  412,    0,  210,    0,  210,  210,    0,    0,  248,  272,
  210,  249,    0,  250,   66,    0,    0,   68,   68,    0,
    0,    0,   68,    0,    0,    0,   68,    0,    0,    0,
    0,    0,  285,    0,  190,    0,   84,    0,    6,    7,
    8,  130,   10,   11,    0,    0,    0,   13,   68,    0,
  134,   67,   68,    0,    0,    0,  211,    0,  121,  211,
   20,    0,  121,    0,    0,    0,    0,    0,   86,   86,
    0,    0,    0,   67,  211,   68,    0,   86,   86,   86,
   86,   86,   86,    0,  134,   24,   25,  191,  192,   26,
   27,    0,    0,    0,    0,    0,    0,    0,  134,  134,
  134,    0,    0,  204,  205,    0,    0,    6,    7,    8,
  130,   10,   11,    0,   68,   68,   13,    0,    0,   68,
    0,    0,    0,    0,  285,    0,    0,   68,   68,   20,
   68,  253,    0,    0,    0,    0,    0,  121,  121,    0,
  121,    0,   27,   27,    0,   27,   27,   21,   22,   23,
    0,   86,   86,    0,   24,   25,    0,    0,   26,   27,
   27,    0,    0,   27,    0,   27,    0,    0,    0,   27,
   27,   27,   27,    0,    0,  292,  134,  328,    0,    0,
  329,  330,    0,  103,  104,    0,  105,    0,   68,  219,
   68,  134,    0,  136,  331,   68,    0,  134,  134,  134,
  134,  134,    0,   68,    0,  285,    0,  219,    0,    0,
    0,    0,    0,  121,  253,  253,  323,  323,    0,    0,
  219,    0,  219,  219,    0,  125,  219,  136,  219,    0,
    6,    7,    8,  130,   10,   11,  137,   12,  341,   13,
  351,  136,  136,  136,    0,    0,    0,    0,    0,   86,
  360,  247,   20,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  135,    0,   68,    0,    0,    0,
  137,    0,    0,    0,  254,    0,    0,   24,   25,    0,
    0,   26,   27,    0,  137,  137,  137,   29,   68,   28,
   30,    0,   31,  253,  253,  211,  323,  323,  135,  323,
  323,  323,  323,  323,  323,  341,  341,  341,  211,    0,
  211,  211,  135,  135,  135,  212,  211,  255,  212,  136,
    0,  248,   86,    0,  249,    0,  250,    6,    7,    8,
  130,   10,   11,  212,  136,    0,   13,    0,    0,    0,
  136,  136,  136,  136,  136,  220,    0,    0,  220,   20,
  323,  323,    0,    0,    0,  323,  253,  254,  254,  254,
  254,    0,  137,  220,    0,    0,    0,    0,  341,  341,
  341,  341,  341,  341,   24,   25,    0,  137,  351,    0,
    0,    0,    0,  137,  137,  137,  137,  137,    0,    0,
  135,    0,    0,    0,    0,    0,  323,  323,  458,    0,
  255,  255,  255,  255,   29,  135,   28,   30,    0,   31,
    0,  135,  135,  135,  135,  135,    0,    0,    0,    0,
  323,    0,    0,    0,    0,    0,    0,   29,  323,    0,
   30,    0,   31,    0,    0,    0,  254,  254,    0,  254,
  254,    0,  254,  254,  254,  254,  254,  254,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  248,    0,    0,  249,    0,  250,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  255,
  255,    0,  255,  255,    0,  255,  255,  255,  255,  255,
  255,    0,  193,  254,  254,   30,    0,   31,  254,  254,
    0,    0,    0,    0,    0,    4,    5,    0,    0,    6,
    7,    8,    9,   10,   11,    0,   12,    0,   13,    0,
   14,   15,   16,   17,   18,    0,    0,    0,    0,    0,
   19,   20,    0,    0,    0,    0,  255,  255,  125,  254,
  254,  255,  255,    6,    7,    8,  130,   10,   11,   21,
   22,   23,   13,    0,  212,    0,   24,   25,    0,   29,
   26,   27,   30,  254,   31,   20,  220,  212,    0,  212,
  212,  254,    0,    0,    0,  212,    0,    0,    0,    0,
    0,    0,  255,  255,  220,    0,    0,    0,    0,    0,
   24,   25,    0,    0,   26,   27,    0,  220,    0,  220,
  220,    0,    0,  220,    0,  220,  255,    0,    0,    0,
    0,    0,   29,    0,  255,   30,    0,   31,    0,    0,
    0,    0,    0,    0,    0,    0,    6,    7,    8,    9,
   10,   11,    0,   12,    0,   13,    0,   14,   15,   16,
   17,   18,    0,    0,    0,    0,    0,   19,   20,    6,
    7,    8,    9,   10,   11,    0,   12,    0,   13,    0,
   14,   15,   16,   17,   18,    0,   21,   22,   23,    0,
   19,   20,    0,   24,   25,    0,   29,   26,   27,   30,
    0,   31,    0,    6,    7,    8,  130,   10,   11,   21,
   22,   23,   13,  120,    0,    0,   24,   25,    0,   29,
   26,   27,   30,    0,   31,   20,    0,    0,    0,    0,
  190,    0,    0,    0,    6,    7,    8,    9,   10,   11,
    0,    0,    0,   13,    0,   14,   15,   16,   17,   18,
   24,   25,    0,    0,   26,   27,   20,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   29,    0,   21,   22,   23,    0,    0,    0,
    0,   24,   25,  191,  192,   26,   27,    0,  131,    0,
    0,  132,    0,  133,    0,    0,  125,    0,    0,    0,
    0,    6,    7,    8,    9,   10,   11,    0,   12,    0,
   13,    0,   14,   15,   16,   17,   18,    0,    0,    0,
    0,    0,   19,   20,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   21,   22,   23,    0,    0,  131,    0,   24,   25,
    0,    0,   26,   27,    6,    7,    8,    9,   10,   11,
    0,   12,    0,   13,    0,   14,   15,   16,   17,   18,
    0,    0,    0,    0,  248,   19,   20,  249,    0,  250,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   21,   22,   23,    0,    0,    0,
    0,   24,   25,    0,    0,   26,   27,  248,    0,    0,
  249,    0,  250,    0,    0,    0,    0,    0,    6,    7,
    8,    9,   10,   11,    0,   12,    0,   13,    0,   14,
   15,   16,   17,   18,    0,    0,    0,    0,    0,    0,
   20,    6,    7,    8,    9,   10,   11,    0,    0,    0,
   13,    0,   14,   15,   16,   17,   18,    0,   21,   22,
   23,    0,    0,   20,    0,   24,   25,    0,    0,   26,
   27,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   21,   22,   23,   56,    0,    0,   56,   24,   25,
    0,    0,   26,   27,    6,    7,    8,    9,   10,   11,
    0,    0,   56,   13,    0,   14,   15,   16,   17,   18,
    6,    7,    8,  130,   10,   11,   20,    0,    0,   13,
   58,    0,    0,   58,    0,    0,    0,    0,    0,    0,
    0,    0,   20,    0,   21,   22,   23,    0,   58,    0,
    0,   24,   25,    0,    0,   26,   27,    0,    0,    0,
   21,   22,   23,    0,    0,    0,    0,   24,   25,    0,
    0,   26,   27,   39,    0,   39,   39,   39,    6,    7,
    8,  130,   10,   11,    0,    0,    0,   13,    0,    0,
    0,   39,   39,   39,   39,    0,    0,    0,   18,    0,
   20,   18,    0,    0,    0,    0,    6,    7,    8,  130,
   10,   11,    0,   12,    0,   13,   18,    0,   21,   22,
   23,    0,    0,    0,    0,   24,   25,  247,   20,   26,
   27,  129,  129,  129,  129,  129,    0,  129,    0,    6,
    7,    8,  130,   10,   11,    0,   12,    0,   13,  129,
  129,  129,  129,   24,   25,    0,    0,   26,   27,    0,
    0,   20,   42,   42,   42,   42,   42,    0,   42,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   42,   42,   42,   42,    0,    0,   24,   25,    0,    0,
   26,   27,    0,   48,   48,   48,   48,   48,    0,   48,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   48,   48,   48,   48,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,    0,   36,    0,    0,
    0,   56,   56,    0,   56,   56,    0,    0,    0,    0,
    0,    0,   36,   36,   36,   36,    0,    0,    0,   56,
    0,    0,   56,    0,   56,    0,    0,    0,   56,   56,
   56,   56,    0,    0,    0,    0,    0,   58,   58,    0,
   58,   58,    0,    0,    0,    0,    0,    0,    0,    0,
  249,  249,  249,  249,  249,   58,  249,    0,   58,    0,
   58,    0,    0,    0,   58,   58,   58,   58,  249,  249,
  249,  249,    0,    0,    0,    0,    0,    0,    0,    0,
   39,   39,    0,   39,   39,   39,    0,    0,   39,   39,
   39,   39,   39,  246,   39,  246,  246,  246,   39,    0,
    0,   39,   39,   39,    0,   18,   18,   39,   39,   39,
   39,  246,  246,  246,  246,    0,    0,    0,    0,    0,
    0,    0,    0,   18,    0,    0,   18,    0,   18,    0,
    0,    0,   18,   18,   18,   18,    0,    0,  129,  129,
    0,  129,  129,  129,    0,  129,  129,  129,  129,  129,
  129,  129,  129,  129,    0,  129,  129,  129,  129,  129,
  129,  129,    0,    0,    0,  129,  129,  129,  129,   42,
   42,    0,   42,   42,   42,    0,    0,   42,   42,   42,
   42,   42,    0,   42,    0,    0,    0,   42,    0,    0,
   42,   42,   42,    0,    0,    0,   42,   42,   42,   42,
   48,   48,    0,   48,   48,   48,    0,    0,   48,   48,
    0,   48,   48,   48,   48,    0,    0,    0,   48,    0,
    0,   48,   48,   48,    0,    0,    0,   48,   48,   48,
   48,   36,   36,    0,   36,   36,   36,    0,    0,   36,
   36,   36,   36,   36,    0,   36,    0,    0,    0,   36,
    0,    0,   36,   36,   36,    0,    0,    0,   36,   36,
   36,   36,  254,  254,  254,    0,  254,    0,  254,  386,
  387,    0,  391,  393,  394,    0,    0,    0,    0,    0,
  254,  254,  254,  254,    0,    0,    0,    0,    0,    0,
  249,  249,  249,    0,    0,  249,  249,  249,  249,  249,
  243,  249,  249,  243,  249,  249,    0,    0,    0,  249,
  249,    0,    0,    0,    0,    0,    0,    0,  243,  243,
  243,  243,    0,  427,  428,    0,    0,    0,  434,    0,
    0,    0,    0,  246,  246,  246,    0,    0,  246,  246,
  246,  246,  246,    0,  246,  246,    0,  246,  246,    0,
    0,    0,  246,  246,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  434,
  457,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  469,    0,    0,    0,    0,    0,    0,
    0,  434,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  254,  254,  254,    0,    0,  254,  254,    0,
  254,  254,  254,  254,  254,    0,  254,  254,    0,    0,
    0,  254,  254,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  243,  243,  243,    0,    0,  243,  243,  243,  243,  243,
    0,  243,  243,    0,  243,  243,    0,    0,    0,  243,
  243,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          3,
   41,   58,   41,  281,   41,   44,  127,   76,   44,   41,
   40,   43,   41,   45,   42,   19,  153,  164,  262,   41,
   59,   41,   44,  338,   44,   29,   30,   31,   41,   33,
   59,   44,    3,  429,  257,   41,   41,   59,    9,   59,
  189,  295,  296,   41,   97,   41,   59,  301,   19,  118,
  271,   42,   83,   59,   59,  299,   47,   40,   29,   30,
   31,   59,   33,   59,  117,  461,  425,   41,   42,   43,
   44,   45,   76,   47,  193,   41,   42,   43,   41,   45,
   40,   47,   44,   40,  362,   59,  117,  402,  403,   40,
  449,   95,  451,  299,   98,   99,   59,  101,  102,  236,
  131,  132,  133,   44,  280,   76,  110,  111,  112,  113,
  114,  115,  286,  287,  118,  119,  120,  293,   46,  295,
  296,  242,  281,  127,   95,  301,  300,   98,   99,  282,
  101,  102,  281,   41,   41,   43,   44,   45,   40,  110,
  111,  112,  113,  114,  115,   41,  215,  118,  119,  120,
  219,   59,   59,  286,  287,   42,  127,  283,  284,  130,
   47,  291,  166,   59,  168,  286,   41,  300,  296,   44,
  289,   42,   42,  301,  278,  279,   47,   47,  209,  326,
  184,  185,  285,  305,   59,  189,  308,   40,  293,  193,
  295,  296,   40,  224,  305,  166,  301,  308,   41,  230,
  231,  232,  233,  234,  261,   41,  305,  305,  262,  308,
  308,  215,  257,  184,  185,  219,   59,   43,  189,   45,
  297,  298,  193,   59,   43,  294,   45,   43,  297,   45,
  278,  279,  262,    3,  262,  262,  357,  264,  242,  388,
  271,  280,  279,  279,  215,  113,  114,  279,  219,   19,
   41,  280,  283,   58,  293,   41,  295,  296,   59,   29,
   30,   31,  301,   33,  293,  279,  295,  296,   41,  273,
  389,  242,  301,   59,  315,  295,  296,  281,  282,  301,
  429,  301,  286,  281,  282,   82,   59,   43,  301,   45,
  294,  295,   89,  297,   40,  293,  301,  295,  296,   96,
   97,  370,  262,  301,   30,   31,   76,  338,  339,  340,
  281,  282,  433,  279,  306,  286,  278,  279,  437,  232,
  233,  295,  296,  294,  295,   95,  297,  301,   98,   99,
  306,  101,  102,   41,  455,  279,  132,  133,  291,  299,
  110,  111,  112,  113,  114,  115,  279,   41,  118,  119,
  120,  355,   44,  357,  151,  404,  405,  127,  362,  339,
  340,   46,  335,  336,  161,   59,  370,  249,  250,  117,
  401,  402,  403,  404,  405,  406,  257,   44,  294,  294,
  164,  264,    3,  131,  355,   40,  357,  295,  296,   40,
  301,  362,   43,  301,   45,  288,  166,  282,   19,  370,
  431,   40,   44,  278,  279,  284,  281,  411,   29,   30,
   31,   41,   33,   44,  184,  185,   41,  307,   41,  189,
   40,  296,  264,  193,  299,  305,  301,   41,  282,  433,
  305,  306,  307,  308,  281,  291,  282,   44,  281,  282,
  223,    3,   41,   41,   40,  215,  243,  244,  245,  219,
  293,  455,  295,  296,   41,   76,  307,   19,  301,  295,
  296,  209,  433,  247,  248,  301,  305,   29,   30,   31,
   46,   33,  242,   41,   95,   40,  224,   98,   99,  291,
  101,  102,  230,  231,  455,   44,   44,   41,   41,  110,
  111,  112,  113,  114,  115,  281,  282,  118,  119,  120,
   41,  264,   40,   40,  282,   41,  127,  293,  281,  295,
  296,  281,  282,  288,   76,  301,  286,   40,   40,  316,
  293,   41,  295,  296,  294,  295,   41,  297,  301,   41,
   60,   61,   62,   95,  317,   44,   98,   99,  282,  101,
  102,   44,  326,  327,   41,  166,   41,   41,  110,  111,
  112,  113,  114,  115,  164,   41,  118,  119,  120,   41,
   41,   41,   41,  184,  185,  127,  101,  102,  189,   41,
   41,   41,  193,   44,  279,  110,  111,  112,  375,  376,
  363,   41,  379,   41,   41,  355,   91,  357,   59,   33,
   19,   95,  362,   99,  215,  332,  262,  115,  219,  293,
  370,  295,  296,  280,  166,  389,  234,  301,  295,  217,
  239,  262,  263,  264,  265,  266,  267,  124,  170,  216,
  271,  242,  184,  185,  172,  174,  176,  189,  425,  401,
  413,  193,  406,  284,  411,  352,   40,  247,  248,   43,
  244,   45,  262,  263,  264,  265,  266,  267,  327,  184,
  185,  271,  449,  215,  451,  247,    3,  219,  309,  310,
  281,  282,  337,  433,  284,  286,  262,  263,  264,  265,
  266,  267,   19,  294,  295,  271,  297,  460,  428,   -1,
  242,   -1,   29,   30,   31,  455,   33,  470,  284,  309,
  310,   -1,   29,  313,  314,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,  309,  310,   -1,  326,  327,   -1,  281,
  282,   -1,   -1,   -1,  286,   41,   -1,   -1,   44,   76,
   -1,   -1,  294,  295,  355,  297,  357,   -1,   -1,   76,
   -1,  362,   -1,   59,   -1,   -1,   -1,  282,   95,  370,
   -1,   98,   99,  283,  101,  102,  286,  287,   -1,  289,
  290,   98,  292,  110,  111,  112,  113,  114,  115,   -1,
  300,  118,  119,  120,   60,   61,   62,   -1,   -1,  389,
  127,  118,  119,  120,   -1,   -1,   -1,   -1,   41,   -1,
   -1,   44,   -1,  355,   -1,  357,   -1,   -1,   -1,   -1,
  362,   -1,   -1,   -1,   -1,   -1,   59,   -1,  370,  280,
   -1,   -1,  433,   -1,   -1,   -1,   -1,   30,   31,  166,
  355,   -1,  293,   -1,  295,  296,   -1,   -1,   40,  166,
  301,   43,   -1,   45,  455,   -1,   -1,  184,  185,   -1,
   -1,   -1,  189,   -1,   -1,   -1,  193,   -1,   -1,   -1,
   -1,   -1,  189,   -1,  258,   -1,  193,   -1,  262,  263,
  264,  265,  266,  267,   -1,   -1,   -1,  271,  215,   -1,
   83,  433,  219,   -1,   -1,   -1,   41,   -1,  215,   44,
  284,   -1,  219,   -1,   -1,   -1,   -1,   -1,  101,  102,
   -1,   -1,   -1,  455,   59,  242,   -1,  110,  111,  112,
  113,  114,  115,   -1,  117,  309,  310,  311,  312,  313,
  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  131,  132,
  133,   -1,   -1,  258,  259,   -1,   -1,  262,  263,  264,
  265,  266,  267,   -1,  281,  282,  271,   -1,   -1,  286,
   -1,   -1,   -1,   -1,  281,   -1,   -1,  294,  295,  284,
  297,  164,   -1,   -1,   -1,   -1,   -1,  294,  295,   -1,
  297,   -1,  278,  279,   -1,  281,  282,  302,  303,  304,
   -1,  184,  185,   -1,  309,  310,   -1,   -1,  313,  314,
  296,   -1,   -1,  299,   -1,  301,   -1,   -1,   -1,  305,
  306,  307,  308,   -1,   -1,  208,  209,  283,   -1,   -1,
  286,  287,   -1,  289,  290,   -1,  292,   -1,  355,  262,
  357,  224,   -1,   83,  300,  362,   -1,  230,  231,  232,
  233,  234,   -1,  370,   -1,  362,   -1,  280,   -1,   -1,
   -1,   -1,   -1,  370,  247,  248,  249,  250,   -1,   -1,
  293,   -1,  295,  296,   -1,  257,  299,  117,  301,   -1,
  262,  263,  264,  265,  266,  267,   83,  269,  271,  271,
  273,  131,  132,  133,   -1,   -1,   -1,   -1,   -1,  282,
  283,  283,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   83,   -1,  433,   -1,   -1,   -1,
  117,   -1,   -1,   -1,  164,   -1,   -1,  309,  310,   -1,
   -1,  313,  314,   -1,  131,  132,  133,   40,  455,   42,
   43,   -1,   45,  326,  327,  280,  329,  330,  117,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  293,   -1,
  295,  296,  131,  132,  133,   41,  301,  164,   44,  209,
   -1,   40,  355,   -1,   43,   -1,   45,  262,  263,  264,
  265,  266,  267,   59,  224,   -1,  271,   -1,   -1,   -1,
  230,  231,  232,  233,  234,   41,   -1,   -1,   44,  284,
  383,  384,   -1,   -1,   -1,  388,  389,  247,  248,  249,
  250,   -1,  209,   59,   -1,   -1,   -1,   -1,  401,  402,
  403,  404,  405,  406,  309,  310,   -1,  224,  411,   -1,
   -1,   -1,   -1,  230,  231,  232,  233,  234,   -1,   -1,
  209,   -1,   -1,   -1,   -1,   -1,  429,  430,  431,   -1,
  247,  248,  249,  250,   40,  224,   42,   43,   -1,   45,
   -1,  230,  231,  232,  233,  234,   -1,   -1,   -1,   -1,
  453,   -1,   -1,   -1,   -1,   -1,   -1,   40,  461,   -1,
   43,   -1,   45,   -1,   -1,   -1,  326,  327,   -1,  329,
  330,   -1,  332,  333,  334,  335,  336,  337,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,
  327,   -1,  329,  330,   -1,  332,  333,  334,  335,  336,
  337,   -1,   40,  383,  384,   43,   -1,   45,  388,  389,
   -1,   -1,   -1,   -1,   -1,  258,  259,   -1,   -1,  262,
  263,  264,  265,  266,  267,   -1,  269,   -1,  271,   -1,
  273,  274,  275,  276,  277,   -1,   -1,   -1,   -1,   -1,
  283,  284,   -1,   -1,   -1,   -1,  383,  384,  257,  429,
  430,  388,  389,  262,  263,  264,  265,  266,  267,  302,
  303,  304,  271,   -1,  280,   -1,  309,  310,   -1,   40,
  313,  314,   43,  453,   45,  284,  262,  293,   -1,  295,
  296,  461,   -1,   -1,   -1,  301,   -1,   -1,   -1,   -1,
   -1,   -1,  429,  430,  280,   -1,   -1,   -1,   -1,   -1,
  309,  310,   -1,   -1,  313,  314,   -1,  293,   -1,  295,
  296,   -1,   -1,  299,   -1,  301,  453,   -1,   -1,   -1,
   -1,   -1,   40,   -1,  461,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  262,  263,  264,  265,
  266,  267,   -1,  269,   -1,  271,   -1,  273,  274,  275,
  276,  277,   -1,   -1,   -1,   -1,   -1,  283,  284,  262,
  263,  264,  265,  266,  267,   -1,  269,   -1,  271,   -1,
  273,  274,  275,  276,  277,   -1,  302,  303,  304,   -1,
  283,  284,   -1,  309,  310,   -1,   40,  313,  314,   43,
   -1,   45,   -1,  262,  263,  264,  265,  266,  267,  302,
  303,  304,  271,  306,   -1,   -1,  309,  310,   -1,   40,
  313,  314,   43,   -1,   45,  284,   -1,   -1,   -1,   -1,
  258,   -1,   -1,   -1,  262,  263,  264,  265,  266,  267,
   -1,   -1,   -1,  271,   -1,  273,  274,  275,  276,  277,
  309,  310,   -1,   -1,  313,  314,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,  309,  310,  311,  312,  313,  314,   -1,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,  257,   -1,   -1,   -1,
   -1,  262,  263,  264,  265,  266,  267,   -1,  269,   -1,
  271,   -1,  273,  274,  275,  276,  277,   -1,   -1,   -1,
   -1,   -1,  283,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  302,  303,  304,   -1,   -1,   40,   -1,  309,  310,
   -1,   -1,  313,  314,  262,  263,  264,  265,  266,  267,
   -1,  269,   -1,  271,   -1,  273,  274,  275,  276,  277,
   -1,   -1,   -1,   -1,   40,  283,  284,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,  309,  310,   -1,   -1,  313,  314,   40,   -1,   -1,
   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,  262,  263,
  264,  265,  266,  267,   -1,  269,   -1,  271,   -1,  273,
  274,  275,  276,  277,   -1,   -1,   -1,   -1,   -1,   -1,
  284,  262,  263,  264,  265,  266,  267,   -1,   -1,   -1,
  271,   -1,  273,  274,  275,  276,  277,   -1,  302,  303,
  304,   -1,   -1,  284,   -1,  309,  310,   -1,   -1,  313,
  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  302,  303,  304,   41,   -1,   -1,   44,  309,  310,
   -1,   -1,  313,  314,  262,  263,  264,  265,  266,  267,
   -1,   -1,   59,  271,   -1,  273,  274,  275,  276,  277,
  262,  263,  264,  265,  266,  267,  284,   -1,   -1,  271,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  284,   -1,  302,  303,  304,   -1,   59,   -1,
   -1,  309,  310,   -1,   -1,  313,  314,   -1,   -1,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,  309,  310,   -1,
   -1,  313,  314,   41,   -1,   43,   44,   45,  262,  263,
  264,  265,  266,  267,   -1,   -1,   -1,  271,   -1,   -1,
   -1,   59,   60,   61,   62,   -1,   -1,   -1,   41,   -1,
  284,   44,   -1,   -1,   -1,   -1,  262,  263,  264,  265,
  266,  267,   -1,  269,   -1,  271,   59,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,  309,  310,  283,  284,  313,
  314,   41,   42,   43,   44,   45,   -1,   47,   -1,  262,
  263,  264,  265,  266,  267,   -1,  269,   -1,  271,   59,
   60,   61,   62,  309,  310,   -1,   -1,  313,  314,   -1,
   -1,  284,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,   -1,   -1,  309,  310,   -1,   -1,
  313,  314,   -1,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,  278,  279,   -1,  281,  282,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   60,   61,   62,   -1,   -1,   -1,  296,
   -1,   -1,  299,   -1,  301,   -1,   -1,   -1,  305,  306,
  307,  308,   -1,   -1,   -1,   -1,   -1,  278,  279,   -1,
  281,  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   41,   42,   43,   44,   45,  296,   47,   -1,  299,   -1,
  301,   -1,   -1,   -1,  305,  306,  307,  308,   59,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  278,  279,   -1,  281,  282,  283,   -1,   -1,  286,  287,
  288,  289,  290,   41,  292,   43,   44,   45,  296,   -1,
   -1,  299,  300,  301,   -1,  278,  279,  305,  306,  307,
  308,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,   -1,   -1,  299,   -1,  301,   -1,
   -1,   -1,  305,  306,  307,  308,   -1,   -1,  278,  279,
   -1,  281,  282,  283,   -1,  285,  286,  287,  288,  289,
  290,  291,  292,  293,   -1,  295,  296,  297,  298,  299,
  300,  301,   -1,   -1,   -1,  305,  306,  307,  308,  278,
  279,   -1,  281,  282,  283,   -1,   -1,  286,  287,  288,
  289,  290,   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,   -1,   -1,  305,  306,  307,  308,
  278,  279,   -1,  281,  282,  283,   -1,   -1,  286,  287,
   -1,  289,  290,  291,  292,   -1,   -1,   -1,  296,   -1,
   -1,  299,  300,  301,   -1,   -1,   -1,  305,  306,  307,
  308,  278,  279,   -1,  281,  282,  283,   -1,   -1,  286,
  287,  288,  289,  290,   -1,  292,   -1,   -1,   -1,  296,
   -1,   -1,  299,  300,  301,   -1,   -1,   -1,  305,  306,
  307,  308,   41,   42,   43,   -1,   45,   -1,   47,  329,
  330,   -1,  332,  333,  334,   -1,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
  281,  282,  283,   -1,   -1,  286,  287,  288,  289,  290,
   41,  292,  293,   44,  295,  296,   -1,   -1,   -1,  300,
  301,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,
   61,   62,   -1,  383,  384,   -1,   -1,   -1,  388,   -1,
   -1,   -1,   -1,  281,  282,  283,   -1,   -1,  286,  287,
  288,  289,  290,   -1,  292,  293,   -1,  295,  296,   -1,
   -1,   -1,  300,  301,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  429,
  430,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  453,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  461,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  281,  282,  283,   -1,   -1,  286,  287,   -1,
  289,  290,  291,  292,  293,   -1,  295,  296,   -1,   -1,
   -1,  300,  301,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  281,  282,  283,   -1,   -1,  286,  287,  288,  289,  290,
   -1,  292,  293,   -1,  295,  296,   -1,   -1,   -1,  300,
  301,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=315;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,"TK_SELECT","TK_ALL","TK_DISTINCT","TK_USER",
"TK_INDICATOR","TK_NAME","TK_APPROXNUM","TK_INTNUM","TK_DATE","TK_INTERVAL1",
"TK_INTERVAL2","TK_COMENTARIO","TK_EXISTS","TK_PLIC","TK_STRING",
"TK_CONCATENATION","TK_AVG","TK_MIN","TK_MAX","TK_SUM","TK_COUNT","TK_INTO",
"TK_FROM","TK_WHERE","TK_OR","TK_AND","TK_NOT","TK_NULL","TK_IS","TK_BETWEEN",
"TK_LIKE","TK_ESCAPE","TK_DIFERENTE","TK_MENOR_IG","TK_VERTBAR","TK_MAIOR_IG",
"TK_GROUP","TK_BY","TK_HAVING","TK_ORDER","TK_ASC","TK_DESC","TK_AS","TK_IN",
"TK_LIMIT","TK_NULLIF","TK_COALESCE","TK_CASE","TK_END","TK_WHEN","TK_THEN",
"TK_ELSE","TK_TRUE","TK_FALSE","TK_ANY","TK_SOME","TK_EXTRACT","TK_SUBSTRING",
"TK_FOR",
};
final static String yyrule[] = {
"$accept : Select",
"Select : Select_ini Selection Select_tail ';'",
"Select_ini : TK_SELECT",
"Select_tail : Into Table_exp",
"Select_tail : Table_exp",
"All_or_distinct : TK_ALL",
"All_or_distinct : TK_DISTINCT",
"Selection : All_or_distinct Selection_term",
"Selection : Selection_term",
"Selection_term : Wildcard",
"Selection_term : Scalar_exp_list_ini",
"Wildcard : '*'",
"Scalar_exp_list_ini : Scalar_exp_list",
"Scalar_exp_list : Scalar_exp_ini",
"Scalar_exp_list : Scalar_exp_ini ',' Scalar_exp_list",
"Scalar_exp_ini : Scalar_exp_as",
"Scalar_exp_as : Scalar_condition TK_AS Name",
"Scalar_exp_as : Scalar_condition",
"Scalar_condition : Scalar_condition_term",
"Scalar_condition : Scalar_condition_term TK_OR Scalar_condition",
"Scalar_condition_term : Scalar_Not_tag",
"Scalar_condition_term : Scalar_Not_tag TK_AND Scalar_condition_term",
"Scalar_Not_tag : Scalar_predicate",
"Scalar_Not_tag : TK_NOT Scalar_predicate",
"Scalar_predicate : Test_for_null",
"Scalar_predicate : Existence_test",
"Scalar_predicate : Scalar_relational_exp",
"Scalar_relational_exp : Scalar_exp",
"Scalar_relational_exp : Scalar_exp Comparison Scalar_relational_rvalue",
"Scalar_relational_exp : Scalar_relational_predicate",
"Scalar_relational_predicate : Scalar_between_predicate",
"Scalar_relational_predicate : Scalar_like_predicate",
"Scalar_relational_predicate : Scalar_in_predicate",
"Scalar_relational_rvalue : Scalar_exp",
"Scalar_relational_rvalue : Any_all_some '(' Subquery ')'",
"Scalar_relational_rvalue : '(' Subquery ')'",
"Scalar_exp : Scalar_term",
"Scalar_exp : Scalar_term '+' Scalar_exp",
"Scalar_exp : Scalar_term '-' Scalar_exp",
"Scalar_term : Scalar_concatenation_op",
"Scalar_term : Scalar_concatenation_op '*' Scalar_term",
"Scalar_term : Scalar_concatenation_op '/' Scalar_term",
"Scalar_concatenation_op : Scalar_factor_unary_op",
"Scalar_concatenation_op : Scalar_factor_unary_op TK_VERTBAR Scalar_concatenation_op",
"Scalar_factor_unary_op : Scalar_factor",
"Scalar_factor_unary_op : '+' Scalar_factor",
"Scalar_factor_unary_op : '-' Scalar_factor",
"Scalar_factor : Function_ref_selection",
"Scalar_factor : Column_ref",
"Scalar_factor : '(' Scalar_condition ')'",
"Scalar_factor : Literal_selection",
"Scalar_factor : Case_expression",
"Scalar_factor : Numeric_value_function",
"Scalar_factor : String_value_function",
"Scalar_between_predicate : Scalar_exp TK_BETWEEN Scalar_exp TK_AND Scalar_exp",
"Scalar_between_predicate : Scalar_exp TK_NOT TK_BETWEEN Scalar_exp TK_AND Scalar_exp",
"Scalar_like_predicate : Scalar_exp TK_LIKE Scalar_exp",
"Scalar_like_predicate : Scalar_exp TK_LIKE Scalar_exp Search_escape",
"Scalar_like_predicate : Scalar_exp TK_NOT TK_LIKE Scalar_exp",
"Scalar_like_predicate : Scalar_exp TK_NOT TK_LIKE Scalar_exp Search_escape",
"Scalar_in_predicate : Scalar_exp TK_IN '(' Subquery_ini Selection Select_tail ')'",
"Scalar_in_predicate : Scalar_exp TK_NOT TK_IN '(' Subquery_ini Selection Select_tail ')'",
"Scalar_in_predicate : Scalar_exp TK_IN '(' Scalar_in_value_list ')'",
"Scalar_in_predicate : Scalar_exp TK_NOT TK_IN '(' Scalar_in_value_list ')'",
"Scalar_in_value_list : Scalar_condition",
"Scalar_in_value_list : Scalar_condition ',' Scalar_in_value_list",
"Parameter_ref : Parameter Parameter_tail",
"Parameter_ref : Parameter",
"Parameter_tail : TK_INDICATOR Parameter",
"Parameter_tail : Parameter",
"Parameter : ':' Name",
"Name : TK_NAME",
"Literal_selection : String",
"Literal_selection : Approxnum",
"Literal_selection : Intnum",
"Literal_selection : TK_DATE String",
"Literal_selection : Interval",
"Literal_selection : Boolean",
"Literal_selection : Null",
"Literal : String",
"Literal : Approxnum",
"Literal : Intnum",
"Literal : TK_DATE String",
"Literal : Interval",
"Literal : Boolean",
"Literal : Null",
"String : TK_STRING",
"Approxnum : TK_APPROXNUM",
"Intnum : TK_INTNUM",
"Boolean : TK_TRUE",
"Boolean : TK_FALSE",
"Null : TK_NULL",
"Interval : TK_INTERVAL1",
"Interval : TK_INTERVAL2",
"Function_ref_selection : Function_name '(' Function_parameters ')'",
"Function_name : TK_AVG",
"Function_name : TK_MIN",
"Function_name : TK_MAX",
"Function_name : TK_SUM",
"Function_name : TK_COUNT",
"Function_parameters : Wildcard",
"Function_parameters : Distinct_literal Column_ref",
"Function_parameters : All_literal Function_Scalar_exp",
"Function_parameters : Function_Scalar_exp",
"Function_Scalar_exp : Function_Scalar_term",
"Function_Scalar_exp : Function_Scalar_term '+' Function_Scalar_exp",
"Function_Scalar_exp : Function_Scalar_term '-' Function_Scalar_exp",
"Function_Scalar_term : Function_concatenation_op",
"Function_Scalar_term : Function_concatenation_op '*' Function_Scalar_term",
"Function_Scalar_term : Function_concatenation_op '/' Function_Scalar_term",
"Function_concatenation_op : Function_Scalar_factor_unary_op",
"Function_concatenation_op : Function_Scalar_factor_unary_op TK_VERTBAR Function_concatenation_op",
"Function_Scalar_factor_unary_op : '+' Function_Scalar_factor",
"Function_Scalar_factor_unary_op : '-' Function_Scalar_factor",
"Function_Scalar_factor_unary_op : Function_Scalar_factor",
"Function_Scalar_factor : Column_ref",
"Function_Scalar_factor : '(' Function_Scalar_exp ')'",
"Function_Scalar_factor : Literal",
"Function_Scalar_factor : Case_expression",
"Function_Scalar_factor : Numeric_value_function",
"Function_Scalar_factor : String_value_function",
"Numeric_value_function : Extract_expression",
"Extract_expression : TK_EXTRACT '(' Extract_field TK_FROM Extract_source ')'",
"Extract_field : Name",
"Extract_source : Function_Scalar_exp",
"String_value_function : Character_substring_function",
"Character_substring_function : TK_SUBSTRING '(' Function_Scalar_exp TK_FROM TK_INTNUM ')'",
"Character_substring_function : TK_SUBSTRING '(' Function_Scalar_exp TK_FROM TK_INTNUM TK_FOR TK_INTNUM ')'",
"Distinct_literal : TK_DISTINCT",
"Column_ref : Name",
"Column_ref : Name '.' Wildcard",
"Column_ref : Name '.' Name",
"All_literal : TK_ALL",
"Into : TK_INTO Target_list",
"Any_all_some : TK_ANY",
"Any_all_some : TK_ALL",
"Any_all_some : TK_SOME",
"Target_list : Target",
"Target_list : Target ',' Target_list",
"Target : Parameter_ref",
"Case_expression : Case_abbreviation",
"Case_expression : Case_specification",
"Case_abbreviation : Nullif '(' Value_expression ',' Value_expression ')'",
"Case_abbreviation : Coalesce '(' Coalesce_value_expression_list ')'",
"Nullif : TK_NULLIF",
"Coalesce : TK_COALESCE",
"Case : TK_CASE",
"Coalesce_value_expression_list : Value_expression",
"Coalesce_value_expression_list : Value_expression ',' Coalesce_value_expression_list",
"Case_specification : Simple_case",
"Case_specification : Searched_case",
"Simple_case : Case Value_expression Simple_when_clause_list TK_END",
"Simple_case : Case Value_expression Simple_when_clause_list Else_clause TK_END",
"Simple_when_clause_list : Simple_when_clause",
"Simple_when_clause_list : Simple_when_clause Simple_when_clause_list",
"Simple_when_clause : TK_WHEN Value_expression TK_THEN Value_expression",
"Else_clause : TK_ELSE Value_expression",
"Searched_case : Case Searched_when_clause_list TK_END",
"Searched_case : Case Searched_when_clause_list Else_clause TK_END",
"Searched_when_clause_list : Searched_when_clause",
"Searched_when_clause_list : Searched_when_clause Searched_when_clause_list",
"Searched_when_clause : TK_WHEN Scalar_condition TK_THEN Value_expression",
"Value_expression : Scalar_condition",
"Table_exp : From_clause Opt_where_group_having_order",
"Table_exp : From_clause",
"Opt_where_group_having_order : Where_clause Opt_group_having_order",
"Opt_where_group_having_order : Where_clause",
"Opt_where_group_having_order : Opt_group_having_order",
"Opt_group_having_order : Group_by_clause Opt_having_order",
"Opt_group_having_order : Group_by_clause",
"Opt_group_having_order : Opt_having_order",
"Opt_having_order : Having_clause Order_by_clause_limit",
"Opt_having_order : Having_clause",
"Opt_having_order : Order_by_clause_limit",
"Order_by_clause_limit : Order_by_clause Limit_clause",
"Order_by_clause_limit : Order_by_clause",
"Order_by_clause_limit : Limit_clause",
"Limit_clause : TK_LIMIT Intnum",
"Group_by_clause : TK_GROUP TK_BY Group_by_ref_list_Ini",
"Group_by_ref_list_Ini : Column_ref_list",
"Column_ref_list : Column_ref_pre",
"Column_ref_list : Column_ref_pre ',' Column_ref_list",
"Column_ref_pre : Group_by_Scalar_exp",
"Group_by_Scalar_exp : Group_by_Scalar_term",
"Group_by_Scalar_exp : Group_by_Scalar_term '+' Group_by_Scalar_exp",
"Group_by_Scalar_exp : Group_by_Scalar_term '-' Group_by_Scalar_exp",
"Group_by_Scalar_term : Group_by_concatenation_op",
"Group_by_Scalar_term : Group_by_concatenation_op '*' Group_by_Scalar_term",
"Group_by_Scalar_term : Group_by_concatenation_op '/' Group_by_Scalar_term",
"Group_by_concatenation_op : Group_by_Scalar_factor_unary_op",
"Group_by_concatenation_op : Group_by_Scalar_factor_unary_op TK_VERTBAR Group_by_concatenation_op",
"Group_by_Scalar_factor_unary_op : '+' Group_by_Scalar_factor",
"Group_by_Scalar_factor_unary_op : '-' Group_by_Scalar_factor",
"Group_by_Scalar_factor_unary_op : Group_by_Scalar_factor",
"Group_by_Scalar_factor : Column_ref",
"Group_by_Scalar_factor : '(' Group_by_Scalar_exp ')'",
"Group_by_Scalar_factor : Literal",
"Order_by_clause : TK_ORDER TK_BY Ordering_spec_list",
"Ordering_spec_list : Ordering_spec",
"Ordering_spec_list : Ordering_spec ',' Ordering_spec_list",
"Ordering_spec : Intnum",
"Ordering_spec : Intnum Asc_desc",
"Ordering_spec : Column_ref",
"Ordering_spec : Column_ref Asc_desc",
"Asc_desc : TK_ASC",
"Asc_desc : TK_DESC",
"From_clause : TK_FROM Table_ref_list",
"Table_ref_list : Table_ref",
"Table_ref_list : Table_ref ',' Table_ref_list",
"Table_ref : Table",
"Table_ref : '(' From_subquery ')'",
"Table_ref : '(' From_subquery ')' Name",
"Table_ref : '(' From_subquery ')' TK_AS Name",
"Table_ref : '(' From_subquery ')' '(' Name_list ')'",
"Table_ref : '(' From_subquery ')' Name '(' Name_list ')'",
"Table_ref : '(' From_subquery ')' TK_AS Name '(' Name_list ')'",
"Table : Q_table",
"Table : Q_table Name",
"Table : Q_table TK_AS Name",
"Q_table : Name",
"Q_table : Name '.' Name",
"Q_table : Name '.' Name '.' Name",
"From_subquery : From_subquery_ini Selection Select_tail",
"From_subquery_ini : TK_SELECT",
"Name_list : Name_ini",
"Name_list : Name_ini ',' Name_list",
"Name_ini : Name",
"Where_clause : TK_WHERE Where_condition",
"Where_condition : Where_term",
"Where_condition : Where_term TK_OR Where_condition",
"Where_term : Where_Not_tag",
"Where_term : Where_Not_tag TK_AND Where_term",
"Where_Not_tag : Where_Predicate",
"Where_Not_tag : TK_NOT Where_Predicate",
"Where_Predicate : Test_for_null",
"Where_Predicate : Existence_test",
"Where_Predicate : Where_Relational_exp",
"Where_Relational_exp : Where_scalar_exp",
"Where_Relational_exp : Where_scalar_exp Comparison Where_Relational_rvalue",
"Where_Relational_exp : Where_Relational_predicate",
"Where_Relational_rvalue : Where_scalar_exp",
"Where_Relational_rvalue : Any_all_some '(' Subquery ')'",
"Where_Relational_rvalue : '(' Subquery ')'",
"Where_scalar_exp : Where_scalar_term",
"Where_scalar_exp : Where_scalar_term '+' Where_scalar_exp",
"Where_scalar_exp : Where_scalar_term '-' Where_scalar_exp",
"Where_scalar_term : Where_concatenation_op",
"Where_scalar_term : Where_concatenation_op '*' Where_scalar_term",
"Where_scalar_term : Where_concatenation_op '/' Where_scalar_term",
"Where_concatenation_op : Where_scalar_factor_unary_op",
"Where_concatenation_op : Where_scalar_factor_unary_op TK_VERTBAR Where_concatenation_op",
"Where_scalar_factor_unary_op : Where_scalar_factor",
"Where_scalar_factor_unary_op : '-' Where_scalar_factor",
"Where_scalar_factor_unary_op : '+' Where_scalar_factor",
"Where_scalar_factor : Column_ref",
"Where_scalar_factor : '(' Where_condition ')'",
"Where_scalar_factor : Literal",
"Where_scalar_factor : Numeric_value_function",
"Where_scalar_factor : String_value_function",
"Where_Relational_predicate : Where_Between_predicate",
"Where_Relational_predicate : Where_Like_predicate",
"Where_Relational_predicate : Where_in_predicate",
"Where_Between_predicate : Where_scalar_exp TK_BETWEEN Where_scalar_exp TK_AND Where_scalar_exp",
"Where_Between_predicate : Where_scalar_exp TK_NOT TK_BETWEEN Where_scalar_exp TK_AND Where_scalar_exp",
"Where_Like_predicate : Where_scalar_exp TK_LIKE Where_scalar_exp",
"Where_Like_predicate : Where_scalar_exp TK_LIKE Where_scalar_exp Where_escape",
"Where_Like_predicate : Where_scalar_exp TK_NOT TK_LIKE Where_scalar_exp",
"Where_Like_predicate : Where_scalar_exp TK_NOT TK_LIKE Where_scalar_exp Where_escape",
"Where_escape : TK_ESCAPE Column_ref",
"Where_escape : TK_ESCAPE Literal",
"Existence_test : TK_EXISTS '(' Subquery ')'",
"Where_in_predicate : Where_scalar_exp TK_IN '(' Subquery_ini Selection Select_tail ')'",
"Where_in_predicate : Where_scalar_exp TK_NOT TK_IN '(' Subquery_ini Selection Select_tail ')'",
"Where_in_predicate : Where_scalar_exp TK_IN '(' In_value_list ')'",
"Where_in_predicate : Where_scalar_exp TK_NOT TK_IN '(' In_value_list ')'",
"In_value_list : Where_scalar_exp",
"In_value_list : Where_scalar_exp ',' In_value_list",
"Having_clause : TK_HAVING Scalar_condition",
"Test_for_null : Column_ref TK_IS TK_NULL",
"Test_for_null : Column_ref TK_IS TK_NOT TK_NULL",
"Comparison : '='",
"Comparison : TK_DIFERENTE",
"Comparison : '<'",
"Comparison : '>'",
"Comparison : TK_MENOR_IG",
"Comparison : TK_MAIOR_IG",
"Search_escape : TK_ESCAPE Column_ref",
"Search_escape : TK_ESCAPE Literal",
"Subquery : Subquery_ini Selection Select_tail",
"Subquery_ini : TK_SELECT",
};

//#line 882 "parser_ini.y"
 

  private LexIni lexer;  
  private String error;
  private String errorIni;
  public int line;
  public int column;
  private boolean isFromClauseInnerSelect = false;
  private int subqueryLevel = 0;
  private int fromSubqueryLevel = 0;
  private int onlyText = 0;
  private ArrayList<String> fromSelectAliasTextList = new ArrayList<String>(0);
  private ArrayList <String> tableList = new ArrayList<String>(0); 
  private ArrayList <Boolean> existsAggregationSelect = new ArrayList<Boolean>(0);
  private ArrayList <ArrayList<Table>> fromTableAlias = new ArrayList<ArrayList<Table>>(0);
  private ArrayList <ArrayList<String>> groupByLevelList = new ArrayList<ArrayList<String>>(0);
  private ArrayList <ArrayList<String>> selectAliasLevelList = new ArrayList<ArrayList<String>>(0);
  private PargresDatabaseMetaData meta;
  private ParserIni fromParserIni;
  private String fromSubqueryAlias;
  private String fromSubqueryText;
  private String fromOuterQueryText;
  
  
  public void verifyDualReferencedTable(String tableOrAlias, int fromTableAliasLevel){
  	for(int j=0;j<fromTableAlias.get(fromTableAliasLevel).size(); j++){  				
		if(fromTableAlias.get(fromTableAliasLevel).get(j).alias.toLowerCase().equals(tableOrAlias.toLowerCase())){
		      	myYyerror("Table name " + new String(tableOrAlias) + " specified more than once" );
		      	break;
		}	      			
	}
  }
  
  
  private void verifyTableExistence(String table) {
    	try {
    		ResultSet columnList = meta.getColumns(null,null,table.toUpperCase(),null);
    		if(!columnList.next()) 
    			myYyerror("Relation " + new String(table) + " does not exists" );
    	} catch (Exception e) {
    		myYyerror(e.toString());    		
    	  }    		
  }
  
  
  public String getErrorIni(){  	
      	return errorIni;
    }
  
  public String getError(){  	
        return error;
  }
    
  public ArrayList<String> getTableList(){
      	return tableList;
  }
  
  public ArrayList <ArrayList<Table>> getFromTableAlias(){
  	return fromTableAlias;
  }
  
  public ArrayList <ArrayList<String>> getGroupByLevelList(){
  	return groupByLevelList;
  }
  
  public ArrayList <ArrayList<String>> getSelectAliasLevelList(){
  	return selectAliasLevelList;
  }
    
  public ArrayList <Boolean> getExistsAggregationSelect(){
  	return existsAggregationSelect;  
  }

  public boolean isFromClauseInnerSelect(){
  	return isFromClauseInnerSelect;  
  } 
  
  public ArrayList<String> getFromSelectAliasTextList(){
        return fromSelectAliasTextList;
  }
  
  public String getFromSubqueryAlias(){
  	return fromSubqueryAlias;
  }
  
  public String getFromSubqueryText(){
  	return fromSubqueryText;
  }

  public String getFromOuterQueryText(){
  	return fromOuterQueryText;
  }
  
  private int yylex () {
  
    int yyl_return = -1;
    try {
      yylval = new ParserIniVal("");
      yyl_return = lexer.yylex();
    }
    catch (IOException e) {
      yyerror("IO error :"+e);
    }
    return yyl_return;
    
  }
  public void yyerror (String error){
  
  	this.errorIni += "\nError: " + error + "\nLine: " + line + "\nColumn: " + column;
  
  } 

  public void myYyerror (String error) {
  
 	 this.error += "\nError: " + error + "\nLine: " + line + "\nColumn: " + column ;
 	 this.errorIni += "\nError: " + error + "\nLine: " + line + "\nColumn: " + column;
    
  }
  
  public ParserIni(String in, PargresDatabaseMetaData meta) throws ParserSilentException, ParserException{
  
      this.meta = meta;
      this.error="";      
      this.errorIni="";      
      existsAggregationSelect.add(false);
      fromTableAlias.add(new ArrayList<Table>(0));
      groupByLevelList.add(new ArrayList<String>(0));
      selectAliasLevelList.add(new ArrayList<String>(0));
      
      lexer = new LexIni(new StringReader(in), this); 
      this.yyparse(); 
      
  }
//#line 1384 "ParserIni.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
throws org.pargres.commons.util.ParserSilentException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    //if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      //if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        //if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        //if (yychar < 0)    //it it didn't work/error
        //  {
        //  yychar = 0;      //change it to default string (no -1!)
          //if (yydebug)
          //  yylexdebug(yystate,yychar);
        //  }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        //if (yydebug)
          //debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      //if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
		throw new ParserSilentException("Sintax not treated. Line : "+line +" Column : "+column);
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            //if (yydebug)
              //debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            //if (yydebug)
              //debug("error recovery discarding state "+state_peek(0)+" ");
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        //if (yydebug)
          //{
          //yys = null;
          //if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          //if (yys == null) yys = "illegal-symbol";
          //debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          //}
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    //if (yydebug)
      //debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 21 "parser_ini.y"
{
            yyval.sval = val_peek(3).sval +" "+ val_peek(2).sval + " "+ val_peek(1).sval +";";
            fromOuterQueryText = yyval.sval;
         }
break;
case 2:
//#line 27 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 3:
//#line 30 "parser_ini.y"
{yyval.sval = val_peek(1).sval+" "+ val_peek(0).sval;}
break;
case 4:
//#line 31 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 5:
//#line 34 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 6:
//#line 35 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 7:
//#line 38 "parser_ini.y"
{yyval.sval = val_peek(1).sval+" "+val_peek(0).sval;}
break;
case 8:
//#line 39 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 9:
//#line 42 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 10:
//#line 43 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 11:
//#line 46 "parser_ini.y"
{yyval.sval = "*";}
break;
case 12:
//#line 49 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 13:
//#line 52 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 14:
//#line 53 "parser_ini.y"
{yyval.sval = val_peek(2).sval+", "+val_peek(0).sval;}
break;
case 15:
//#line 56 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 16:
//#line 59 "parser_ini.y"
{
 		if(onlyText == 0) {
 		   selectAliasLevelList.get(subqueryLevel).add(new String(val_peek(0).sval));
 	        }
 		yyval.sval = val_peek(2).sval+" as "+val_peek(0).sval;
 	      }
break;
case 17:
//#line 65 "parser_ini.y"
{
 		if(onlyText == 0) {
 		   selectAliasLevelList.get(subqueryLevel).add("");
 	        }
                yyval.sval = val_peek(0).sval;
 	      }
break;
case 18:
//#line 73 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 19:
//#line 74 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" or "+ val_peek(0).sval;}
break;
case 20:
//#line 77 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 21:
//#line 78 "parser_ini.y"
{yyval.sval = val_peek(2).sval + " and " + val_peek(0).sval;}
break;
case 22:
//#line 82 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 23:
//#line 83 "parser_ini.y"
{yyval.sval = "not" + val_peek(0).sval;}
break;
case 24:
//#line 86 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 25:
//#line 99 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 26:
//#line 100 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 27:
//#line 103 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 28:
//#line 104 "parser_ini.y"
{yyval.sval = val_peek(2).sval+" "+ val_peek(1).sval+" "+val_peek(0).sval;}
break;
case 29:
//#line 105 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 30:
//#line 108 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 31:
//#line 109 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 32:
//#line 110 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 33:
//#line 114 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 34:
//#line 115 "parser_ini.y"
{yyval.sval = val_peek(3).sval+" ("+ val_peek(1).sval +")" ;}
break;
case 35:
//#line 116 "parser_ini.y"
{yyval.sval = "("+val_peek(1).sval+")";}
break;
case 36:
//#line 120 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 37:
//#line 121 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" + "+ val_peek(0).sval;}
break;
case 38:
//#line 122 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" - "+ val_peek(0).sval;}
break;
case 39:
//#line 125 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 40:
//#line 126 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" * "+ val_peek(0).sval;}
break;
case 41:
//#line 127 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" / "+ val_peek(0).sval;}
break;
case 42:
//#line 130 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 43:
//#line 131 "parser_ini.y"
{
			     yyval.sval = val_peek(2).sval +" "+val_peek(1).sval+" "+ val_peek(0).sval;
			  }
break;
case 44:
//#line 137 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 45:
//#line 138 "parser_ini.y"
{yyval.sval = "+"+val_peek(0).sval;}
break;
case 46:
//#line 139 "parser_ini.y"
{yyval.sval = "-"+val_peek(0).sval;}
break;
case 47:
//#line 142 "parser_ini.y"
{
                yyval.sval = val_peek(0).sval;
                if(onlyText == 0) {
                   existsAggregationSelect.set(subqueryLevel,true);
                }                
              }
break;
case 48:
//#line 148 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 49:
//#line 149 "parser_ini.y"
{yyval.sval = "("+val_peek(1).sval+")";}
break;
case 50:
//#line 150 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 51:
//#line 151 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 52:
//#line 152 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 53:
//#line 153 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 54:
//#line 156 "parser_ini.y"
{
 			      yyval.sval = val_peek(4).sval +" "+val_peek(3).sval+" "+ val_peek(2).sval+" "+ val_peek(1).sval+" "+ val_peek(0).sval;
 			   }
break;
case 55:
//#line 159 "parser_ini.y"
{
                              yyval.sval = val_peek(5).sval +" "+val_peek(4).sval+" "+ val_peek(3).sval+" "+ val_peek(2).sval+" "+ val_peek(1).sval+" "+ val_peek(0).sval;
                           }
break;
case 56:
//#line 164 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" "+val_peek(1).sval+" "+ val_peek(0).sval;}
break;
case 57:
//#line 165 "parser_ini.y"
{yyval.sval = val_peek(3).sval +" "+val_peek(2).sval+" "+ val_peek(1).sval+" "+ val_peek(0).sval;}
break;
case 58:
//#line 166 "parser_ini.y"
{yyval.sval = val_peek(3).sval +" "+val_peek(2).sval+" "+ val_peek(1).sval+" "+ val_peek(0).sval;}
break;
case 59:
//#line 167 "parser_ini.y"
{yyval.sval = val_peek(4).sval +" "+val_peek(3).sval+" "+ val_peek(2).sval+" "+ val_peek(1).sval+" "+ val_peek(0).sval;}
break;
case 60:
//#line 176 "parser_ini.y"
{
			yyval.sval = val_peek(6).sval +" in ("+val_peek(3).sval+" "+ val_peek(2).sval+" "+ val_peek(1).sval+")";
			subqueryLevel--;
		      }
break;
case 61:
//#line 180 "parser_ini.y"
{
		        yyval.sval = val_peek(7).sval +" not in ("+val_peek(3).sval+" "+ val_peek(2).sval+" "+ val_peek(1).sval+")";
		        subqueryLevel--;
		      }
break;
case 62:
//#line 184 "parser_ini.y"
{
		        yyval.sval = val_peek(4).sval +" in ("+val_peek(1).sval+")";
		      }
break;
case 63:
//#line 187 "parser_ini.y"
{
		        yyval.sval = val_peek(5).sval +" not in ("+val_peek(1).sval+")";
		      }
break;
case 64:
//#line 192 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 65:
//#line 193 "parser_ini.y"
{yyval.sval = val_peek(2).sval+", "+ val_peek(0).sval;}
break;
case 66:
//#line 200 "parser_ini.y"
{yyval.sval = val_peek(1).sval+" "+val_peek(0).sval;}
break;
case 67:
//#line 201 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 68:
//#line 204 "parser_ini.y"
{yyval.sval = val_peek(1).sval+" "+val_peek(0).sval;}
break;
case 69:
//#line 205 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 70:
//#line 208 "parser_ini.y"
{yyval.sval = ":"+val_peek(0).sval;}
break;
case 71:
//#line 211 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 72:
//#line 214 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 73:
//#line 215 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 74:
//#line 216 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 75:
//#line 217 "parser_ini.y"
{yyval.sval = val_peek(1).sval+" "+ val_peek(0).sval;}
break;
case 76:
//#line 218 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 77:
//#line 219 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 78:
//#line 220 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 79:
//#line 223 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 80:
//#line 224 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 81:
//#line 225 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 82:
//#line 226 "parser_ini.y"
{yyval.sval = val_peek(1).sval + " " + val_peek(0).sval;}
break;
case 83:
//#line 227 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 84:
//#line 228 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 85:
//#line 229 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 86:
//#line 233 "parser_ini.y"
{yyval.sval = val_peek(0).sval ;}
break;
case 87:
//#line 236 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 88:
//#line 239 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 89:
//#line 242 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 90:
//#line 243 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 91:
//#line 246 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 92:
//#line 250 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 93:
//#line 251 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 94:
//#line 258 "parser_ini.y"
{yyval.sval = val_peek(3).sval+"("+val_peek(1).sval+")";}
break;
case 95:
//#line 261 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 96:
//#line 262 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 97:
//#line 263 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 98:
//#line 264 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 99:
//#line 265 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 100:
//#line 268 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 101:
//#line 269 "parser_ini.y"
{yyval.sval = val_peek(1).sval+" "+ val_peek(0).sval;}
break;
case 102:
//#line 270 "parser_ini.y"
{yyval.sval = val_peek(1).sval+" "+ val_peek(0).sval;}
break;
case 103:
//#line 271 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 104:
//#line 274 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 105:
//#line 275 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" + "+ val_peek(0).sval;}
break;
case 106:
//#line 276 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" - "+ val_peek(0).sval;}
break;
case 107:
//#line 279 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 108:
//#line 280 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" * "+ val_peek(0).sval;}
break;
case 109:
//#line 281 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" / "+ val_peek(0).sval;}
break;
case 110:
//#line 284 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 111:
//#line 285 "parser_ini.y"
{
			       yyval.sval = val_peek(2).sval + " " +val_peek(1).sval + " " + val_peek(0).sval;
			    }
break;
case 112:
//#line 290 "parser_ini.y"
{yyval.sval = "+" + val_peek(0).sval;}
break;
case 113:
//#line 291 "parser_ini.y"
{yyval.sval = "-" + val_peek(0).sval;}
break;
case 114:
//#line 292 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 115:
//#line 295 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 116:
//#line 296 "parser_ini.y"
{yyval.sval = "("+val_peek(1).sval+")";}
break;
case 117:
//#line 297 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 118:
//#line 298 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 119:
//#line 299 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 120:
//#line 300 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 121:
//#line 307 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 122:
//#line 317 "parser_ini.y"
{ 
		        yyval.sval = val_peek(5).sval + "( " + val_peek(3).sval + " " + val_peek(2).sval + " " + val_peek(1).sval + " )";	        	 
		   }
break;
case 123:
//#line 322 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 124:
//#line 325 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 125:
//#line 332 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 126:
//#line 344 "parser_ini.y"
{
			 	yyval.sval = val_peek(5).sval + "( " + val_peek(3).sval + " " + val_peek(2).sval + " "  + val_peek(1).sval + " )";	        	 
			      }
break;
case 127:
//#line 347 "parser_ini.y"
{
			 	yyval.sval = val_peek(7).sval + "( " + val_peek(5).sval + " " + val_peek(4).sval + " "  + val_peek(3).sval + " " +
			    		  val_peek(2).sval + " "  + val_peek(1).sval +" )";	        	 
			      }
break;
case 128:
//#line 357 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 129:
//#line 360 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 130:
//#line 361 "parser_ini.y"
{yyval.sval = val_peek(2).sval + ".*";}
break;
case 131:
//#line 362 "parser_ini.y"
{yyval.sval = val_peek(2).sval + "." + val_peek(0).sval;}
break;
case 132:
//#line 365 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 133:
//#line 368 "parser_ini.y"
{yyval.sval = val_peek(1).sval+" "+ val_peek(0).sval;}
break;
case 134:
//#line 371 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 135:
//#line 372 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 136:
//#line 373 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 137:
//#line 376 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 138:
//#line 377 "parser_ini.y"
{yyval.sval = val_peek(2).sval +", "+ val_peek(0).sval;}
break;
case 139:
//#line 380 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 140:
//#line 387 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 141:
//#line 388 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 142:
//#line 391 "parser_ini.y"
{
 		       yyval.sval = val_peek(5).sval +"("+ val_peek(3).sval +", "+ val_peek(1).sval +")";
 		    }
break;
case 143:
//#line 394 "parser_ini.y"
{
                        yyval.sval = val_peek(3).sval +"("+ val_peek(1).sval+")";
                    }
break;
case 144:
//#line 399 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 145:
//#line 402 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 146:
//#line 405 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 147:
//#line 408 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 148:
//#line 409 "parser_ini.y"
{
	                    yyval.sval = val_peek(2).sval +", "+ val_peek(0).sval;
	                }
break;
case 149:
//#line 414 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 150:
//#line 415 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 151:
//#line 418 "parser_ini.y"
{
 	          yyval.sval = val_peek(3).sval +" "+ val_peek(2).sval +" "+ val_peek(1).sval +" "+ val_peek(0).sval;
 	      }
break;
case 152:
//#line 421 "parser_ini.y"
{
 	         yyval.sval = val_peek(4).sval +" "+ val_peek(3).sval +" "+ val_peek(2).sval +" "+ val_peek(1).sval + " "+ val_peek(0).sval;
 	      }
break;
case 153:
//#line 426 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 154:
//#line 427 "parser_ini.y"
{yyval.sval = val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 155:
//#line 430 "parser_ini.y"
{
		        yyval.sval = val_peek(3).sval +" "+ val_peek(2).sval +" "+ val_peek(1).sval +" "+ val_peek(0).sval;
		     }
break;
case 156:
//#line 435 "parser_ini.y"
{yyval.sval = val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 157:
//#line 438 "parser_ini.y"
{
		   yyval.sval = val_peek(2).sval +" "+ val_peek(1).sval +" "+ val_peek(0).sval;
		}
break;
case 158:
//#line 441 "parser_ini.y"
{
	           yyval.sval = val_peek(3).sval +" "+ val_peek(2).sval +" "+ val_peek(1).sval +" "+ val_peek(0).sval;
	        }
break;
case 159:
//#line 446 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 160:
//#line 447 "parser_ini.y"
{
			       yyval.sval = val_peek(1).sval +" "+ val_peek(0).sval;
			    }
break;
case 161:
//#line 451 "parser_ini.y"
{
 		          yyval.sval = val_peek(3).sval +" "+ val_peek(2).sval +" "+ val_peek(1).sval +" "+ val_peek(0).sval;
 		       }
break;
case 162:
//#line 469 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 163:
//#line 477 "parser_ini.y"
{yyval.sval = val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 164:
//#line 478 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 165:
//#line 481 "parser_ini.y"
{yyval.sval = val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 166:
//#line 482 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 167:
//#line 483 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 168:
//#line 486 "parser_ini.y"
{yyval.sval = val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 169:
//#line 487 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 170:
//#line 488 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 171:
//#line 491 "parser_ini.y"
{yyval.sval = val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 172:
//#line 492 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 173:
//#line 493 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 174:
//#line 496 "parser_ini.y"
{yyval.sval = val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 175:
//#line 497 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 176:
//#line 498 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 177:
//#line 501 "parser_ini.y"
{yyval.sval = "\n" + val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 178:
//#line 510 "parser_ini.y"
{yyval.sval = "\n"+val_peek(2).sval +" "+ val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 179:
//#line 513 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 180:
//#line 516 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 181:
//#line 517 "parser_ini.y"
{yyval.sval = val_peek(2).sval + ", " + val_peek(0).sval; }
break;
case 182:
//#line 520 "parser_ini.y"
{
                 if(onlyText == 0) {
		    groupByLevelList.get(subqueryLevel).add(new String(val_peek(0).sval));
		 }
                 yyval.sval = val_peek(0).sval;
	       }
break;
case 183:
//#line 528 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 184:
//#line 529 "parser_ini.y"
{ yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;}
break;
case 185:
//#line 530 "parser_ini.y"
{ yyval.sval = val_peek(2).sval + " - " + val_peek(0).sval;}
break;
case 186:
//#line 533 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 187:
//#line 534 "parser_ini.y"
{yyval.sval = val_peek(2).sval + " * " + val_peek(0).sval;}
break;
case 188:
//#line 535 "parser_ini.y"
{yyval.sval = val_peek(2).sval + " / " + val_peek(0).sval;}
break;
case 189:
//#line 538 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 190:
//#line 539 "parser_ini.y"
{
			       yyval.sval = val_peek(2).sval + " || " + val_peek(0).sval;
			    }
break;
case 191:
//#line 544 "parser_ini.y"
{yyval.sval = "+" + val_peek(0).sval;}
break;
case 192:
//#line 545 "parser_ini.y"
{yyval.sval = "-" + val_peek(0).sval;}
break;
case 193:
//#line 546 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 194:
//#line 549 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 195:
//#line 550 "parser_ini.y"
{yyval.sval = "(" + val_peek(1).sval + ")";}
break;
case 196:
//#line 551 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 197:
//#line 559 "parser_ini.y"
{yyval.sval = "\n" + val_peek(2).sval +" "+ val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 198:
//#line 562 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 199:
//#line 563 "parser_ini.y"
{yyval.sval = val_peek(2).sval +", "+ val_peek(0).sval;}
break;
case 200:
//#line 566 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 201:
//#line 567 "parser_ini.y"
{yyval.sval = val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 202:
//#line 568 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 203:
//#line 569 "parser_ini.y"
{yyval.sval = val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 204:
//#line 572 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 205:
//#line 573 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 206:
//#line 583 "parser_ini.y"
{yyval.sval = "\n" + val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 207:
//#line 586 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 208:
//#line 587 "parser_ini.y"
{
               	    if(isFromClauseInnerSelect && (subqueryLevel == 0) && (fromSubqueryLevel == 0))
               	    	throw(new ParserSilentException("InterQuery : From subquery must be unique in the FROM clause. Line : "+line+" Column : "+column));                    
                    yyval.sval = val_peek(2).sval +", "+ val_peek(0).sval;
                 }
break;
case 209:
//#line 594 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 210:
//#line 595 "parser_ini.y"
{
            myYyerror("Subquery in From must have an alias");
            yyval.sval ="("+ val_peek(1).sval+")";            
             }
break;
case 211:
//#line 599 "parser_ini.y"
{
            /*$$.sval ="("+ $2.sval+") " + $4.sval;*/
            fromSubqueryAlias = val_peek(0).sval;
            yyval.sval = val_peek(0).sval;
            }
break;
case 212:
//#line 604 "parser_ini.y"
{
            fromSubqueryAlias = val_peek(0).sval;
            yyval.sval = val_peek(0).sval;
            }
break;
case 213:
//#line 608 "parser_ini.y"
{
                myYyerror("Subquery in From must have an alias");
                yyval.sval ="("+ val_peek(4).sval+") (" + val_peek(1).sval +")";	
            }
break;
case 214:
//#line 612 "parser_ini.y"
{
                fromSubqueryAlias = val_peek(3).sval;
                yyval.sval = val_peek(3).sval;
            }
break;
case 215:
//#line 616 "parser_ini.y"
{
                fromSubqueryAlias = val_peek(3).sval;
                yyval.sval = val_peek(3).sval;
            }
break;
case 216:
//#line 623 "parser_ini.y"
{
        if(onlyText == 0) {
           if(subqueryLevel==0){
	   	tableList.add(new String(val_peek(0).sval));
	        tableList.trimToSize();
           }
	   verifyTableExistence(val_peek(0).sval);
           verifyDualReferencedTable(val_peek(0).sval,subqueryLevel);          
           fromTableAlias.get(subqueryLevel).add( new Table(val_peek(0).sval , val_peek(0).sval) );
           fromTableAlias.get(subqueryLevel).trimToSize();           
        }
	yyval.sval = val_peek(0).sval;
      }
break;
case 217:
//#line 636 "parser_ini.y"
{
        if(onlyText == 0) {
           if(subqueryLevel==0){
	   	tableList.add(new String(val_peek(1).sval));
	        tableList.trimToSize();
           }
      	   verifyTableExistence(val_peek(1).sval);
      	   verifyDualReferencedTable(val_peek(0).sval,subqueryLevel);           
           fromTableAlias.get(subqueryLevel).add( new Table(val_peek(1).sval , val_peek(0).sval) );
           fromTableAlias.get(subqueryLevel).trimToSize();          
        }
        yyval.sval = val_peek(1).sval+" "+ val_peek(0).sval;
      }
break;
case 218:
//#line 649 "parser_ini.y"
{
        if(onlyText == 0) {
           if(subqueryLevel==0){
	   	tableList.add(new String(val_peek(2).sval));
	        tableList.trimToSize();
           }
      	   verifyTableExistence(val_peek(2).sval);
      	   verifyDualReferencedTable(val_peek(0).sval,subqueryLevel);
      	   fromTableAlias.get(subqueryLevel).add( new Table(val_peek(2).sval , val_peek(0).sval) );
           fromTableAlias.get(subqueryLevel).trimToSize();
        }
        yyval.sval = val_peek(2).sval+" as "+ val_peek(0).sval;
        
      }
break;
case 219:
//#line 665 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 220:
//#line 666 "parser_ini.y"
{
             yyval.sval = val_peek(2).sval +"."+ val_peek(0).sval;
          }
break;
case 221:
//#line 669 "parser_ini.y"
{
             yyval.sval = val_peek(4).sval + "." + val_peek(2).sval + "." + val_peek(0).sval;
          }
break;
case 222:
//#line 675 "parser_ini.y"
{
		   onlyText--;
		   fromSubqueryLevel--;
		   yyval.sval = val_peek(2).sval +" "+ val_peek(1).sval + " " + val_peek(0).sval;
		   fromSubqueryText = yyval.sval +";";
	 	}
break;
case 223:
//#line 683 "parser_ini.y"
{
		    if(fromSubqueryLevel>0)
		    	throw(new ParserSilentException("InterQuery : So far, only one FROM subquery level is treated. Line : "+line+" Column :"+column));
               	    if(subqueryLevel>0)
               	    	throw(new ParserSilentException("InterQuery : So far, only outerquery FROM subquery is treated. Line : "+line+" Column :"+column));
 		    yyval.sval = val_peek(0).sval;
 		    fromSubqueryLevel++;
		    onlyText++;
		    isFromClauseInnerSelect=true;
		  }
break;
case 224:
//#line 695 "parser_ini.y"
{
 	       yyval.sval = val_peek(0).sval;
 	    }
break;
case 225:
//#line 698 "parser_ini.y"
{
	       yyval.sval = val_peek(2).sval + ", " + val_peek(0).sval;
	    }
break;
case 226:
//#line 703 "parser_ini.y"
{
	      fromSelectAliasTextList.add(val_peek(0).sval);
	      fromSelectAliasTextList.trimToSize();
 	      yyval.sval = val_peek(0).sval;
	   }
break;
case 227:
//#line 715 "parser_ini.y"
{yyval.sval = "\n" + val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 228:
//#line 718 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 229:
//#line 719 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" or "+ val_peek(0).sval;}
break;
case 230:
//#line 722 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 231:
//#line 723 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" and "+ val_peek(0).sval;}
break;
case 232:
//#line 727 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 233:
//#line 728 "parser_ini.y"
{yyval.sval = val_peek(1).sval +" "+ val_peek(0).sval;}
break;
case 234:
//#line 731 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 235:
//#line 732 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 236:
//#line 733 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 237:
//#line 736 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 238:
//#line 737 "parser_ini.y"
{
                          yyval.sval = val_peek(2).sval + " " + val_peek(1).sval + " " + val_peek(0).sval;
                       }
break;
case 239:
//#line 740 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 240:
//#line 743 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 241:
//#line 744 "parser_ini.y"
{yyval.sval = val_peek(3).sval +" ("+ val_peek(1).sval + ")";}
break;
case 242:
//#line 745 "parser_ini.y"
{yyval.sval = "("+val_peek(1).sval +")" ;}
break;
case 243:
//#line 748 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 244:
//#line 749 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" + "+ val_peek(0).sval;}
break;
case 245:
//#line 750 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" - "+ val_peek(0).sval;}
break;
case 246:
//#line 753 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 247:
//#line 754 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" * "+ val_peek(0).sval;}
break;
case 248:
//#line 755 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" / "+ val_peek(0).sval;}
break;
case 249:
//#line 758 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 250:
//#line 759 "parser_ini.y"
{
		            yyval.sval = val_peek(2).sval +" "+val_peek(1).sval+" "+ val_peek(0).sval;
		         }
break;
case 251:
//#line 764 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 252:
//#line 765 "parser_ini.y"
{yyval.sval = "-"+ val_peek(0).sval;}
break;
case 253:
//#line 766 "parser_ini.y"
{yyval.sval = "+"+ val_peek(0).sval;}
break;
case 254:
//#line 769 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 255:
//#line 770 "parser_ini.y"
{yyval.sval = "("+ val_peek(1).sval +")";}
break;
case 256:
//#line 771 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 257:
//#line 772 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 258:
//#line 773 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 259:
//#line 776 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 260:
//#line 777 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 261:
//#line 778 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 262:
//#line 781 "parser_ini.y"
{
			     yyval.sval = val_peek(4).sval +" "+val_peek(3).sval+" "+ val_peek(2).sval+" "+ val_peek(1).sval+" "+ val_peek(0).sval;
			  }
break;
case 263:
//#line 784 "parser_ini.y"
{
                       yyval.sval = val_peek(5).sval +" "+val_peek(4).sval+" "+ val_peek(3).sval+" "+ val_peek(2).sval+" "+ val_peek(1).sval+" "+ val_peek(0).sval;
                    }
break;
case 264:
//#line 789 "parser_ini.y"
{yyval.sval = val_peek(2).sval +" "+val_peek(1).sval+" "+ val_peek(0).sval;}
break;
case 265:
//#line 790 "parser_ini.y"
{
                          yyval.sval = val_peek(3).sval +" "+val_peek(2).sval+" "+ val_peek(1).sval+" "+ val_peek(0).sval;
                       }
break;
case 266:
//#line 793 "parser_ini.y"
{
                          yyval.sval = val_peek(3).sval +" "+val_peek(2).sval+" "+ val_peek(1).sval+" "+ val_peek(0).sval;
                       }
break;
case 267:
//#line 796 "parser_ini.y"
{
                          yyval.sval = val_peek(4).sval +" "+val_peek(3).sval+" "+ val_peek(2).sval+" "+ val_peek(1).sval+" "+ val_peek(0).sval;
                       }
break;
case 268:
//#line 801 "parser_ini.y"
{yyval.sval = val_peek(1).sval +" "+val_peek(0).sval;}
break;
case 269:
//#line 802 "parser_ini.y"
{yyval.sval = val_peek(1).sval +" "+val_peek(0).sval;}
break;
case 270:
//#line 809 "parser_ini.y"
{yyval.sval = val_peek(3).sval +" ("+val_peek(1).sval+")";}
break;
case 271:
//#line 817 "parser_ini.y"
{
		        yyval.sval = val_peek(6).sval + " in (" + val_peek(3).sval + " " + val_peek(2).sval + " " + val_peek(1).sval +")";
		        subqueryLevel--;
		     }
break;
case 272:
//#line 821 "parser_ini.y"
{
		        yyval.sval = val_peek(7).sval + " not in (" + val_peek(3).sval + " " + val_peek(2).sval + " " + val_peek(1).sval + ")";
		        subqueryLevel--;
		     }
break;
case 273:
//#line 825 "parser_ini.y"
{
		        yyval.sval = val_peek(4).sval + " in (" + val_peek(1).sval + ")";
		     }
break;
case 274:
//#line 828 "parser_ini.y"
{
		        yyval.sval = val_peek(5).sval + " not in (" + val_peek(1).sval + ")";
		     }
break;
case 275:
//#line 833 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 276:
//#line 834 "parser_ini.y"
{yyval.sval = val_peek(2).sval +", "+val_peek(0).sval;}
break;
case 277:
//#line 843 "parser_ini.y"
{yyval.sval = "\n"+ val_peek(1).sval +" "+val_peek(0).sval;}
break;
case 278:
//#line 846 "parser_ini.y"
{yyval.sval = val_peek(2).sval + " " + val_peek(1).sval + " " + val_peek(0).sval;}
break;
case 279:
//#line 847 "parser_ini.y"
{yyval.sval = val_peek(3).sval + " " + val_peek(2).sval+ " " + val_peek(1).sval + " " + val_peek(0).sval;}
break;
case 280:
//#line 850 "parser_ini.y"
{yyval.sval = "=";}
break;
case 281:
//#line 851 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 282:
//#line 852 "parser_ini.y"
{yyval.sval = "<";}
break;
case 283:
//#line 853 "parser_ini.y"
{yyval.sval = ">";}
break;
case 284:
//#line 854 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 285:
//#line 855 "parser_ini.y"
{yyval.sval = val_peek(0).sval;}
break;
case 286:
//#line 858 "parser_ini.y"
{yyval.sval = val_peek(1).sval + " " + val_peek(0).sval;}
break;
case 287:
//#line 859 "parser_ini.y"
{yyval.sval = val_peek(1).sval + " " + val_peek(0).sval;}
break;
case 288:
//#line 866 "parser_ini.y"
{
	      yyval.sval = val_peek(2).sval +" "+val_peek(1).sval+ " " +val_peek(0).sval;
	      subqueryLevel--;
	   }
break;
case 289:
//#line 872 "parser_ini.y"
{
                  yyval.sval = val_peek(0).sval;
                  subqueryLevel++;
                  existsAggregationSelect.add(false);
                  fromTableAlias.add(new ArrayList<Table>(0));
                  groupByLevelList.add(new ArrayList<String>(0));
                  selectAliasLevelList.add(new ArrayList<String>(0));
               }
break;
//#line 2867 "ParserIni.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    //if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      //if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        //if (yychar<0) yychar=0;  //clean, if necessary
        //if (yydebug)
          //yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      //if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
//## The -Jnorun option was used ##
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public ParserIni()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public ParserIni(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
