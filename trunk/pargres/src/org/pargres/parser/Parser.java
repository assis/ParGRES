//### This file created by BYACC 1.8(/Java extension  1.11)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package org.pargres.parser;



//#line 2 "sql.y"
  import java.io.*;
  import java.util.ArrayList;
  import java.util.Date;
  import java.text.ParseException;
  import java.text.SimpleDateFormat;
  import java.lang.Double;
  import java.sql.ResultSet;
  import org.pargres.jdbc.PargresDatabaseMetaData;
  import org.pargres.commons.Range;
  import java.sql.Types;
  import org.pargres.commons.logger.Logger;
  import org.pargres.commons.util.ParserSilentException;
import org.pargres.commons.translation.Messages;

//#line 32 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
//#### end semantic value section ####
public final static short TK_SELECT=257;
public final static short TK_ALL=258;
public final static short TK_DISTINCT=259;
public final static short TK_USER=260;
public final static short TK_INDICATOR=261;
public final static short TK_NAME=262;
public final static short TK_APPROXNUM=263;
public final static short TK_INTNUM=264;
public final static short TK_DATE=265;
public final static short TK_INTERVAL1=266;
public final static short TK_INTERVAL2=267;
public final static short TK_COMENTARIO=268;
public final static short TK_EXISTS=269;
public final static short TK_PLIC=270;
public final static short TK_STRING=271;
public final static short TK_CONCATENATION=272;
public final static short TK_AVG=273;
public final static short TK_MIN=274;
public final static short TK_MAX=275;
public final static short TK_SUM=276;
public final static short TK_COUNT=277;
public final static short TK_INTO=278;
public final static short TK_FROM=279;
public final static short TK_WHERE=280;
public final static short TK_OR=281;
public final static short TK_AND=282;
public final static short TK_NOT=283;
public final static short TK_NULL=284;
public final static short TK_IS=285;
public final static short TK_BETWEEN=286;
public final static short TK_LIKE=287;
public final static short TK_ESCAPE=288;
public final static short TK_DIFERENTE=289;
public final static short TK_MENOR_IG=290;
public final static short TK_VERTBAR=291;
public final static short TK_MAIOR_IG=292;
public final static short TK_GROUP=293;
public final static short TK_BY=294;
public final static short TK_HAVING=295;
public final static short TK_ORDER=296;
public final static short TK_ASC=297;
public final static short TK_DESC=298;
public final static short TK_AS=299;
public final static short TK_IN=300;
public final static short TK_LIMIT=301;
public final static short TK_NULLIF=302;
public final static short TK_COALESCE=303;
public final static short TK_CASE=304;
public final static short TK_END=305;
public final static short TK_WHEN=306;
public final static short TK_THEN=307;
public final static short TK_ELSE=308;
public final static short TK_TRUE=309;
public final static short TK_FALSE=310;
public final static short TK_ANY=311;
public final static short TK_SOME=312;
public final static short TK_EXTRACT=313;
public final static short TK_SUBSTRING=314;
public final static short TK_FOR=315;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    2,    2,    5,    5,    1,    1,    6,    6,    7,
    8,    9,    9,   10,   11,   11,   12,   12,   14,   14,
   15,   15,   17,   16,   16,   16,   20,   20,   20,   24,
   24,   24,   23,   23,   23,   21,   21,   21,   30,   30,
   30,   31,   31,   32,   32,   32,   33,   33,   33,   33,
   33,   33,   33,   25,   25,   26,   26,   26,   26,   27,
   27,   27,   27,   42,   42,   43,   43,   45,   45,   44,
   13,   36,   36,   36,   36,   36,   36,   36,   52,   52,
   52,   52,   52,   52,   52,   46,   47,   48,   50,   50,
   51,   49,   49,   34,   53,   55,   55,   55,   55,   55,
   54,   54,   54,   54,   58,   58,   58,   59,   59,   59,
   60,   60,   61,   61,   61,   62,   62,   62,   62,   62,
   62,   38,   63,   64,   65,   39,   66,   66,   56,   35,
   35,   35,   57,    3,   28,   28,   28,   67,   67,   68,
   37,   37,   69,   69,   71,   73,   75,   74,   74,   70,
   70,   76,   76,   78,   78,   80,   79,   77,   77,   81,
   81,   82,   72,    4,    4,   84,   84,   84,   86,   86,
   86,   88,   88,   88,   90,   90,   90,   92,   87,   93,
   94,   94,   95,   96,   96,   96,   97,   97,   97,   98,
   98,   99,   99,   99,  100,  100,  100,   91,  101,  101,
  102,  103,  103,  103,  103,  104,  104,  105,  105,  105,
   83,  106,  106,  107,  107,  107,  107,  107,  107,  107,
  108,  108,  108,  111,  111,  111,  109,  112,  110,  110,
   85,  113,  113,  114,  114,  115,  115,  116,  116,  116,
  117,  117,  117,  119,  119,  119,  118,  118,  118,  121,
  121,  121,  122,  122,  123,  123,  123,  124,  124,  124,
  124,  124,  120,  120,  120,  125,  125,  126,  126,  126,
  126,  128,  128,   19,  127,  127,  127,  127,  129,  129,
   89,  130,   18,   18,   22,   22,   22,   22,   22,   22,
   40,   40,   29,   41,
};
final static short yylen[] = {                            2,
    4,    2,    1,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    3,    1,    3,    1,    1,    3,    1,    3,
    1,    2,    1,    1,    1,    1,    1,    3,    1,    1,
    1,    1,    1,    4,    3,    1,    3,    3,    1,    3,
    3,    1,    3,    1,    2,    2,    1,    1,    3,    1,
    1,    1,    1,    5,    6,    3,    4,    4,    5,    7,
    8,    5,    6,    1,    3,    2,    1,    2,    1,    2,
    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    4,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    1,    1,    3,    3,    1,    3,    3,
    1,    3,    2,    2,    1,    1,    3,    1,    1,    1,
    1,    1,    6,    1,    1,    1,    6,    8,    1,    1,
    3,    3,    1,    2,    1,    1,    1,    1,    3,    1,
    1,    1,    6,    4,    1,    1,    1,    1,    3,    1,
    1,    4,    5,    1,    2,    4,    2,    3,    4,    1,
    2,    4,    1,    2,    1,    2,    1,    1,    2,    1,
    1,    2,    1,    1,    2,    1,    1,    2,    3,    1,
    1,    3,    1,    1,    3,    3,    1,    3,    3,    1,
    3,    2,    2,    1,    1,    3,    1,    3,    1,    3,
    1,    1,    2,    1,    2,    1,    1,    1,    3,    3,
    2,    1,    3,    1,    3,    4,    5,    6,    7,    8,
    1,    2,    3,    1,    3,    5,    3,    1,    1,    3,
    2,    1,    3,    1,    3,    1,    2,    1,    1,    1,
    1,    3,    1,    1,    4,    3,    1,    3,    3,    1,
    3,    3,    1,    3,    1,    2,    2,    1,    3,    1,
    1,    1,    1,    1,    1,    5,    6,    3,    4,    4,
    5,    2,    2,    4,    7,    8,    5,    6,    1,    3,
    2,    1,    3,    4,    1,    1,    1,    1,    1,    1,
    2,    2,    3,    1,
};
final static short yydefred[] = {                         0,
    0,    0,    4,    5,   71,   87,   88,    0,   92,   93,
    0,   86,   96,   97,   98,   99,  100,   23,   91,  145,
  146,  147,   89,   90,    0,    0,   10,    0,    0,    0,
    0,    0,    7,    8,    9,   11,    0,   14,    0,    0,
    0,    0,   21,    0,   24,   25,   26,    0,   29,   30,
   31,   32,    0,    0,    0,   44,   47,    0,   50,   51,
   52,   53,   72,   73,   74,   76,   77,   78,    0,   95,
  122,  126,  141,  142,    0,    0,    0,  150,  151,   75,
    0,    0,    0,    0,   45,   48,   46,    0,    0,    0,
    0,    3,    0,    6,    0,    0,    0,    0,    0,   22,
    0,    0,    0,  286,  289,  290,    0,  285,  287,  288,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  163,    0,    0,    0,  294,    0,    0,  124,    0,
    0,    0,    0,    0,  116,  119,  120,  121,   79,   80,
   81,   83,   84,   85,  118,    0,    0,    0,    0,  115,
   49,    0,  140,    0,  134,    0,    0,    0,  211,    0,
  214,    0,    1,    2,    0,    0,  282,    0,    0,  164,
    0,  168,    0,  171,    0,  174,    0,  177,    0,   13,
   15,  131,  132,   18,   20,    0,    0,    0,    0,    0,
    0,  136,  135,  137,    0,   33,   28,    0,   37,   38,
   40,   41,   43,    0,  283,  133,  129,  101,    0,    0,
    0,  104,    0,    0,    0,    0,    0,    0,    0,  158,
    0,    0,  161,  274,    0,    0,   82,    0,  113,  114,
    0,    0,    0,    0,    0,    0,   70,    0,   69,   66,
    0,  228,    0,    0,    0,    0,    0,  222,    0,    0,
    0,    0,  238,  239,    0,  261,  262,  260,  231,    0,
    0,  236,  240,    0,  243,    0,    0,    0,  255,  263,
  264,  265,    0,    0,  178,  166,  169,  172,  175,  281,
    0,    0,    0,    0,    0,   57,    0,    0,    0,    0,
    0,  284,   94,  102,  103,    0,    0,  144,    0,    0,
  152,    0,  155,  157,  159,  293,  125,    0,  117,    0,
  106,  107,  109,  110,  112,   68,  139,    0,    0,    0,
  213,  223,    0,  258,  257,  256,  237,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  195,  197,  179,  180,    0,  183,    0,    0,
    0,  194,    0,    0,  198,    0,  201,    0,    0,   59,
    0,    0,   54,  291,  292,    0,    0,   62,   35,    0,
    0,  149,  162,    0,  153,  123,    0,  127,    0,    0,
    0,  227,    0,  259,  233,  235,    0,    0,    0,    0,
    0,    0,    0,    0,  244,  242,  248,  249,  251,  252,
  254,    0,  192,  193,    0,    0,    0,    0,    0,    0,
    0,  206,  207,  203,    0,  205,   55,    0,   63,   65,
    0,   34,  143,  156,    0,    0,    0,    0,    0,  226,
    0,    0,    0,    0,    0,  269,    0,    0,    0,    0,
    0,  196,  182,  185,  186,  188,  189,  191,  209,  210,
  200,    0,   60,  128,    0,    0,  218,    0,    0,  271,
    0,    0,  266,  272,  273,    0,    0,  277,  246,    0,
   61,    0,  230,  219,  267,    0,  278,    0,  280,  245,
  220,    0,  275,  276,
};
final static short yydgoto[] = {                          2,
   31,   90,   91,   92,   32,   33,   34,   35,   36,   37,
   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
   48,  111,  197,   49,   50,   51,   52,  198,  127,   53,
   54,   55,   56,   57,   58,   59,   60,   61,   62,  286,
  128,  289,  153,  154,  240,  139,  140,  141,  142,  143,
  144,  258,   69,  209,   70,  210,  211,  146,  147,  148,
  149,  150,   71,  130,  308,   72,  155,  156,   73,   74,
   75,  214,   76,  215,   77,   78,   79,  218,  222,  219,
  124,  125,   93,  170,  171,  172,  173,  174,  175,  176,
  177,  178,  345,  346,  347,  348,  349,  350,  351,  352,
  355,  356,  357,  414,  358,  159,  160,  161,  243,  428,
  162,  244,  323,  260,  261,  262,  263,  264,  396,  265,
  266,  267,  268,  269,  270,  271,  272,  436,  439,  179,
};
final static short yysindex[] = {                      -216,
 1133,    0,    0,    0,    0,    0,    0, -191,    0,    0,
   46,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   88,   99,    0, 1452, 1398, 1398,
 -173, 1210,    0,    0,    0,    0,   78,    0, -145,  102,
 -118, -101,    0, 1505,    0,    0,    0, 1165,    0,    0,
    0,    0,  144,    3,  -99,    0,    0,  -80,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  173,    0,
    0,    0,    0,    0,  175,  181, 1263,    0,    0,    0,
  -13,  -16, 1703,  182,    0,    0,    0,  171,  -35,  190,
  -22,    0, -140,    0, 1452,  -16,  -32, 1452, 1452,    0,
 -162, 1558, 1558,    0,    0,    0,  220,    0,    0,    0,
 1316, 1558, 1558, 1558, 1558, 1558, -108, 1650, 1452, 1452,
 1452,    0,  -27, -212,  -25,    0,  226, 1133,    0,   -5,
 -191, 1703,  375,  375,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   18,  150,   48,   21,    0,
    0,  -16,    0,  -36,    0,  247,   68,  259,    0,  291,
    0, -244,    0,    0,  683,   47,    0,   63,   75,    0,
  -24,    0, -164,    0, -180,    0,   60,    0, 1452,    0,
    0,    0,    0,    0,    0, 1558, 1558,  319,   84,   80,
 1375,    0,    0,    0, 1375,    0,    0,  334,    0,    0,
    0,    0,    0,  100,    0,    0,    0,    0,  337,  -16,
 1703,    0,  342,  345,  350,   86, 1452, -201,  -27,    0,
 1452,  101,    0,    0, -173, 1703,    0,  366,    0,    0,
  145, 1703, 1703, 1703, 1703, 1703,    0,  171,    0,    0,
  171,    0,  367, 1133,  -16,  -35,  -16,    0,  683, 1196,
 1196, 1028,    0,    0,  -80,    0,    0,    0,    0,  137,
  142,    0,    0, 1750,    0,  153,   94,  136,    0,    0,
    0,    0,  480,  -55,    0,    0,    0,    0,    0,    0,
  146,   80, 1375, 1558,  785,    0,  386, 1133,  390,  391,
  -13,    0,    0,    0,    0, 1452, 1452,    0, 1452,  126,
    0,  130,    0,    0,    0,    0,    0,  401,    0,  -39,
    0,    0,    0,    0,    0,    0,    0,  -34, -173,  402,
    0,    0,  408,    0,    0,    0,    0,  683,  683, -129,
 1798, 1798,  416,  716, 1798, 1798, 1798, 1798, 1798,  480,
  854,  854,    0,    0,    0,    0,  415,    0,  169,  123,
  170,    0,  418,  -98,    0,  436,    0,  -98, 1558,    0,
 1133,  421,    0,    0,    0, 1452, -173,    0,    0,  441,
  442,    0,    0, 1452,    0,    0,  221,    0,  -16,  -16,
  444,    0,  -16,    0,    0,    0, 1798, 1798,  446,  205,
  201, 1757,  556,  453,    0,    0,    0,    0,    0,    0,
    0,  454,    0,    0,  480,  480,  480,  480,  480,  480,
  -32,    0,    0,    0,  -55,    0,    0, -173,    0,    0,
  459,    0,    0,    0,  461,  463,  450,  464,  -16,    0,
  222,  201, 1757, 1798,  785,    0, 1133,  462,  466,  471,
  -13,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  474,    0,    0,  -16,  -16,    0,  475, 1798,    0,
 1133,  478,    0,    0,    0, -173, 1798,    0,    0,  483,
    0,  487,    0,    0,    0, -173,    0,  488,    0,    0,
    0,  493,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -47,    0,   14, 1835,
  576,  138,    0,    0,    0,    0,    0, 1067,    0,    0,
    0,    0, 2031, 1986, 1881,    0,    0, 1934,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   13,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -125,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -29,    1,  161,    0,
    0,    0,    0,  -41,    0,  258,    0,  413,    0,  178,
    0,  326,    0,    0,    0,    0,    0,    0,    0,    0,
   24,    0,   32,    0,   33,    0,   44,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2088,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  497,    0,    0,    0,    0, -117,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2338,    0,    0,    0,    0,   76,
  -40,    0,    0,  195,    0, 2187, 2236, 2299,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2131,    0,    0,    0,    0,  500,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  719,    0,  606,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    8,    0,  -11,   25,
   -7,    0,  125,  -33,    0,   23,    0,   12,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1020,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  551,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1261,  501,    0,    0,    0,
    0, 1449,    0,    0,    0,    0,    0,  502,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
 -121,   45,    0,  456,    0,  512,  -93,    0,  460,    0,
    0,  977,  -73,  455,    0,  515,   59,   82,  198,    0,
 1510,  281,    0,    0,    0,    0,    0,  227, -182,  119,
  447,    0,  293,    0,  808,    0, 1868,  852,  997,  278,
 -134, -266,    0, -139,    0,   31,  234,   -1,  437,  469,
  672,  168,    0,    0,    0,    0,    0,  732,  109,  330,
    0,  218,    0,    0,    0,    0,  321,    0,    0,    0,
    0,  -57,    0,  272,    0,    0,    0,  351,  361,    0,
  473,    0,    0,    0,    0,  423,    0,  414,    0,  411,
    0,  425,    0,  199,    0, -319,  -28,  197,    0,   34,
  194,    0,    0,  253,    0,  359,    0,    0,    0, -378,
    0,    0, -151,  283,    0,  362,    0, 1513,    0,    0,
   58,  274,    0,  148,    0,    0,    0,  183, -386,    0,
};
final static int YYTABLESIZE=2639;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         65,
  234,  378,   67,  182,  157,  380,  225,  202,  129,   27,
  202,  105,  290,  259,  239,  158,  362,    5,  234,  123,
  402,  152,  181,  183,  208,  202,   65,   65,   65,  184,
   65,   63,  184,  190,  190,  190,  190,  190,   80,  190,
    1,  108,   65,  108,  114,  108,  462,  184,  181,  115,
  458,  190,  204,  165,  247,  204,  288,   16,   63,   63,
   63,  213,   63,  199,  167,  187,  181,  187,  187,  187,
  204,  165,  170,  173,   63,   65,  472,  473,  237,   12,
  479,  199,  167,  187,  176,   81,  444,  445,  248,  234,
  170,  173,  220,   65,  235,  221,   65,   65,  316,  420,
   65,   65,  176,  301,   88,   89,  221,   63,  370,   65,
   65,   65,   65,   65,   65,  168,  232,   65,   65,   65,
  169,   95,  319,  186,  187,   63,   65,   82,   63,   63,
  167,  168,   63,   63,  232,  337,  169,  188,   83,  165,
  338,   63,   63,   63,   63,   63,   63,   97,  361,   63,
   63,   63,  166,   96,  167,  168,  387,  388,   63,  300,
  169,  227,   98,  304,  408,  208,  367,  275,  208,  409,
  389,  320,  158,  322,  204,  205,  385,   65,   19,  160,
   99,   19,  160,  208,   65,   65,  112,  154,  113,   65,
  154,  116,  232,   65,  233,  335,   19,  336,  412,  413,
  353,  111,  111,  111,  117,  111,    5,  111,    7,   63,
  440,  406,  118,  407,  119,   65,   63,   63,  212,   65,
  120,   63,  151,  252,  238,   63,    5,    5,  152,    5,
   12,   12,  201,  202,   64,  241,  212,   67,  371,  418,
  234,  373,   65,  126,  381,    5,  253,   63,  163,  105,
  145,   63,  234,  241,  234,  234,   89,  437,  470,  191,
  234,   64,   64,   64,  379,   64,  224,  202,  166,  306,
  167,  168,  354,  226,   63,  377,  169,   64,  217,  108,
  121,   65,   65,  184,  184,  145,   65,  190,  190,  184,
  241,   16,   16,  190,   65,   65,  231,   65,  461,  145,
  145,  145,  181,  181,  245,  426,  427,  252,  181,  430,
   64,  236,  204,   63,   63,  466,  424,  449,   63,  187,
  187,   85,   87,  199,  242,  187,   63,   63,   64,   63,
  253,   64,   64,  253,  246,   64,   64,  450,    7,  476,
  273,  353,  313,  314,   64,   64,   64,   64,   64,   64,
  229,  230,   64,   64,   64,  427,  274,   65,  283,   65,
  169,   64,  254,  382,   65,  284,  221,  285,  232,  221,
  232,  232,   65,  291,  403,  404,  232,  293,  145,  446,
  447,  427,  427,  292,  221,  296,  252,  252,  297,   63,
  298,   63,  299,  145,  399,  400,   63,  325,  326,  145,
  145,  145,  145,  145,   63,  305,  309,  318,  310,  253,
  253,  421,   64,  354,  132,   19,   19,  328,   19,   64,
   64,  208,  208,  329,   64,  208,  339,  359,   64,  366,
  368,  369,  374,   19,  375,   65,   19,   66,   19,  111,
  344,  376,   19,   19,   19,   19,  254,  383,  384,  254,
   64,  252,  365,  224,   64,  392,  224,  212,  405,   65,
  410,  419,  452,  411,   66,   66,   66,   63,   66,   67,
  212,  224,  212,  212,  253,  241,  241,   64,  212,  415,
   66,  422,  423,  429,  425,  433,  434,  241,  435,  241,
  241,   63,  441,  456,  442,  241,   67,   67,   67,  453,
   67,  454,  455,  459,  457,  467,  468,  344,  344,  344,
  478,  469,   67,   66,  471,  474,   64,   64,  477,  340,
  482,   64,  341,  480,  342,  254,  254,  481,  483,   64,
   64,   66,   64,  484,   66,   66,  138,  148,   66,   66,
   64,  229,  279,   94,  334,   67,  164,   66,   66,   66,
   66,   66,   66,  185,  180,   66,   66,   66,  100,  360,
  394,  317,  203,   67,   66,  315,   67,   67,  372,  303,
   67,   67,  344,  344,  344,  344,  344,  344,  302,   67,
   67,   67,   67,   67,   67,  278,  277,   67,   67,   67,
  254,  268,   64,  276,   64,  249,   67,  223,  250,   64,
  251,  279,  465,  443,  321,  221,  448,   64,  451,  268,
  416,  386,  401,  327,  460,   66,   17,    0,  221,   17,
  221,  221,   66,   66,    0,    0,  221,   66,    0,    0,
    0,   66,    0,    0,   17,    0,    5,    6,    7,  131,
    9,   10,    0,    0,    0,   12,  225,   67,    0,  225,
    0,    0,    0,   66,   67,   67,    0,   66,   19,   67,
    0,    0,    0,   67,  225,    0,    0,    0,    0,    0,
   64,    0,   68,    0,  224,    0,   20,   21,   22,    0,
   66,    0,    0,   23,   24,   67,    0,   25,   26,   67,
    0,    0,  224,    0,   64,    0,    0,    0,    0,   68,
   68,   68,    0,   68,    0,  224,    0,  224,  224,    0,
    0,  224,   67,  224,    0,   68,    0,    0,    0,   66,
   66,    0,  249,    0,   66,  250,    0,  251,    0,    0,
    0,    0,   66,   66,    0,   66,    0,    0,    0,    0,
    0,    5,    6,    7,  131,    9,   10,    0,   68,    0,
   12,   67,   67,    0,    0,  393,   67,    0,  250,  215,
  251,    0,  215,   19,   67,   67,   68,   67,    0,   68,
   68,    0,    0,   68,   68,    0,    0,  215,    0,    0,
    0,    0,   68,   68,   68,   68,   68,   68,   23,   24,
   68,   68,   68,    0,    0,   66,    0,   66,    0,   68,
    0,    0,   66,    0,    0,    0,    0,    0,    0,    0,
   66,    0,  126,    0,    0,    0,    0,    5,    6,    7,
  131,    9,   10,    0,   11,    0,   12,   67,    0,   67,
    0,  268,  268,    0,   67,    0,   86,   86,   18,   19,
    0,    0,   67,  268,    0,  268,  268,    0,    0,  212,
   68,  268,    0,   17,   17,    0,    0,   68,   68,    0,
    0,    0,   68,  228,   23,   24,   68,  225,   25,   26,
    0,   17,    0,   66,   17,    0,   17,    0,    0,    0,
   17,   17,   17,   17,    0,  225,    0,    0,   68,    0,
  135,    0,   68,  340,    0,    0,    0,   66,  225,    0,
  225,  225,    0,    0,  225,   67,  225,    0,    0,   86,
   86,    0,    0,    0,    0,   68,    0,    0,   86,   86,
   86,   86,   86,   86,    0,  135,    0,    0,    0,   67,
    0,    0,    0,    0,  137,    0,    0,    0,    0,  135,
  135,  135,  295,    0,    5,    6,    7,  131,    9,   10,
    0,   11,    0,   12,   68,   68,    0,  307,    0,   68,
    0,    0,    0,  311,  312,   18,   19,   68,   68,  137,
   68,    0,  255,  192,    0,    0,    0,    5,    6,    7,
  131,    9,   10,  137,  137,  137,   12,    0,    0,    0,
    0,   23,   24,   86,   86,   25,   26,    0,  215,   19,
    0,    0,    0,    0,   84,    0,    0,    0,    0,    0,
    0,  215,    0,  215,  215,    0,  256,  294,  135,  215,
    0,    0,    0,    0,   23,   24,  193,  194,   25,   26,
   68,    0,   68,  135,    0,    0,    0,   68,    0,  135,
  135,  135,  135,  135,    0,   68,    5,    6,    7,  131,
    9,   10,    0,  122,    0,   12,  255,  324,  324,  255,
  216,    0,  137,  216,    0,    0,    0,  249,   19,    0,
  250,    0,  251,    0,  184,    0,    0,  137,  216,  138,
  343,    0,    0,  137,  137,  137,  137,  137,    0,    0,
    0,   86,  364,   23,   24,  122,  122,  216,    0,    0,
  256,  256,  256,  256,    0,    0,    0,   27,   68,    0,
   27,    0,    0,    0,  138,    5,    6,    7,  131,    9,
   10,    0,    0,    0,   12,   27,    0,    0,  138,  138,
  138,    0,   68,    0,    0,  255,  255,   19,  324,  324,
    0,  324,  324,  324,  324,  324,  324,  343,  343,  343,
    0,    0,    0,    0,    0,  280,    0,    0,    0,    0,
    0,  257,   23,   24,    0,    0,   86,  287,    0,    0,
    0,   84,   28,    0,   27,   29,    0,   30,    0,  256,
  256,    0,  256,  256,    0,  256,  256,  256,  256,  256,
  256,    0,    0,  122,  324,  324,    0,  122,    0,  324,
  255,    0,    0,    0,    0,    0,    0,  138,    0,    0,
    0,    0,  343,  343,  343,  343,  343,  343,    0,    0,
    0,    0,  138,    0,  109,  108,  110,    0,  138,  138,
  138,  138,  138,    0,    0,  249,    0,    0,  256,  256,
  324,  324,  464,  256,  256,  257,  257,  257,  257,   28,
    0,   27,   29,    0,   30,    0,    0,    0,    0,  287,
    0,    0,    0,    0,    0,    0,  324,    0,    0,    0,
    0,    0,  122,  122,  324,  122,    0,    0,    0,    0,
    0,    0,    0,    0,  256,  256,    0,    0,    0,    5,
    6,    7,  131,    9,   10,    0,   11,    0,   12,  216,
    0,  217,   28,    0,  217,   29,    0,   30,    0,    0,
  256,   19,  216,    0,  216,  216,    0,    0,  256,  217,
  216,    0,    0,    0,  257,  257,    0,  257,  257,    0,
  257,  257,  257,  257,  257,  257,   23,   24,    0,    0,
   25,   26,  287,    0,   27,   27,    0,   27,   27,    0,
  122,    0,    0,    0,    0,  195,    0,    0,   29,    0,
   30,    0,   27,    0,    0,   27,    0,   27,    0,    0,
    0,   27,   27,   27,   27,    0,    0,    0,    0,    0,
    0,    0,    0,  257,  257,    0,    0,    0,  257,  257,
    3,    4,    0,    0,    5,    6,    7,    8,    9,   10,
    0,   11,    0,   12,    0,   13,   14,   15,   16,   17,
    0,    0,    0,    0,   28,   18,   19,   29,    0,   30,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  257,
  257,    0,    0,    0,   20,   21,   22,   28,    0,    0,
    0,   23,   24,    0,    0,   25,   26,  101,    0,    0,
  102,  103,    0,  104,  105,  257,  106,    5,    6,    7,
  131,    9,   10,  257,  107,    0,   12,    0,    0,    0,
    0,    5,    6,    7,    8,    9,   10,    0,   11,   19,
   12,    0,   13,   14,   15,   16,   17,    0,    0,  270,
    0,   28,   18,   19,   29,    0,   30,    0,    0,    0,
    0,    0,    0,    0,   23,   24,    0,  270,   25,   26,
    0,   20,   21,   22,    0,    0,    0,    0,   23,   24,
    0,    0,   25,   26,    5,    6,    7,    8,    9,   10,
    0,   11,    0,   12,    0,   13,   14,   15,   16,   17,
  217,    0,    0,    0,   28,   18,   19,   29,    0,   30,
    0,    0,    0,  217,    0,  217,  217,    0,    0,    0,
    0,  217,    0,    0,   20,   21,   22,    0,  121,    0,
    0,   23,   24,  192,    0,   25,   26,    5,    6,    7,
    8,    9,   10,    0,    0,    0,   12,    0,   13,   14,
   15,   16,   17,    0,    0,    0,    0,   28,    0,   19,
   29,    0,   30,    0,    0,    0,    0,    0,    0,    0,
    0,  189,  190,    0,    0,    0,    0,   20,   21,   22,
  196,  199,  200,    0,   23,   24,  193,  194,   25,   26,
    0,  126,    0,    0,    0,    0,    5,    6,    7,    8,
    9,   10,    0,   11,    0,   12,    0,   13,   14,   15,
   16,   17,    0,    0,    0,    0,    0,   18,   19,    5,
    6,    7,    8,    9,   10,    0,    0,    0,   12,    0,
   13,   14,   15,   16,   17,    0,   20,   21,   22,    0,
    0,   19,    0,   23,   24,    0,    0,   25,   26,  132,
    0,   27,  133,    0,  134,  281,  282,    0,    0,   20,
   21,   22,    0,    0,    0,    0,   23,   24,    0,    0,
   25,   26,    0,    5,    6,    7,    8,    9,   10,    0,
   11,    0,   12,    0,   13,   14,   15,   16,   17,  270,
  270,    0,    0,    0,   18,   19,    0,    0,    0,    0,
    0,  270,  132,  270,  270,  133,    0,  134,    0,  270,
    0,    0,    0,   20,   21,   22,    0,    0,    0,    0,
   23,   24,    0,    0,   25,   26,    5,    6,    7,    8,
    9,   10,    0,   11,    0,   12,    0,   13,   14,   15,
   16,   17,    0,    0,    0,    0,    0,    0,   19,    0,
    0,    0,    0,  363,    0,    0,  249,    0,    0,  250,
    0,  251,    0,    0,    0,    0,   20,   21,   22,  109,
  108,  110,    0,   23,   24,    0,    0,   25,   26,    5,
    6,    7,    8,    9,   10,    0,    0,    0,   12,    0,
   13,   14,   15,   16,   17,    0,    0,  249,    0,    0,
  250,   19,  251,  390,  391,    0,  395,  397,  398,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   20,
   21,   22,    0,    0,    0,    0,   23,   24,  417,    0,
   25,   26,    0,    0,    0,  130,  130,  130,  130,  130,
    0,  130,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  130,  130,  130,  130,    0,    0,  431,
  432,    0,    0,    0,  438,    0,    0,  206,  207,    0,
    0,    5,    6,    7,  131,    9,   10,    0,    0,    0,
   12,   42,   42,   42,   42,   42,    0,   42,    0,    0,
    0,    0,    0,   19,    0,    0,    0,    0,    0,   42,
   42,   42,   42,    0,    0,  438,  463,    0,    0,    0,
  136,   20,   21,   22,    0,    0,    0,    0,   23,   24,
    0,    0,   25,   26,    5,    6,    7,  131,    9,   10,
    0,  475,    0,   12,   48,   48,   48,   48,   48,  438,
   48,    0,    0,    0,    0,  136,   19,    0,    0,    0,
    0,    0,   48,   48,   48,   48,    0,    0,    0,  136,
  136,  136,    0,    0,   20,   21,   22,    0,    0,    0,
    0,   23,   24,  126,    0,   25,   26,    0,    5,    6,
    7,  131,    9,   10,    0,    0,   39,   12,   39,   39,
   39,    0,  330,    0,    0,  331,  332,    0,  104,  105,
   19,  106,    0,    0,   39,   39,   39,   39,    0,  333,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    5,
    6,    7,  131,    9,   10,   23,   24,    0,   12,   25,
   26,   36,    0,    0,   36,    0,    0,    0,  136,    0,
    0,   19,    0,    0,    0,    0,    0,    0,    0,   36,
   36,   36,   36,  136,    0,    0,    0,    0,    0,  136,
  136,  136,  136,  136,    0,    0,   23,   24,    0,    0,
   25,   26,  130,  130,    0,  130,  130,  130,    0,  130,
  130,  130,  130,  130,  130,  130,  130,  130,   56,  130,
  130,   56,    0,  130,  130,  130,    0,    0,    0,  130,
  130,  130,  130,    0,    0,    0,   56,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   42,   42,
    0,   42,   42,   42,    0,    0,   42,   42,   42,   42,
   42,   58,   42,    0,   58,    0,   42,    0,    0,   42,
   42,   42,    0,    0,    0,   42,   42,   42,   42,   58,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   48,   48,    0,   48,   48,   48,    0,    0,   48,
   48,    0,   48,   48,   48,   48,    0,  247,    0,   48,
  247,    0,   48,   48,   48,    0,    0,    0,   48,   48,
   48,   48,    0,    0,    0,  247,  247,  247,  247,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   39,   39,    0,   39,   39,   39,    0,
    0,   39,   39,   39,   39,   39,  250,   39,  250,  250,
  250,   39,    0,    0,   39,   39,   39,    0,    0,    0,
   39,   39,   39,   39,  250,  250,  250,  250,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,   36,
    0,   36,   36,   36,    0,    0,   36,   36,   36,   36,
   36,    0,   36,    0,    0,    0,   36,    0,    0,   36,
   36,   36,    0,    0,    0,   36,   36,   36,   36,  253,
  253,  253,  253,  253,    0,  253,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  253,  253,  253,
  253,    0,    0,    0,    0,   56,   56,    0,   56,   56,
    0,    0,    0,    0,    0,    0,    0,    0,  258,  258,
  258,    0,  258,   56,  258,    0,   56,    0,   56,    0,
    0,    0,   56,   56,   56,   56,  258,  258,  258,  258,
    0,    0,    0,    0,    0,    0,    0,    0,   58,   58,
    0,   58,   58,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   58,    0,    0,   58,
    0,   58,    0,    0,    0,   58,   58,   58,   58,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  247,  247,  247,
    0,    0,  247,  247,  247,  247,  247,    0,  247,  247,
    0,  247,  247,    0,    0,    0,  247,  247,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  250,  250,  250,    0,
    0,  250,  250,  250,  250,  250,    0,  250,  250,    0,
  250,  250,    0,    0,    0,  250,  250,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  253,
  253,  253,    0,    0,  253,  253,  253,  253,  253,    0,
  253,  253,    0,  253,  253,    0,    0,    0,  253,  253,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  258,  258,
  258,    0,    0,  258,  258,    0,  258,  258,  258,  258,
  258,    0,  258,  258,    0,    0,    0,  258,  258,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          1,
   41,   41,   44,   97,   40,   40,  128,   41,   82,   42,
   44,   41,  195,  165,  154,   89,  283,  262,   59,   77,
  340,   58,   96,   97,  118,   59,   28,   29,   30,   41,
   32,    1,   44,   41,   42,   43,   44,   45,    8,   47,
  257,   41,   44,   43,   42,   45,  433,   59,   41,   47,
  429,   59,   41,   41,  299,   44,  191,   44,   28,   29,
   30,  119,   32,   41,   41,   41,   59,   43,   44,   45,
   59,   59,   41,   41,   44,   77,  455,  456,  152,  271,
  467,   59,   59,   59,   41,   40,  406,  407,  162,   42,
   59,   59,  305,   95,   47,  308,   98,   99,  238,  366,
  102,  103,   59,  305,  278,  279,  308,   77,  291,  111,
  112,  113,  114,  115,  116,  296,   41,  119,  120,  121,
  301,   44,  244,  286,  287,   95,  128,   40,   98,   99,
  295,  296,  102,  103,   59,   42,  301,  300,   40,  280,
   47,  111,  112,  113,  114,  115,  116,   46,  283,  119,
  120,  121,  293,  299,  295,  296,  286,  287,  128,  217,
  301,  131,  281,  221,   42,   41,  288,  169,   44,   47,
  300,  245,  246,  247,  283,  284,  328,  179,   41,  305,
  282,   44,  308,   59,  186,  187,   43,  305,   45,  191,
  308,  291,   43,  195,   45,   43,   59,   45,  297,  298,
  274,   41,   42,   43,  285,   45,  262,   47,  264,  179,
  393,   43,   40,   45,   40,  217,  186,  187,   41,  221,
   40,  191,   41,  165,  261,  195,  262,  262,   58,  262,
  278,  279,  114,  115,    1,   41,   59,  279,  296,  361,
  281,  299,  244,  257,  318,  262,  165,  217,   59,  279,
   83,  221,  293,   59,  295,  296,  279,  392,  441,   40,
  301,   28,   29,   30,  299,   32,   41,  301,  293,  225,
  295,  296,  274,  279,  244,  315,  301,   44,  306,  279,
  306,  283,  284,  295,  296,  118,  288,  295,  296,  301,
   44,  278,  279,  301,  296,  297,  279,  299,  433,  132,
  133,  134,  295,  296,   46,  379,  380,  249,  301,  383,
   77,  291,  301,  283,  284,  437,  374,  411,  288,  295,
  296,   29,   30,  301,  257,  301,  296,  297,   95,  299,
  249,   98,   99,  252,   44,  102,  103,  411,  264,  461,
  294,  415,  234,  235,  111,  112,  113,  114,  115,  116,
  133,  134,  119,  120,  121,  429,  294,  359,   40,  361,
  301,  128,  165,  319,  366,  282,   41,  288,  293,   44,
  295,  296,  374,   40,  341,  342,  301,   41,  211,  408,
  409,  455,  456,  284,   59,   44,  328,  329,   44,  359,
   41,  361,  307,  226,  337,  338,  366,  250,  251,  232,
  233,  234,  235,  236,  374,  305,   41,   41,  264,  328,
  329,  367,  179,  415,   40,  278,  279,  281,  281,  186,
  187,  297,  298,  282,  191,  301,  291,  282,  195,   44,
   41,   41,  307,  296,  305,  437,  299,    1,  301,  279,
  273,   41,  305,  306,  307,  308,  249,   46,   41,  252,
  217,  393,  285,   41,  221,   40,   44,  280,   44,  461,
  291,   41,  418,   46,   28,   29,   30,  437,   32,    1,
  293,   59,  295,  296,  393,  281,  282,  244,  301,   44,
   44,   41,   41,   40,  264,   40,  282,  293,  288,  295,
  296,  461,   40,   44,   41,  301,   28,   29,   30,   41,
   32,   41,   40,  282,   41,   44,   41,  340,  341,  342,
  466,   41,   44,   77,   41,   41,  283,  284,   41,   40,
  476,  288,   43,   41,   45,  328,  329,   41,   41,  296,
  297,   95,  299,   41,   98,   99,  279,   41,  102,  103,
   41,   41,   41,   32,  264,   77,   91,  111,  112,  113,
  114,  115,  116,   99,   95,  119,  120,  121,   44,  282,
  334,  241,  116,   95,  128,  236,   98,   99,  297,  219,
  102,  103,  405,  406,  407,  408,  409,  410,  218,  111,
  112,  113,  114,  115,  116,  175,  173,  119,  120,  121,
  393,   41,  359,  171,  361,   40,  128,  125,   43,  366,
   45,  177,  435,  405,  246,  280,  410,  374,  415,   59,
  358,  329,  339,  252,  432,  179,   41,   -1,  293,   44,
  295,  296,  186,  187,   -1,   -1,  301,  191,   -1,   -1,
   -1,  195,   -1,   -1,   59,   -1,  262,  263,  264,  265,
  266,  267,   -1,   -1,   -1,  271,   41,  179,   -1,   44,
   -1,   -1,   -1,  217,  186,  187,   -1,  221,  284,  191,
   -1,   -1,   -1,  195,   59,   -1,   -1,   -1,   -1,   -1,
  437,   -1,    1,   -1,  262,   -1,  302,  303,  304,   -1,
  244,   -1,   -1,  309,  310,  217,   -1,  313,  314,  221,
   -1,   -1,  280,   -1,  461,   -1,   -1,   -1,   -1,   28,
   29,   30,   -1,   32,   -1,  293,   -1,  295,  296,   -1,
   -1,  299,  244,  301,   -1,   44,   -1,   -1,   -1,  283,
  284,   -1,   40,   -1,  288,   43,   -1,   45,   -1,   -1,
   -1,   -1,  296,  297,   -1,  299,   -1,   -1,   -1,   -1,
   -1,  262,  263,  264,  265,  266,  267,   -1,   77,   -1,
  271,  283,  284,   -1,   -1,   40,  288,   -1,   43,   41,
   45,   -1,   44,  284,  296,  297,   95,  299,   -1,   98,
   99,   -1,   -1,  102,  103,   -1,   -1,   59,   -1,   -1,
   -1,   -1,  111,  112,  113,  114,  115,  116,  309,  310,
  119,  120,  121,   -1,   -1,  359,   -1,  361,   -1,  128,
   -1,   -1,  366,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,   -1,  257,   -1,   -1,   -1,   -1,  262,  263,  264,
  265,  266,  267,   -1,  269,   -1,  271,  359,   -1,  361,
   -1,  281,  282,   -1,  366,   -1,   29,   30,  283,  284,
   -1,   -1,  374,  293,   -1,  295,  296,   -1,   -1,  118,
  179,  301,   -1,  278,  279,   -1,   -1,  186,  187,   -1,
   -1,   -1,  191,  132,  309,  310,  195,  262,  313,  314,
   -1,  296,   -1,  437,  299,   -1,  301,   -1,   -1,   -1,
  305,  306,  307,  308,   -1,  280,   -1,   -1,  217,   -1,
   83,   -1,  221,   40,   -1,   -1,   -1,  461,  293,   -1,
  295,  296,   -1,   -1,  299,  437,  301,   -1,   -1,  102,
  103,   -1,   -1,   -1,   -1,  244,   -1,   -1,  111,  112,
  113,  114,  115,  116,   -1,  118,   -1,   -1,   -1,  461,
   -1,   -1,   -1,   -1,   83,   -1,   -1,   -1,   -1,  132,
  133,  134,  211,   -1,  262,  263,  264,  265,  266,  267,
   -1,  269,   -1,  271,  283,  284,   -1,  226,   -1,  288,
   -1,   -1,   -1,  232,  233,  283,  284,  296,  297,  118,
  299,   -1,  165,  258,   -1,   -1,   -1,  262,  263,  264,
  265,  266,  267,  132,  133,  134,  271,   -1,   -1,   -1,
   -1,  309,  310,  186,  187,  313,  314,   -1,  280,  284,
   -1,   -1,   -1,   -1,   28,   -1,   -1,   -1,   -1,   -1,
   -1,  293,   -1,  295,  296,   -1,  165,  210,  211,  301,
   -1,   -1,   -1,   -1,  309,  310,  311,  312,  313,  314,
  359,   -1,  361,  226,   -1,   -1,   -1,  366,   -1,  232,
  233,  234,  235,  236,   -1,  374,  262,  263,  264,  265,
  266,  267,   -1,   77,   -1,  271,  249,  250,  251,  252,
   41,   -1,  211,   44,   -1,   -1,   -1,   40,  284,   -1,
   43,   -1,   45,   -1,   98,   -1,   -1,  226,   59,   83,
  273,   -1,   -1,  232,  233,  234,  235,  236,   -1,   -1,
   -1,  284,  285,  309,  310,  119,  120,  121,   -1,   -1,
  249,  250,  251,  252,   -1,   -1,   -1,   41,  437,   -1,
   44,   -1,   -1,   -1,  118,  262,  263,  264,  265,  266,
  267,   -1,   -1,   -1,  271,   59,   -1,   -1,  132,  133,
  134,   -1,  461,   -1,   -1,  328,  329,  284,  331,  332,
   -1,  334,  335,  336,  337,  338,  339,  340,  341,  342,
   -1,   -1,   -1,   -1,   -1,  179,   -1,   -1,   -1,   -1,
   -1,  165,  309,  310,   -1,   -1,  359,  191,   -1,   -1,
   -1,  195,   40,   -1,   42,   43,   -1,   45,   -1,  328,
  329,   -1,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,   -1,   -1,  217,  387,  388,   -1,  221,   -1,  392,
  393,   -1,   -1,   -1,   -1,   -1,   -1,  211,   -1,   -1,
   -1,   -1,  405,  406,  407,  408,  409,  410,   -1,   -1,
   -1,   -1,  226,   -1,   60,   61,   62,   -1,  232,  233,
  234,  235,  236,   -1,   -1,   40,   -1,   -1,  387,  388,
  433,  434,  435,  392,  393,  249,  250,  251,  252,   40,
   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,  283,
   -1,   -1,   -1,   -1,   -1,   -1,  459,   -1,   -1,   -1,
   -1,   -1,  296,  297,  467,  299,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  433,  434,   -1,   -1,   -1,  262,
  263,  264,  265,  266,  267,   -1,  269,   -1,  271,  280,
   -1,   41,   40,   -1,   44,   43,   -1,   45,   -1,   -1,
  459,  284,  293,   -1,  295,  296,   -1,   -1,  467,   59,
  301,   -1,   -1,   -1,  328,  329,   -1,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  309,  310,   -1,   -1,
  313,  314,  366,   -1,  278,  279,   -1,  281,  282,   -1,
  374,   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,
   45,   -1,  296,   -1,   -1,  299,   -1,  301,   -1,   -1,
   -1,  305,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,  392,  393,
  258,  259,   -1,   -1,  262,  263,  264,  265,  266,  267,
   -1,  269,   -1,  271,   -1,  273,  274,  275,  276,  277,
   -1,   -1,   -1,   -1,   40,  283,  284,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  433,
  434,   -1,   -1,   -1,  302,  303,  304,   40,   -1,   -1,
   -1,  309,  310,   -1,   -1,  313,  314,  283,   -1,   -1,
  286,  287,   -1,  289,  290,  459,  292,  262,  263,  264,
  265,  266,  267,  467,  300,   -1,  271,   -1,   -1,   -1,
   -1,  262,  263,  264,  265,  266,  267,   -1,  269,  284,
  271,   -1,  273,  274,  275,  276,  277,   -1,   -1,   41,
   -1,   40,  283,  284,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  309,  310,   -1,   59,  313,  314,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,  309,  310,
   -1,   -1,  313,  314,  262,  263,  264,  265,  266,  267,
   -1,  269,   -1,  271,   -1,  273,  274,  275,  276,  277,
  280,   -1,   -1,   -1,   40,  283,  284,   43,   -1,   45,
   -1,   -1,   -1,  293,   -1,  295,  296,   -1,   -1,   -1,
   -1,  301,   -1,   -1,  302,  303,  304,   -1,  306,   -1,
   -1,  309,  310,  258,   -1,  313,  314,  262,  263,  264,
  265,  266,  267,   -1,   -1,   -1,  271,   -1,  273,  274,
  275,  276,  277,   -1,   -1,   -1,   -1,   40,   -1,  284,
   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  102,  103,   -1,   -1,   -1,   -1,  302,  303,  304,
  111,  112,  113,   -1,  309,  310,  311,  312,  313,  314,
   -1,  257,   -1,   -1,   -1,   -1,  262,  263,  264,  265,
  266,  267,   -1,  269,   -1,  271,   -1,  273,  274,  275,
  276,  277,   -1,   -1,   -1,   -1,   -1,  283,  284,  262,
  263,  264,  265,  266,  267,   -1,   -1,   -1,  271,   -1,
  273,  274,  275,  276,  277,   -1,  302,  303,  304,   -1,
   -1,  284,   -1,  309,  310,   -1,   -1,  313,  314,   40,
   -1,   42,   43,   -1,   45,  186,  187,   -1,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,  309,  310,   -1,   -1,
  313,  314,   -1,  262,  263,  264,  265,  266,  267,   -1,
  269,   -1,  271,   -1,  273,  274,  275,  276,  277,  281,
  282,   -1,   -1,   -1,  283,  284,   -1,   -1,   -1,   -1,
   -1,  293,   40,  295,  296,   43,   -1,   45,   -1,  301,
   -1,   -1,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
  309,  310,   -1,   -1,  313,  314,  262,  263,  264,  265,
  266,  267,   -1,  269,   -1,  271,   -1,  273,  274,  275,
  276,  277,   -1,   -1,   -1,   -1,   -1,   -1,  284,   -1,
   -1,   -1,   -1,  284,   -1,   -1,   40,   -1,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,  302,  303,  304,   60,
   61,   62,   -1,  309,  310,   -1,   -1,  313,  314,  262,
  263,  264,  265,  266,  267,   -1,   -1,   -1,  271,   -1,
  273,  274,  275,  276,  277,   -1,   -1,   40,   -1,   -1,
   43,  284,   45,  331,  332,   -1,  334,  335,  336,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,  309,  310,  359,   -1,
  313,  314,   -1,   -1,   -1,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   60,   61,   62,   -1,   -1,  387,
  388,   -1,   -1,   -1,  392,   -1,   -1,  258,  259,   -1,
   -1,  262,  263,  264,  265,  266,  267,   -1,   -1,   -1,
  271,   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   59,
   60,   61,   62,   -1,   -1,  433,  434,   -1,   -1,   -1,
   83,  302,  303,  304,   -1,   -1,   -1,   -1,  309,  310,
   -1,   -1,  313,  314,  262,  263,  264,  265,  266,  267,
   -1,  459,   -1,  271,   41,   42,   43,   44,   45,  467,
   47,   -1,   -1,   -1,   -1,  118,  284,   -1,   -1,   -1,
   -1,   -1,   59,   60,   61,   62,   -1,   -1,   -1,  132,
  133,  134,   -1,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,  309,  310,  257,   -1,  313,  314,   -1,  262,  263,
  264,  265,  266,  267,   -1,   -1,   41,  271,   43,   44,
   45,   -1,  283,   -1,   -1,  286,  287,   -1,  289,  290,
  284,  292,   -1,   -1,   59,   60,   61,   62,   -1,  300,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  262,
  263,  264,  265,  266,  267,  309,  310,   -1,  271,  313,
  314,   41,   -1,   -1,   44,   -1,   -1,   -1,  211,   -1,
   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   60,   61,   62,  226,   -1,   -1,   -1,   -1,   -1,  232,
  233,  234,  235,  236,   -1,   -1,  309,  310,   -1,   -1,
  313,  314,  278,  279,   -1,  281,  282,  283,   -1,  285,
  286,  287,  288,  289,  290,  291,  292,  293,   41,  295,
  296,   44,   -1,  299,  300,  301,   -1,   -1,   -1,  305,
  306,  307,  308,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  278,  279,
   -1,  281,  282,  283,   -1,   -1,  286,  287,  288,  289,
  290,   41,  292,   -1,   44,   -1,  296,   -1,   -1,  299,
  300,  301,   -1,   -1,   -1,  305,  306,  307,  308,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  278,  279,   -1,  281,  282,  283,   -1,   -1,  286,
  287,   -1,  289,  290,  291,  292,   -1,   41,   -1,  296,
   44,   -1,  299,  300,  301,   -1,   -1,   -1,  305,  306,
  307,  308,   -1,   -1,   -1,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  278,  279,   -1,  281,  282,  283,   -1,
   -1,  286,  287,  288,  289,  290,   41,  292,   43,   44,
   45,  296,   -1,   -1,  299,  300,  301,   -1,   -1,   -1,
  305,  306,  307,  308,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  278,  279,
   -1,  281,  282,  283,   -1,   -1,  286,  287,  288,  289,
  290,   -1,  292,   -1,   -1,   -1,  296,   -1,   -1,  299,
  300,  301,   -1,   -1,   -1,  305,  306,  307,  308,   41,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,  278,  279,   -1,  281,  282,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,   42,
   43,   -1,   45,  296,   47,   -1,  299,   -1,  301,   -1,
   -1,   -1,  305,  306,  307,  308,   59,   60,   61,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  278,  279,
   -1,  281,  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,  299,
   -1,  301,   -1,   -1,   -1,  305,  306,  307,  308,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  281,  282,  283,
   -1,   -1,  286,  287,  288,  289,  290,   -1,  292,  293,
   -1,  295,  296,   -1,   -1,   -1,  300,  301,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  281,  282,  283,   -1,
   -1,  286,  287,  288,  289,  290,   -1,  292,  293,   -1,
  295,  296,   -1,   -1,   -1,  300,  301,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  281,
  282,  283,   -1,   -1,  286,  287,  288,  289,  290,   -1,
  292,  293,   -1,  295,  296,   -1,   -1,   -1,  300,  301,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  281,  282,
  283,   -1,   -1,  286,  287,   -1,  289,  290,  291,  292,
  293,   -1,  295,  296,   -1,   -1,   -1,  300,  301,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=315;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,"TK_SELECT","TK_ALL","TK_DISTINCT","TK_USER",
"TK_INDICATOR","TK_NAME","TK_APPROXNUM","TK_INTNUM","TK_DATE","TK_INTERVAL1",
"TK_INTERVAL2","TK_COMENTARIO","TK_EXISTS","TK_PLIC","TK_STRING",
"TK_CONCATENATION","TK_AVG","TK_MIN","TK_MAX","TK_SUM","TK_COUNT","TK_INTO",
"TK_FROM","TK_WHERE","TK_OR","TK_AND","TK_NOT","TK_NULL","TK_IS","TK_BETWEEN",
"TK_LIKE","TK_ESCAPE","TK_DIFERENTE","TK_MENOR_IG","TK_VERTBAR","TK_MAIOR_IG",
"TK_GROUP","TK_BY","TK_HAVING","TK_ORDER","TK_ASC","TK_DESC","TK_AS","TK_IN",
"TK_LIMIT","TK_NULLIF","TK_COALESCE","TK_CASE","TK_END","TK_WHEN","TK_THEN",
"TK_ELSE","TK_TRUE","TK_FALSE","TK_ANY","TK_SOME","TK_EXTRACT","TK_SUBSTRING",
"TK_FOR",
};
final static String yyrule[] = {
"$accept : Select",
"Select : TK_SELECT Selection Select_tail ';'",
"Select_tail : Into Table_exp",
"Select_tail : Table_exp",
"All_or_distinct : TK_ALL",
"All_or_distinct : TK_DISTINCT",
"Selection : All_or_distinct Selection_term",
"Selection : Selection_term",
"Selection_term : Wildcard",
"Selection_term : Scalar_exp_list_ini",
"Wildcard : '*'",
"Scalar_exp_list_ini : Scalar_exp_list",
"Scalar_exp_list : Scalar_exp_ini",
"Scalar_exp_list : Scalar_exp_ini ',' Scalar_exp_list",
"Scalar_exp_ini : Scalar_exp_as",
"Scalar_exp_as : Scalar_condition TK_AS Name",
"Scalar_exp_as : Scalar_condition",
"Scalar_condition : Scalar_condition_term",
"Scalar_condition : Scalar_condition_term TK_OR Scalar_condition",
"Scalar_condition_term : Scalar_Not_tag",
"Scalar_condition_term : Scalar_Not_tag TK_AND Scalar_condition_term",
"Scalar_Not_tag : Scalar_predicate",
"Scalar_Not_tag : Not_ini Scalar_predicate",
"Not_ini : TK_NOT",
"Scalar_predicate : Test_for_null",
"Scalar_predicate : Existence_test",
"Scalar_predicate : Scalar_relational_exp",
"Scalar_relational_exp : Scalar_exp",
"Scalar_relational_exp : Scalar_exp Comparison Scalar_relational_rvalue",
"Scalar_relational_exp : Scalar_relational_predicate",
"Scalar_relational_predicate : Scalar_between_predicate",
"Scalar_relational_predicate : Scalar_like_predicate",
"Scalar_relational_predicate : Scalar_in_predicate",
"Scalar_relational_rvalue : Scalar_exp",
"Scalar_relational_rvalue : Any_all_some '(' Subquery ')'",
"Scalar_relational_rvalue : '(' Subquery ')'",
"Scalar_exp : Scalar_term",
"Scalar_exp : Scalar_term '+' Scalar_exp",
"Scalar_exp : Scalar_term '-' Scalar_exp",
"Scalar_term : Scalar_concatenation_op",
"Scalar_term : Scalar_concatenation_op '*' Scalar_term",
"Scalar_term : Scalar_concatenation_op '/' Scalar_term",
"Scalar_concatenation_op : Scalar_factor_unary_op",
"Scalar_concatenation_op : Scalar_factor_unary_op TK_VERTBAR Scalar_concatenation_op",
"Scalar_factor_unary_op : Scalar_factor",
"Scalar_factor_unary_op : '+' Scalar_factor",
"Scalar_factor_unary_op : '-' Scalar_factor",
"Scalar_factor : Function_ref_selection",
"Scalar_factor : Column_ref",
"Scalar_factor : '(' Scalar_condition ')'",
"Scalar_factor : Literal_selection",
"Scalar_factor : Case_expression",
"Scalar_factor : Numeric_value_function",
"Scalar_factor : String_value_function",
"Scalar_between_predicate : Scalar_exp TK_BETWEEN Scalar_exp TK_AND Scalar_exp",
"Scalar_between_predicate : Scalar_exp TK_NOT TK_BETWEEN Scalar_exp TK_AND Scalar_exp",
"Scalar_like_predicate : Scalar_exp TK_LIKE Scalar_exp",
"Scalar_like_predicate : Scalar_exp TK_LIKE Scalar_exp Search_escape",
"Scalar_like_predicate : Scalar_exp TK_NOT TK_LIKE Scalar_exp",
"Scalar_like_predicate : Scalar_exp TK_NOT TK_LIKE Scalar_exp Search_escape",
"Scalar_in_predicate : Scalar_exp TK_IN '(' Subquery_ini Selection Select_tail ')'",
"Scalar_in_predicate : Scalar_exp TK_NOT TK_IN '(' Subquery_ini Selection Select_tail ')'",
"Scalar_in_predicate : Scalar_exp TK_IN '(' Scalar_in_value_list ')'",
"Scalar_in_predicate : Scalar_exp TK_NOT TK_IN '(' Scalar_in_value_list ')'",
"Scalar_in_value_list : Scalar_condition",
"Scalar_in_value_list : Scalar_condition ',' Scalar_in_value_list",
"Parameter_ref : Parameter Parameter_tail",
"Parameter_ref : Parameter",
"Parameter_tail : TK_INDICATOR Parameter",
"Parameter_tail : Parameter",
"Parameter : ':' Name",
"Name : TK_NAME",
"Literal_selection : String",
"Literal_selection : Approxnum",
"Literal_selection : Intnum",
"Literal_selection : TK_DATE String",
"Literal_selection : Interval",
"Literal_selection : Boolean",
"Literal_selection : Null",
"Literal : String",
"Literal : Approxnum",
"Literal : Intnum",
"Literal : TK_DATE String",
"Literal : Interval",
"Literal : Boolean",
"Literal : Null",
"String : TK_STRING",
"Approxnum : TK_APPROXNUM",
"Intnum : TK_INTNUM",
"Boolean : TK_TRUE",
"Boolean : TK_FALSE",
"Null : TK_NULL",
"Interval : TK_INTERVAL1",
"Interval : TK_INTERVAL2",
"Function_ref_selection : Function_ini '(' Function_parameters ')'",
"Function_ini : Function_name",
"Function_name : TK_AVG",
"Function_name : TK_MIN",
"Function_name : TK_MAX",
"Function_name : TK_SUM",
"Function_name : TK_COUNT",
"Function_parameters : Wildcard",
"Function_parameters : Distinct_literal Column_ref",
"Function_parameters : All_literal Function_Scalar_exp",
"Function_parameters : Function_Scalar_exp",
"Function_Scalar_exp : Function_Scalar_term",
"Function_Scalar_exp : Function_Scalar_term '+' Function_Scalar_exp",
"Function_Scalar_exp : Function_Scalar_term '-' Function_Scalar_exp",
"Function_Scalar_term : Function_concatenation_op",
"Function_Scalar_term : Function_concatenation_op '*' Function_Scalar_term",
"Function_Scalar_term : Function_concatenation_op '/' Function_Scalar_term",
"Function_concatenation_op : Function_Scalar_factor_unary_op",
"Function_concatenation_op : Function_Scalar_factor_unary_op TK_VERTBAR Function_concatenation_op",
"Function_Scalar_factor_unary_op : '+' Function_Scalar_factor",
"Function_Scalar_factor_unary_op : '-' Function_Scalar_factor",
"Function_Scalar_factor_unary_op : Function_Scalar_factor",
"Function_Scalar_factor : Column_ref",
"Function_Scalar_factor : '(' Function_Scalar_exp ')'",
"Function_Scalar_factor : Literal",
"Function_Scalar_factor : Case_expression",
"Function_Scalar_factor : Numeric_value_function",
"Function_Scalar_factor : String_value_function",
"Numeric_value_function : Extract_expression",
"Extract_expression : TK_EXTRACT '(' Extract_field TK_FROM Extract_source ')'",
"Extract_field : Name",
"Extract_source : Function_Scalar_exp",
"String_value_function : Character_substring_function",
"Character_substring_function : TK_SUBSTRING '(' Function_Scalar_exp TK_FROM TK_INTNUM ')'",
"Character_substring_function : TK_SUBSTRING '(' Function_Scalar_exp TK_FROM TK_INTNUM TK_FOR TK_INTNUM ')'",
"Distinct_literal : TK_DISTINCT",
"Column_ref : Name",
"Column_ref : Name '.' Wildcard",
"Column_ref : Name '.' Name",
"All_literal : TK_ALL",
"Into : TK_INTO Target_list",
"Any_all_some : TK_ANY",
"Any_all_some : TK_ALL",
"Any_all_some : TK_SOME",
"Target_list : Target",
"Target_list : Target ',' Target_list",
"Target : Parameter_ref",
"Case_expression : Case_abbreviation",
"Case_expression : Case_specification",
"Case_abbreviation : Nullif '(' Value_expression ',' Value_expression ')'",
"Case_abbreviation : Coalesce '(' Coalesce_value_expression_list ')'",
"Nullif : TK_NULLIF",
"Coalesce : TK_COALESCE",
"Case : TK_CASE",
"Coalesce_value_expression_list : Value_expression",
"Coalesce_value_expression_list : Value_expression ',' Coalesce_value_expression_list",
"Case_specification : Simple_case",
"Case_specification : Searched_case",
"Simple_case : Case Value_expression Simple_when_clause_list TK_END",
"Simple_case : Case Value_expression Simple_when_clause_list Else_clause TK_END",
"Simple_when_clause_list : Simple_when_clause",
"Simple_when_clause_list : Simple_when_clause Simple_when_clause_list",
"Simple_when_clause : TK_WHEN Value_expression TK_THEN Value_expression",
"Else_clause : TK_ELSE Value_expression",
"Searched_case : Case Searched_when_clause_list TK_END",
"Searched_case : Case Searched_when_clause_list Else_clause TK_END",
"Searched_when_clause_list : Searched_when_clause",
"Searched_when_clause_list : Searched_when_clause Searched_when_clause_list",
"Searched_when_clause : TK_WHEN Scalar_condition TK_THEN Value_expression",
"Value_expression : Scalar_condition",
"Table_exp : From_clause Opt_where_group_having_order",
"Table_exp : From_clause",
"Opt_where_group_having_order : Where_clause Opt_group_having_order",
"Opt_where_group_having_order : Where_clause",
"Opt_where_group_having_order : Opt_group_having_order",
"Opt_group_having_order : Group_by_clause Opt_having_order",
"Opt_group_having_order : Group_by_clause",
"Opt_group_having_order : Opt_having_order",
"Opt_having_order : Having_clause Order_by_clause_limit",
"Opt_having_order : Having_clause",
"Opt_having_order : Order_by_clause_limit",
"Order_by_clause_limit : Order_by_clause Limit_clause",
"Order_by_clause_limit : Order_by_clause",
"Order_by_clause_limit : Limit_clause",
"Limit_clause : TK_LIMIT Intnum",
"Group_by_clause : TK_GROUP TK_BY Group_by_ref_list_Ini",
"Group_by_ref_list_Ini : Column_ref_list",
"Column_ref_list : Column_ref_pre",
"Column_ref_list : Column_ref_pre ',' Column_ref_list",
"Column_ref_pre : Group_by_Scalar_exp",
"Group_by_Scalar_exp : Group_by_Scalar_term",
"Group_by_Scalar_exp : Group_by_Scalar_term '+' Group_by_Scalar_exp",
"Group_by_Scalar_exp : Group_by_Scalar_term '-' Group_by_Scalar_exp",
"Group_by_Scalar_term : Group_by_concatenation_op",
"Group_by_Scalar_term : Group_by_concatenation_op '*' Group_by_Scalar_term",
"Group_by_Scalar_term : Group_by_concatenation_op '/' Group_by_Scalar_term",
"Group_by_concatenation_op : Group_by_Scalar_factor_unary_op",
"Group_by_concatenation_op : Group_by_Scalar_factor_unary_op TK_VERTBAR Group_by_concatenation_op",
"Group_by_Scalar_factor_unary_op : '+' Group_by_Scalar_factor",
"Group_by_Scalar_factor_unary_op : '-' Group_by_Scalar_factor",
"Group_by_Scalar_factor_unary_op : Group_by_Scalar_factor",
"Group_by_Scalar_factor : Column_ref",
"Group_by_Scalar_factor : '(' Group_by_Scalar_exp ')'",
"Group_by_Scalar_factor : Literal",
"Order_by_clause : TK_ORDER TK_BY Ordering_spec_list",
"Ordering_spec_list : Ordering_spec_ini",
"Ordering_spec_list : Ordering_spec_ini ',' Ordering_spec_list",
"Ordering_spec_ini : Ordering_spec",
"Ordering_spec : Intnum",
"Ordering_spec : Intnum Asc_desc",
"Ordering_spec : Order_by_column_ref",
"Ordering_spec : Order_by_column_ref Asc_desc",
"Asc_desc : TK_ASC",
"Asc_desc : TK_DESC",
"Order_by_column_ref : Name",
"Order_by_column_ref : Name '.' Wildcard",
"Order_by_column_ref : Name '.' Name",
"From_clause : TK_FROM Table_ref_list",
"Table_ref_list : Table_ref",
"Table_ref_list : Table_ref ',' Table_ref_list",
"Table_ref : Table",
"Table_ref : '(' From_subquery ')'",
"Table_ref : '(' From_subquery ')' Name",
"Table_ref : '(' From_subquery ')' TK_AS Name",
"Table_ref : '(' From_subquery ')' '(' Name_list ')'",
"Table_ref : '(' From_subquery ')' Name '(' Name_list ')'",
"Table_ref : '(' From_subquery ')' TK_AS Name '(' Name_list ')'",
"Table : Q_table",
"Table : Q_table Name",
"Table : Q_table TK_AS Name",
"Q_table : Name",
"Q_table : Name '.' Name",
"Q_table : Name '.' Name '.' Name",
"From_subquery : From_subquery_ini Selection Select_tail",
"From_subquery_ini : TK_SELECT",
"Name_list : Name",
"Name_list : Name ',' Name_list",
"Where_clause : TK_WHERE Where_condition",
"Where_condition : Where_term",
"Where_condition : Where_term TK_OR Where_condition",
"Where_term : Where_Not_tag",
"Where_term : Where_Not_tag TK_AND Where_term",
"Where_Not_tag : Where_Predicate",
"Where_Not_tag : Not_ini Where_Predicate",
"Where_Predicate : Test_for_null",
"Where_Predicate : Existence_test",
"Where_Predicate : Where_relational_exp",
"Where_relational_exp : Where_scalar_exp",
"Where_relational_exp : Where_scalar_exp Comparison Where_Relational_rvalue",
"Where_relational_exp : Where_Relational_predicate",
"Where_Relational_rvalue : Where_scalar_exp",
"Where_Relational_rvalue : Any_all_some '(' Subquery ')'",
"Where_Relational_rvalue : '(' Subquery ')'",
"Where_scalar_exp : Where_scalar_term",
"Where_scalar_exp : Where_scalar_term '+' Where_scalar_exp",
"Where_scalar_exp : Where_scalar_term '-' Where_scalar_exp",
"Where_scalar_term : Where_concatenation_op",
"Where_scalar_term : Where_concatenation_op '*' Where_scalar_term",
"Where_scalar_term : Where_concatenation_op '/' Where_scalar_term",
"Where_concatenation_op : Where_scalar_factor_unary_op",
"Where_concatenation_op : Where_scalar_factor_unary_op TK_VERTBAR Where_concatenation_op",
"Where_scalar_factor_unary_op : Where_scalar_factor",
"Where_scalar_factor_unary_op : '-' Where_scalar_factor",
"Where_scalar_factor_unary_op : '+' Where_scalar_factor",
"Where_scalar_factor : Column_ref",
"Where_scalar_factor : '(' Where_condition ')'",
"Where_scalar_factor : Literal",
"Where_scalar_factor : Numeric_value_function",
"Where_scalar_factor : String_value_function",
"Where_Relational_predicate : Where_Between_predicate",
"Where_Relational_predicate : Where_Like_predicate",
"Where_Relational_predicate : Where_in_predicate",
"Where_Between_predicate : Where_scalar_exp TK_BETWEEN Where_scalar_exp TK_AND Where_scalar_exp",
"Where_Between_predicate : Where_scalar_exp TK_NOT TK_BETWEEN Where_scalar_exp TK_AND Where_scalar_exp",
"Where_Like_predicate : Where_scalar_exp TK_LIKE Where_scalar_exp",
"Where_Like_predicate : Where_scalar_exp TK_LIKE Where_scalar_exp Where_escape",
"Where_Like_predicate : Where_scalar_exp TK_NOT TK_LIKE Where_scalar_exp",
"Where_Like_predicate : Where_scalar_exp TK_NOT TK_LIKE Where_scalar_exp Where_escape",
"Where_escape : TK_ESCAPE Column_ref",
"Where_escape : TK_ESCAPE Literal",
"Existence_test : TK_EXISTS '(' Subquery ')'",
"Where_in_predicate : Where_scalar_exp TK_IN '(' Subquery_ini Selection Select_tail ')'",
"Where_in_predicate : Where_scalar_exp TK_NOT TK_IN '(' Subquery_ini Selection Select_tail ')'",
"Where_in_predicate : Where_scalar_exp TK_IN '(' In_value_list ')'",
"Where_in_predicate : Where_scalar_exp TK_NOT TK_IN '(' In_value_list ')'",
"In_value_list : Where_scalar_exp",
"In_value_list : Where_scalar_exp ',' In_value_list",
"Having_clause : Having_clause_ini Scalar_condition",
"Having_clause_ini : TK_HAVING",
"Test_for_null : Column_ref TK_IS TK_NULL",
"Test_for_null : Column_ref TK_IS TK_NOT TK_NULL",
"Comparison : '='",
"Comparison : TK_DIFERENTE",
"Comparison : '<'",
"Comparison : '>'",
"Comparison : TK_MENOR_IG",
"Comparison : TK_MAIOR_IG",
"Search_escape : TK_ESCAPE Column_ref",
"Search_escape : TK_ESCAPE Literal",
"Subquery : Subquery_ini Selection Select_tail",
"Subquery_ini : TK_SELECT",
};

//#line 4449 "sql.y"

  private Logger logger = Logger.getLogger(Parser.class);
  public int line;
  public int column;
  private Yylex lexer;
  private int subqueryLevel = 0;
  private int fromSubqueryLevel = 0;
  private int onlyText = 0;
  private int notExists = 0;
  private int havingCase = 0;
  private int qvpCount = 0;
  private boolean isPartitionable = true;
  private boolean isFromClauseInnerSelect = false;
  private int isSelectExp = 0;
  private int isFunctionParameter = 0;
  private int selectAggregationFunctionCount = 0;
  private ColumnIndex qvpColumnCount = new ColumnIndex(-1);
  private ArrayList <Boolean> existsAggregationSelect = new ArrayList<Boolean>(0);
  private boolean columnsNotInGroupError = false;
  private String  columnsNotInGroup = "";
  private String limitText = "";
  private String vpQuery;
  private String allOrDistinct;
  private String subqueryVpa;
  private String vpTable;
  private String vpAttribute;
  private String error;
  private String inQuery;
  private ArrayList <String> groupByTextList = new ArrayList<String>(0);
  private Object[] groupByList = new Object[0]; //tabelas da clausula group by
  private ArrayList <String> orderByTextList = new ArrayList<String>(0);
  private ArrayList <ArrayList<String>> groupByLevelList = new ArrayList<ArrayList<String>>(0);
  private ArrayList <ArrayList<String>> selectAliasLevelList = new ArrayList<ArrayList<String>>(0);
  private OrderByRef[] orderByIndexList = new OrderByRef[0]; //tabelas da clausula order by
  private ArrayList <OrderByRef> orderByIndexListTemp = new ArrayList<OrderByRef>(0);
  private ArrayList <Tokens> qColumnsList = new ArrayList<Tokens>(0);    //lista de colunas do select de q
  private ArrayList <Column> qvpColumnsList = new ArrayList<Column>(0);    //lista de colunas do select de qvp
  private ArrayList <Column> qvpColumnsListTemp = new ArrayList<Column>(0);    //lista de colunas do select de qvp
  private ArrayList <ArrayList<Table>> fromTableAlias = new ArrayList<ArrayList<Table>>(0);
  private ArrayList <String> selectTextList = new ArrayList<String>(0);
  private ArrayList <Object> selectCompColumn = new ArrayList<Object>(0);
  private ArrayList <Object[]> selectCompTemp = new ArrayList <Object[]>(0);
  private Object[][] selectCompositor = new Object[0][0];
  private ArrayList <String> selectCompositorText = new ArrayList<String>(0);
  private Object[] havingCompositor = new Object[0];
  private String havingCompositorText;
  private ArrayList<String> aliasTextList = new ArrayList<String>(0);
  private ArrayList<String> whereAttList = new ArrayList<String>(0);
  private PargresDatabaseMetaData meta;
  ArrayList<Range> rangeList;

  private int[][] plusOrMinusResultType =
  {     	  /*NONE*/    /*CHAR*/     /*CSTR*/   /*VARCHAR*/ /*LONGVARCHAR*/ /*DOUB*/      /*CDOUB*/   	    /*DECIMAL*/    /*NUMERIC*/    /*FLOAT*/       /*REAL*/      /*INT*/    	    /*CINT*/             /*SMALLINT*/     /*TINYINT*/    	/*BIGINT*/ 	    /*DATE*/    /*CDAT*/   	      /*TIME*/    /*CTIM*/    	/*TIMESTAMP*/    /*BOOL*/    /*CBOO*/    /*NULL*/       /*CNUL*/    	    /*WILD*/
/*NONE*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,   Const.NONE,   	    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,   Const.NONE,	    Const.NONE,	   	 Const.NONE,      Const.NONE,    	Const.NONE,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE}, /*NONE*/
/*CHAR*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,   Const.NONE,   	    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,   Const.NONE,	    Const.NONE,          Const.NONE,      Const.NONE,    	Const.NONE,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE}, /*CHAR*/
/*CSTR*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,   Const.NONE,         Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,   Const.NONE,	    Const.NONE,          Const.NONE,      Const.NONE,    	Const.NONE,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE}, /*CSTR*/
/*VARCHAR*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,   Const.NONE,    	    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,   Const.NONE,	    Const.NONE,          Const.NONE,      Const.NONE,    	Const.NONE,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE}, /*VARCHAR*/
/*LONGVARCHAR*/  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,   Const.NONE,	    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,   Const.NONE,	    Const.NONE,          Const.NONE,      Const.NONE,    	Const.NONE,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE}, /*LONGVARCHAR*/
/*DOUB*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.DOUBLE, Const.DOUBLE,       Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,   Const.DOUBLE, Const.DOUBLE,  	    Const.DOUBLE,	 Const.DOUBLE,    Const.DOUBLE,  	Const.DOUBLE,       Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.DOUBLE,  Const.DOUBLE, 	    Const.NONE}, /*DOUB*/
/*CDOUB*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.DOUBLE, Const.CONST_DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,   Const.DOUBLE, Const.DOUBLE,       Const.CONST_DOUBLE,  Const.DOUBLE,    Const.DOUBLE,  	Const.DOUBLE,  	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.DOUBLE,  Const.CONST_DOUBLE,  Const.NONE}, /*CDOUB*/
/*DECIMAL*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.DOUBLE, Const.DOUBLE,       Const.DECIMAL, Const.DECIMAL, Const.DOUBLE,   Const.DOUBLE, Const.DOUBLE,       Const.DOUBLE,	 Const.DOUBLE,    Const.DOUBLE,  	Const.DOUBLE,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.DECIMAL, Const.DECIMAL, 	    Const.NONE}, /*DECIMAL*/
/*NUMERIC*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.DOUBLE, Const.DOUBLE,       Const.DECIMAL, Const.DECIMAL, Const.DOUBLE,   Const.DOUBLE, Const.DOUBLE,       Const.DOUBLE,	 Const.DOUBLE,    Const.DOUBLE,  	Const.DOUBLE,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NUMERIC, Const.NUMERIC, 	    Const.NONE}, /*NUMERIC*/
/*FLOAT*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.DOUBLE, Const.DOUBLE,       Const.DOUBLE,  Const.DOUBLE,  Const.FLOAT,    Const.DOUBLE, Const.FLOAT,        Const.FLOAT,	 Const.FLOAT,     Const.FLOAT,   	Const.DOUBLE,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.FLOAT,   Const.FLOAT, 	    Const.NONE}, /*FLOAT*/
/*REAL*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.DOUBLE, Const.DOUBLE,       Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,   Const.REAL,   Const.REAL,	    Const.REAL,	   	 Const.REAL,      Const.REAL,    	Const.DOUBLE,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.REAL,    Const.REAL, 	    Const.NONE}, /*REAL*/
/*INT*/ 	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.DOUBLE, Const.DOUBLE, 	    Const.DOUBLE,  Const.DOUBLE,  Const.FLOAT,    Const.REAL,   Const.INTEGER,      Const.INTEGER,	 Const.INTEGER,   Const.INTEGER, 	Const.BIGINT,	    Const.DATE, Const.DATE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.INTEGER, Const.INTEGER,       Const.NONE}, /*INT*/
/*CINT*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.DOUBLE, Const.CONST_DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.FLOAT,    Const.REAL,   Const.INTEGER,      Const.CONST_INTEGER, Const.INTEGER,   Const.INTEGER, 	Const.BIGINT,	    Const.DATE, Const.CONST_DATE,     Const.NONE, Const.NONE,   Const.NONE, 	Const.NONE, Const.NONE, Const.INTEGER, Const.CONST_INTEGER, Const.NONE}, /*CINT*/
/*SMALLINT*/ 	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.DOUBLE, Const.DOUBLE, 	    Const.DOUBLE,  Const.DOUBLE,  Const.FLOAT,    Const.REAL,   Const.INTEGER,      Const.INTEGER,	 Const.SMALLINT,  Const.SMALLINT,	Const.BIGINT,	    Const.DATE, Const.DATE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.SMALLINT,Const.SMALLINT,      Const.NONE}, /*SMALLINT*/
/*TINYINT*/ 	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.DOUBLE, Const.DOUBLE, 	    Const.DOUBLE,  Const.DOUBLE,  Const.FLOAT,    Const.REAL,   Const.INTEGER,      Const.INTEGER,	 Const.SMALLINT,  Const.TINYINT, 	Const.BIGINT,	    Const.DATE, Const.DATE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.TINYINT, Const.TINYINT,       Const.NONE}, /*TINYINT*/
/*BIGINT*/ 	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.DOUBLE, Const.DOUBLE, 	    Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,   Const.DOUBLE, Const.BIGINT,       Const.BIGINT,	 Const.BIGINT,    Const.BIGINT,  	Const.BIGINT,	    Const.DATE, Const.DATE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.BIGINT,  Const.BIGINT,        Const.NONE}, /*BIGINT*/
/*DATE*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,   Const.NONE, 	    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,   Const.DATE,	    Const.DATE,	   	 Const.DATE,      Const.DATE,    	Const.DATE,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE}, /*DATE*/
/*CDAT*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,   Const.NONE, 	    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,   Const.DATE,	    Const.CONST_DATE,    Const.DATE,      Const.DATE,    	Const.DATE,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE}, /*CDAT*/
/*TIME*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,   Const.NONE, 	    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,   Const.TIME,	    Const.TIME,	  	 Const.TIME,      Const.TIME,    	Const.TIME,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE}, /*TIME*/
/*CTIM*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,   Const.NONE, 	    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,   Const.TIME,	    Const.CONST_TIME,    Const.TIME,      Const.TIME,    	Const.TIME,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE}, /*CTIM*/
/*TIMESTAMP*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,   Const.NONE, 	    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,   Const.TIMESTAMP,    Const.TIMESTAMP,	 Const.TIMESTAMP, Const.TIMESTAMP,      Const.TIMESTAMP,    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE}, /*TIMESTAMP*/
/*BOOL*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,   Const.NONE, 	    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,   Const.NONE,	    Const.NONE,          Const.NONE,      Const.NONE,    	Const.NONE,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE}, /*BOOL*/
/*CBOO*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,   Const.NONE, 	    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,   Const.NONE,	    Const.NONE, 	 Const.NONE,      Const.NONE,    	Const.NONE,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE}, /*CBOO*/
/*NULL*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.DOUBLE, Const.DOUBLE, 	    Const.DECIMAL, Const.NUMERIC, Const.FLOAT,    Const.REAL,   Const.INTEGER,      Const.INTEGER,       Const.SMALLINT,  Const.TINYINT, 	Const.BIGINT, 	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE}, /*NULL*/
/*CNUL*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.DOUBLE, Const.CONST_DOUBLE, Const.DECIMAL, Const.NUMERIC, Const.FLOAT,    Const.REAL,   Const.INTEGER,      Const.CONST_INTEGER, Const.SMALLINT,  Const.TINYINT, 	Const.BIGINT,	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE}, /*CNUL*/
/*WILD*/	 {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,   Const.NONE, 	    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,   Const.NONE,         Const.NONE,          Const.NONE,      Const.NONE,    	Const.NONE,   	    Const.NONE, Const.NONE,	      Const.NONE, Const.NONE, 	Const.NONE, 	Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	    Const.NONE} /*WILD*/
   };

  private int[][] multiplicationResultType =
    {   	   /*NONE*/    /*CHAR*/     /*CSTR*/   /*VARCHAR*/ /*LONGVARCHAR*/  /*DOUB*/      /*CDOUB*/   		 /*DECIMAL*/   /*NUMERIC*/   /*FLOAT*/     /*REAL*/      /*INT*/        /*CINT*/             /*SMALLINT*/    /*TINYINT*/     /*BIGINT*/     /*DATE*/    /*CDAT*/    /*TIME*/    /*CTIM*/     /*TIMESTAMP*/   /*BOOL*/    /*CBOO*/    /*NULL*/        /*CNUL*/    	   /*WILD*/
/*NONE*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,   Const.NONE, 		 Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE, 	     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE, 	   Const.NONE}, /*NONE*/
/*CHAR*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,   Const.NONE, 	 	 Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE, 	     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE, 	   Const.NONE}, /*CHAR*/
/*CSTR*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,   Const.NONE, 	 	 Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE, 	     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE, 	   Const.NONE}, /*CSTR*/
/*VARCHAR*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,   Const.NONE, 	 	 Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE, 	     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE, 	   Const.NONE}, /*VARCHAR*/
/*LONGVARCHAR*/   {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,   Const.NONE, 	         Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE, 	     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE, 	   Const.NONE}, /*LONGVARCHAR*/
/*DOUB*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	 Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE, 	     Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.DOUBLE,   Const.DOUBLE,         Const.NONE}, /*DOUB*/
/*CDOUB*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.CONST_DOUBLE,    Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.CONST_DOUBLE,  Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.DOUBLE,   Const.CONST_DOUBLE,   Const.NONE}, /*CDOUB*/
/*DECIMAL*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	 Const.DECIMAL,Const.DECIMAL,Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE, 	     Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.DECIMAL,  Const.DECIMAL,        Const.NONE}, /*DECIMAL*/
/*NUMERIC*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	 Const.DECIMAL,Const.DECIMAL,Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE, 	     Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NUMERIC,  Const.NUMERIC,        Const.NONE}, /*NUMERIC*/
/*FLOAT*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	 Const.DOUBLE, Const.DOUBLE, Const.FLOAT,  Const.DOUBLE, Const.FLOAT,   Const.FLOAT, 	     Const.FLOAT,    Const.FLOAT,    Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.FLOAT,    Const.FLOAT,          Const.NONE}, /*FLOAT*/
/*REAL*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	 Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.REAL,   Const.REAL,    Const.REAL, 	     Const.REAL,     Const.REAL,     Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.REAL,     Const.REAL,           Const.NONE}, /*REAL*/
/*INT*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	 Const.DOUBLE, Const.DOUBLE, Const.FLOAT,  Const.REAL,   Const.INTEGER, Const.INTEGER, 	     Const.INTEGER,  Const.INTEGER,  Const.INTEGER, Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.INTEGER,  Const.INTEGER,        Const.NONE}, /*INT*/
/*CINT*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.CONST_DOUBLE,    Const.DOUBLE, Const.DOUBLE, Const.FLOAT,  Const.REAL,   Const.INTEGER, Const.CONST_INTEGER, Const.INTEGER,  Const.INTEGER,  Const.INTEGER, Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.INTEGER,  Const.CONST_INTEGER,  Const.NONE}, /*CINT*/
/*SMALLINT*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	 Const.DOUBLE, Const.DOUBLE, Const.FLOAT,  Const.REAL,   Const.INTEGER, Const.INTEGER, 	     Const.SMALLINT, Const.SMALLINT, Const.INTEGER, Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.SMALLINT, Const.SMALLINT,       Const.NONE}, /*SMALLINT*/
/*TINYINT*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	 Const.DOUBLE, Const.DOUBLE, Const.FLOAT,  Const.REAL,   Const.INTEGER, Const.INTEGER, 	     Const.SMALLINT, Const.TINYINT,  Const.INTEGER, Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.TINYINT,  Const.TINYINT,        Const.NONE}, /*TINYINT*/
/*BIGINT*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	 Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.BIGINT,  Const.BIGINT, 	     Const.BIGINT,   Const.BIGINT,   Const.INTEGER, Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.BIGINT,   Const.BIGINT,         Const.NONE}, /*BIGINT*/
/*DATE*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,   Const.NONE, 		 Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE, 	     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE,           Const.NONE}, /*DATE*/
/*CDAT*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,   Const.NONE, 		 Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,	     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE, 	   Const.NONE}, /*CDAT*/
/*TIME*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,   Const.NONE, 		 Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,	     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE, 	   Const.NONE}, /*TIME*/
/*CTIM*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,   Const.NONE, 		 Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,   	     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE, 	   Const.NONE}, /*CTIM*/
/*TIMESTAMP*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,   Const.NONE, 		 Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,	     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE, 	   Const.NONE}, /*TIMESTAMP*/
/*BOOL*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,   Const.NONE, 		 Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,	     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE, 	   Const.NONE}, /*BOOL*/
/*CBOO*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,   Const.NONE, 		 Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,	     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE, 	   Const.NONE}, /*CBOO*/
/*NULL*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	 Const.DECIMAL,Const.NUMERIC,Const.FLOAT,  Const.REAL,   Const.INTEGER, Const.INTEGER,       Const.SMALLINT, Const.TINYINT,  Const.BIGINT,  Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE, 	   Const.NONE}, /*NULL*/
/*CNUL*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.CONST_DOUBLE,    Const.DECIMAL,Const.NUMERIC,Const.FLOAT,  Const.REAL,   Const.INTEGER, Const.CONST_INTEGER, Const.SMALLINT, Const.TINYINT,  Const.BIGINT,  Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE, 	   Const.NONE}, /*CNUL*/
/*WILD*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,   Const.NONE, 		 Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,          Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,     Const.NONE, Const.NONE, Const.NONE,     Const.NONE, 	   Const.NONE}  /*WILD*/
   };

  private int[][] divisionResultType =
    {   	    /*NONE*/    /*CHAR*/     /*CSTR*/  /*VARCHAR*/     /*LONGVARCHAR*/  /*DOUB*/      /*CDOUB*/   	  /*DECIMAL*/   /*NUMERIC*/   /*FLOAT*/     /*REAL*/      /*INT*/        	/*CINT*/              /*SMALLINT*/   /*TINYINT*/    /*BIGINT*/     /*DATE*/    /*CDAT*/    /*TIME*/    /*CTIM*/    /*TIMESTAMP*/  /*BOOL*/    /*CBOO*/    /*NULL*/       /*CNUL*/    	      /*WILD*/
/*NONE*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.NONE,   Const.NONE, 	  Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    	Const.NONE,	      Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	      Const.NONE}, /*NONE*/
/*CHAR*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.NONE,   Const.NONE, 	  Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    	Const.NONE,	      Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	      Const.NONE}, /*CHAR*/
/*CSTR*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.NONE,   Const.NONE, 	  Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    	Const.NONE,	      Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	      Const.NONE}, /*CSTR*/
/*VARCHAR*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.NONE,   Const.NONE, 	  Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    	Const.NONE,	      Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	      Const.NONE}, /*VARCHAR*/
/*LONGVARCHAR*/   {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.NONE,   Const.NONE, 	  Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    	Const.NONE,	      Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	      Const.NONE}, /*LONGVARCHAR*/
/*DOUB*/  	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	  Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  	Const.DOUBLE,	      Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.DOUBLE,  Const.DOUBLE,        Const.NONE}, /*DOUB*/
/*CDOUB*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.DOUBLE, Const.CONST_DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  	Const.CONST_DOUBLE,   Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.DOUBLE,  Const.CONST_DOUBLE,  Const.NONE}, /*CDOUB*/
/*DECIMAL*/  	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	  Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  	Const.DOUBLE,	      Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.DOUBLE,  Const.DOUBLE,        Const.NONE}, /*DECIMAL*/
/*NUMERIC*/  	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	  Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  	Const.DOUBLE,	      Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.DOUBLE,  Const.DOUBLE,        Const.NONE}, /*NUMERIC*/
/*FLOAT*/  	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	  Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  	Const.DOUBLE,	      Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.DOUBLE,  Const.DOUBLE,        Const.NONE}, /*FLOAT*/
/*REAL*/  	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	  Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  	Const.DOUBLE,	      Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.DOUBLE,  Const.DOUBLE,	      Const.NONE}, /*REAL*/
/*INT*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	  Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  	Const.DOUBLE,	      Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.DOUBLE,  Const.DOUBLE,        Const.NONE}, /*INT*/
/*CINT*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.DOUBLE, Const.CONST_DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  	Const.CONST_DOUBLE,   Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.DOUBLE,  Const.CONST_DOUBLE,  Const.NONE}, /*CINT*/
/*SMALLINT*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	  Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  	Const.DOUBLE,	      Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.DOUBLE,  Const.DOUBLE,        Const.NONE}, /*SMALLINT*/
/*TINYINT*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	  Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  	Const.DOUBLE,	      Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.DOUBLE,  Const.DOUBLE,        Const.NONE}, /*TINYINT*/
/*BIGINT*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	  Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  	Const.DOUBLE,	      Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.DOUBLE,  Const.DOUBLE,        Const.NONE}, /*BIGINT*/
/*DATE*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.NONE,   Const.NONE, 	  Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    	Const.NONE, 	      Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE,          Const.NONE}, /*DATE*/
/*CDAT*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.NONE,   Const.NONE, 	  Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    	Const.NONE, 	      Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	      Const.NONE}, /*CDAT*/
/*TIME*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.NONE,   Const.NONE, 	  Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    	Const.NONE, 	      Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	      Const.NONE}, /*TIME*/
/*CTIM*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.NONE,   Const.NONE, 	  Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    	Const.NONE, 	      Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	      Const.NONE}, /*CTIM*/
/*TIMESTAMP*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.NONE,   Const.NONE, 	  Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    	Const.NONE, 	      Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	      Const.NONE}, /*TIMESTAMP*/
/*BOOL*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.NONE,   Const.NONE, 	  Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    	Const.NONE,	      Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	      Const.NONE}, /*BOOL*/
/*CBOO*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.NONE,   Const.NONE, 	  Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE, 	  	Const.NONE,	      Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	      Const.NONE}, /*CBOO*/
/*NULL*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.DOUBLE, Const.DOUBLE, 	  Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, 	Const.DOUBLE,         Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	      Const.NONE}, /*NULL*/
/*CNUL*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.DOUBLE, Const.CONST_DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,         Const.CONST_DOUBLE,   Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	      Const.NONE}, /*CNUL*/
/*WILD*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE,      Const.NONE,   Const.NONE, 	  Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    	Const.NONE,           Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE,    Const.NONE, 	      Const.NONE}  /*WILD*/
   };

   private int[] signResultType =
       /*NONE*/    /*CHAR*/     /*CSTR*/   /*VARCHAR*/ /*LONGVARCHAR*/  /*DOUB*/      /*CDOUB*/   	  /*DECIMAL*/    /*NUMERIC*/    /*FLOAT*/     /*REAL*/      /*INT*/        /*CINT*/             /*SMALLINT*/    /*TINYINT*/    /*BIGINT*/     /*DATE*/    /*CDAT*/    /*TIME*/    /*CTIM*/    /*TIMESTAMP*/    /*BOOL*/    /*CBOO*/    /*NULL*/    /*CNUL*/    /*WILD*/
      {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.CONST_DOUBLE, Const.DECIMAL, Const.NUMERIC, Const.FLOAT,  Const.REAL,   Const.INTEGER, Const.CONST_INTEGER, Const.SMALLINT, Const.TINYINT, Const.BIGINT,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE};

   private int[] avgResultType  =
       /*NONE*/    /*CHAR*/     /*CSTR*/   /*VARCHAR*/ /*LONGVARCHAR*/ /*DOUB*/      /*CDOUB*/     /*DECIMAL*/   /*NUMERIC*/   /*FLOAT*/     /*REAL*/      /*INT*/       /*CINT*/      /*SMALLINT*/  /*TINYINT*/   /*BIGINT*/    /*DATE*/    /*CDAT*/    /*TIME*/    /*CTIM*/    /*TIMESTAMP*/    /*BOOL*/    /*CBOO*/    /*NULL*/    /*CNUL*/    /*WILD*/
      {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE};

   private int[] sumResultType  =
       /*NONE*/    /*CHAR*/     /*CSTR*/   /*VARCHAR*/ /*LONGVARCHAR*/  /*DOUB*/      /*CDOUB*/     /*DECIMAL*/   /*NUMERIC*/   /*FLOAT*/     /*REAL*/      /*INT*/        /*CINT*/       /*SMALLINT*/   /*TINYINT*/    /*BIGINT*/     /*DATE*/    /*CDAT*/    /*TIME*/    /*CTIM*/    /*TIMESTAMP*/    /*BOOL*/    /*CBOO*/    /*NULL*/    /*CNUL*/    /*WILD*/
      {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.BIGINT, Const.BIGINT,   Const.BIGINT,  Const.BIGINT,  Const.BIGINT,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE};

   private int[] countResultType  =
       /*NONE*/    /*CHAR*/      /*CSTR*/      /*VARCHAR*/    /*LONGVARCHAR*/ /*DOUB*/      /*CDOUB*/     /*DECIMAL*/   /*NUMERIC*/   /*FLOAT*/     /*REAL*/      /*INT*/       /*CINT*/      /*SMALLINT*/  /*TINYINT*/   /*BIGINT*/    /*DATE*/      /*CDAT*/      /*TIME*/      /*CTIM*/      /*TIMESTAMP*/ /*BOOL*/      /*CBOO*/      /*NULL*/      /*CNUL*/      /*WILD*/
      {Const.NONE, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT,    Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT, Const.BIGINT};

   private int[] minResultType  =
       /*NONE*/    /*CHAR*/        /*CSTR*/      /*VARCHAR*/    /*LONGVARCHAR*/       /*DOUB*/      /*CDOUB*/     /*DECIMAL*/    /*NUMERIC*/    /*FLOAT*/     /*REAL*/      /*INT*/        /*CINT*/       /*SMALLINT*/    /*TINYINT*/    /*BIGINT*/     /*DATE*/    /*CDAT*/    /*TIME*/    /*CTIM*/    /*TIMESTAMP*/      /*BOOL*/    /*CBOO*/    /*NULL*/       /*CNUL*/       /*WILD*/
      {Const.NONE, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.LONGVARCHAR,    Const.DOUBLE, Const.DOUBLE, Const.DECIMAL, Const.NUMERIC, Const.FLOAT,  Const.REAL,   Const.INTEGER, Const.INTEGER, Const.SMALLINT, Const.TINYINT, Const.BIGINT,  Const.DATE, Const.DATE, Const.TIME, Const.TIME, Const.TIMESTAMP,   Const.NONE, Const.NONE, Const.VARCHAR, Const.VARCHAR, Const.NONE};

   private int[] maxResultType  =
       /*NONE*/    /*CHAR*/         /*CSTR*/     /*VARCHAR*/    /*LONGVARCHAR*/       /*DOUB*/      /*CDOUB*/     /*DECIMAL*/    /*NUMERIC*/    /*FLOAT*/     /*REAL*/      /*INT*/        /*CINT*/       /*SMALLINT*/    /*TINYINT*/    /*BIGINT*/     /*DATE*/    /*CDAT*/       /*TIME*/    /*CTIM*/     /*TIMESTAMP*/       /*BOOL*/    /*CBOO*/    /*NULL*/       /*CNUL*/       /*WILD*/
      {Const.NONE, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.LONGVARCHAR,    Const.DOUBLE, Const.DOUBLE, Const.DECIMAL, Const.NUMERIC, Const.FLOAT,  Const.REAL,  Const.INTEGER, Const.INTEGER, Const.SMALLINT, Const.TINYINT, Const.BIGINT,  Const.DATE, Const.DATE,    Const.TIME, Const.TIME,  Const.TIMESTAMP,    Const.NONE, Const.NONE, Const.VARCHAR, Const.VARCHAR, Const.NONE};

   private int[] extractResultType =
       /*NONE*/     /*CHAR*/     /*CSTR*/     /*VARCHAR*/  /*LONGVARCHAR*/  /*DOUB*/     /*CDOUB*/    /*DECIMAL*/  /*NUMERIC*/  /*FLOAT*/    /*REAL*/      /*INT*/      /*CINT*/     /*SMALLINT*/  /*TINYINT*/  /*BIGINT*/   /*DATE*/       /*CDAT*/             /*TIME*/       /*CTIM*/             /*TIMESTAMP*/  /*BOOL*/     /*CBOO*/     /*NULL*/     /*CNUL*/     /*WILD*/
      {Const.NONE,  Const.NONE,  Const.NONE,  Const.NONE,  Const.NONE,      Const.NONE,  Const.NONE,  Const.NONE,  Const.NONE,  Const.NONE,  Const.NONE,   Const.NONE,  Const.NONE,  Const.NONE,   Const.NONE,  Const.NONE,  Const.DOUBLE,  Const.CONST_DOUBLE,  Const.DOUBLE,  Const.CONST_DOUBLE,  Const.DOUBLE,  Const.NONE,  Const.NONE,  Const.NONE,  Const.NONE,  Const.NONE};

  private int[][] logicOpResultType =
   {    	   /*NONE*/    /*CHAR*/     /*CSTR*/   /*VARCHAR*/ /*LONGVARCHAR*/ /*DOUB*/    /*CDOUB*/   /*DECIMAL*/ /*NUMERIC*/ /*FLOAT*/   /*REAL*/    /*INT*/     /*CINT*/    /*SMALLINT*/   /*TINYINT*/    /*BIGINT*/    /*DATE*/    /*CDAT*/    /*TIME*/    /*CTIM*/    /*TIMESTAMP*/     /*BOOL*/       /*CBOO*/    	       /*NULL*/       /*CNUL*/    	   /*WILD*/
/*NONE*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*NONE*/
/*CHAR*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*CHAR*/
/*CSTR*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*CSTR*/
/*VARCHAR*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*VARCHAR*/
/*LONGVARCHAR*/   {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*LONGVARCHAR*/
/*DOUB*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*DOUB*/
/*CDOUB*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*CDOUB*/
/*DECIMAL*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*DECIMAL*/
/*NUMERIC*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*NUMERIC*/
/*FLOAT*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*FLOAT*/
/*REAL*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*REAL*/
/*INT*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*INT*/
/*CINT*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*CINT*/
/*SMALLINT*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*SMALLINT*/
/*TINYINT*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*TINYINT*/
/*BIGINT*/ 	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE,	   Const.NONE}, /*BIGINT*/
/*DATE*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE, 	       Const.NONE,    Const.NONE, 	   Const.NONE}, /*DATE*/
/*CDAT*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE,	       Const.NONE,    Const.NONE, 	   Const.NONE}, /*CDAT*/
/*TIME*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE,	       Const.NONE,    Const.NONE,          Const.NONE}, /*TIME*/
/*CTIM*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE,             Const.NONE,    Const.NONE,          Const.NONE}, /*CTIM*/
/*TIMESTAMP*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE,	       Const.NONE,    Const.NONE,          Const.NONE}, /*TIMESTAMP*/
/*BOOL*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.BOOLEAN, Const.BOOLEAN,          Const.BOOLEAN, Const.BOOLEAN,       Const.NONE}, /*BOOL*/
/*CBOO*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.BOOLEAN, Const.CONST_BOOLEAN,    Const.BOOLEAN, Const.CONST_BOOLEAN, Const.NONE}, /*CBOO*/
/*NULL*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.BOOLEAN, Const.BOOLEAN,          Const.BOOLEAN, Const.BOOLEAN,       Const.NONE}, /*NULL*/
/*CNUL*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.BOOLEAN, Const.CONST_BOOLEAN,    Const.BOOLEAN, Const.BOOLEAN,       Const.NONE}, /*CNUL*/
/*WILD*/	  {Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,     Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, 	Const.NONE,    Const.NONE,             Const.NONE,    Const.NONE, 	   Const.NONE}  /*WILD*/
   };

   private int[] logicUnaryOpResultType =
      /*NONE*/   /*CHAR*/     /*CSTR*/    /*VARCHAR*/   /*LONGVARCHAR*/  /*DOUB*/    /*CDOUB*/   /*DECIMAL*/ /*NUMERIC*/ /*FLOAT*/   /*REAL*/    /*INT*/     /*CINT*/    /*SMALLINT*/ /*TINYINT*/  /*BIGINT*/  /*DATE*/    /*CDAT*/    /*TIME*/    /*CTIM*/    /*TIMESTAMP*/    /*BOOL*/       /*CBOO*/       /*NULL*/    /*CNUL*/     /*WILD*/
     {Const.NONE, Const.NONE, Const.NONE,  Const.NONE,  Const.NONE,      Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.BOOLEAN, Const.BOOLEAN, Const.NONE, Const.NONE, Const.NONE};

   private int[][] relationalOpResultType =
   {    	   /*NONE*/    /*CHAR*/        /*CSTR*/            /*VARCHAR*/    /*LONGVARCHAR*/   /*DOUB*/       /*CDOUB*/            /*DECIMAL*/    /*NUMERIC*/    /*FLOAT*/      /*REAL*/       /*INT*/        /*CINT*/      	/*SMALLINT*/   /*TINYINT*/    /*BIGINT*/     /*DATE*/       /*CDAT*/   	         /*TIME*/       /*CTIM*/       	     /*TIMESTAMP*/  /*BOOL*/       /*CBOO*/    	 	 /*NULL*/       /*CNUL*/    	        /*WILD*/
/*NONE*/	  {Const.NONE, Const.NONE,    Const.NONE,   	   Const.NONE,    Const.NONE,       Const.NONE,    Const.NONE,          Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,          Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,	         Const.NONE,    Const.NONE,	     Const.NONE,    Const.NONE,    Const.NONE, 	  	 Const.NONE,    Const.NONE, 	    	Const.NONE},/*NONE*/
/*CHAR*/	  {Const.NONE, Const.BOOLEAN, Const.BOOLEAN, 	   Const.BOOLEAN, Const.BOOLEAN,    Const.NONE,    Const.NONE,          Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,          Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,	         Const.NONE,    Const.NONE,	     Const.NONE,    Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*CHAR*/
/*CSTR*/	  {Const.NONE, Const.BOOLEAN, Const.BOOLEAN,	   Const.BOOLEAN, Const.BOOLEAN,    Const.NONE,    Const.NONE,          Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,          Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,	         Const.NONE,    Const.NONE,	     Const.NONE,    Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.CONST_BOOLEAN,    Const.NONE},/*CSTR*/
/*VARCHAR*/	  {Const.NONE, Const.BOOLEAN, Const.BOOLEAN, 	   Const.BOOLEAN, Const.BOOLEAN,    Const.NONE,    Const.NONE,          Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,          Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,	         Const.NONE,    Const.NONE,	     Const.NONE,    Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*VARCHAR*/
/*LONGVARCHAR*/   {Const.NONE, Const.BOOLEAN, Const.BOOLEAN, 	   Const.BOOLEAN, Const.BOOLEAN,    Const.NONE,    Const.NONE,          Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,          Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,	         Const.NONE,    Const.NONE,	     Const.NONE,    Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*LONGVARCHAR*/
/*DOUB*/ 	  {Const.NONE, Const.NONE,    Const.NONE, 	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*DOUB*/
/*CDOUB*/	  {Const.NONE, Const.NONE,    Const.NONE, 	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.CONST_BOOLEAN,    Const.NONE},/*CDOUB*
/*DECIMAL*/ 	  {Const.NONE, Const.NONE,    Const.NONE, 	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*DECIMAL*/
/*NUMERIC*/ 	  {Const.NONE, Const.NONE,    Const.NONE, 	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*NUMERIC*/
/*FLOAT*/ 	  {Const.NONE, Const.NONE,    Const.NONE, 	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*FLOAT*/
/*REAL*/ 	  {Const.NONE, Const.NONE,    Const.NONE, 	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*REAL*/
/*INT*/ 	  {Const.NONE, Const.NONE,    Const.NONE, 	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*INT*/
/*CINT*/	  {Const.NONE, Const.NONE,    Const.NONE, 	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.CONST_BOOLEAN,    Const.NONE},/*CINT*/
/*SMALLINT*/ 	  {Const.NONE, Const.NONE,    Const.NONE, 	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*SMALLINT*/
/*TINYINT*/ 	  {Const.NONE, Const.NONE,    Const.NONE, 	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*TINYINT*/
/*BIGINT*/ 	  {Const.NONE, Const.NONE,    Const.NONE, 	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*BIGINT*/
/*DATE*/	  {Const.NONE, Const.NONE,    Const.NONE, 	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*DATE*/
/*CDAT*/	  {Const.NONE, Const.NONE,    Const.NONE, 	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.CONST_BOOLEAN,    Const.NONE},/*CDAT*/
/*TIME*/	  {Const.NONE, Const.NONE,    Const.NONE,	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*TIME*/
/*CTIM*/	  {Const.NONE, Const.NONE,    Const.NONE,    	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.CONST_BOOLEAN,    Const.NONE},/*CTIM*/
/*TIMESTAMP*/	  {Const.NONE, Const.NONE,    Const.NONE,	   Const.NONE,    Const.NONE,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.NONE,    Const.NONE, 	 	 Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*TIMESTAMP*/
/*BOOL*/	  {Const.NONE, Const.NONE,    Const.NONE,          Const.NONE,    Const.NONE,       Const.NONE,    Const.NONE, 	        Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, 	        Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,	         Const.NONE,    Const.NONE,	     Const.NONE,    Const.BOOLEAN, Const.BOOLEAN,        Const.BOOLEAN, Const.BOOLEAN, 		Const.NONE},/*BOOL*/
/*CBOO*/	  {Const.NONE, Const.NONE,    Const.NONE,          Const.NONE,    Const.NONE,       Const.NONE,    Const.NONE,	        Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,	    	Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,	         Const.NONE,    Const.NONE,	     Const.NONE,    Const.BOOLEAN, Const.BOOLEAN,        Const.BOOLEAN, Const.CONST_BOOLEAN,    Const.NONE},/*CBOO*/
/*NULL*/	  {Const.NONE, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN,    Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN,       Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,        Const.BOOLEAN, Const.BOOLEAN,	        Const.NONE},/*NULL*/
/*CNUL*/	  {Const.NONE, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,    Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.CONST_BOOLEAN,  Const.BOOLEAN, Const.CONST_BOOLEAN,    Const.NONE},/*CNUL*/
/*WILD*/	  {Const.NONE, Const.NONE,    Const.NONE,          Const.NONE,    Const.NONE,       Const.NONE,    Const.NONE, 	        Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, 	    	Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,	         Const.NONE,    Const.NONE,	     Const.NONE,    Const.NONE,    Const.NONE,	         Const.NONE,    Const.NONE,    		Const.NONE} /*WILD*/
   };

   private int[][] nullIfResultType =
   {     	   /*NONE*/    /*CHAR*/           /*CSTR*/            /*VARCHAR*/        /*LONGVARCHAR*/       /*DOUB*/        /*CDOUB*/       /*DECIMAL*/     /*NUMERIC*/     /*FLOAT*/       /*REAL*/        /*INT*/         /*CINT*/        /*SMALLINT*/    /*TINYINT*/     /*BIGINT*/      /*DATE*/       /*CDAT*/       /*TIME*/       /*CTIM*/       /*TIMESTAMP*/  /*BOOL*/        /*CBOO*/        /*NULL*/             /*CNUL*/            /*WILD*/
/*NONE*/ 	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NONE,         Const.NONE,         Const.NONE}, /*NONE*/
/*CHAR*/ 	  {Const.NONE, Const.VARCHAR,     Const.VARCHAR,      Const.VARCHAR,     Const.VARCHAR,        Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.VARCHAR,      Const.VARCHAR,      Const.NONE}, /*CHAR*/
/*CSTR*/ 	  {Const.NONE, Const.VARCHAR,     Const.VARCHAR,      Const.VARCHAR,     Const.VARCHAR,        Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.VARCHAR,      Const.VARCHAR,      Const.NONE}, /*CSTR*/
/*VARCHAR*/	  {Const.NONE, Const.VARCHAR,     Const.VARCHAR,      Const.VARCHAR,     Const.VARCHAR,        Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.VARCHAR,      Const.VARCHAR,      Const.NONE}, /*VARCHAR*/
/*LONGVARCHAR*/   {Const.NONE, Const.LONGVARCHAR, Const.LONGVARCHAR,  Const.LONGVARCHAR, Const.LONGVARCHAR,    Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.LONGVARCHAR,  Const.LONGVARCHAR,  Const.NONE}, /*LONGVARCHAR*/
/*DOUB*/ 	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.DOUBLE,       Const.DOUBLE,       Const.NONE}, /*DOUB*/
/*CDOUB*/	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.DOUBLE,       Const.DOUBLE,       Const.NONE}, /*CDOUB*/
/*DECIMAL*/ 	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.DECIMAL,  Const.DECIMAL,  Const.DECIMAL,  Const.DECIMAL,  Const.DECIMAL,  Const.DECIMAL,  Const.DECIMAL,  Const.DECIMAL,  Const.DECIMAL,  Const.DECIMAL,  Const.DECIMAL,  Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.DECIMAL,      Const.DECIMAL,      Const.NONE}, /*DECIMAL*/
/*NUMERIC*/ 	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.NUMERIC,  Const.NUMERIC,  Const.NUMERIC,  Const.NUMERIC,  Const.NUMERIC,  Const.NUMERIC,  Const.NUMERIC,  Const.NUMERIC,  Const.NUMERIC,  Const.NUMERIC,  Const.NUMERIC,  Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NUMERIC,      Const.NUMERIC,      Const.NONE}, /*NUMERIC*/
/*FLOAT*/ 	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.FLOAT,    Const.FLOAT,    Const.FLOAT,    Const.FLOAT,    Const.FLOAT,    Const.FLOAT,    Const.FLOAT,    Const.FLOAT,    Const.FLOAT,    Const.FLOAT,    Const.FLOAT,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.FLOAT,        Const.FLOAT,        Const.NONE}, /*FLOAT*/
/*REAL*/ 	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.REAL,     Const.REAL,     Const.REAL,     Const.REAL,     Const.REAL,     Const.REAL,     Const.REAL,     Const.REAL,     Const.REAL,     Const.REAL,     Const.REAL,     Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.REAL,         Const.REAL,         Const.NONE}, /*REAL*/
/*INT*/ 	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.INTEGER,      Const.INTEGER,      Const.NONE}, /*INT*/
/*CINT*/	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.INTEGER,  Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.INTEGER,      Const.INTEGER,      Const.NONE}, /*CINT*/
/*SMALLINT*/ 	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.SMALLINT, Const.SMALLINT, Const.SMALLINT, Const.SMALLINT, Const.SMALLINT, Const.SMALLINT, Const.SMALLINT, Const.SMALLINT, Const.SMALLINT, Const.SMALLINT, Const.SMALLINT, Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.SMALLINT,     Const.SMALLINT,     Const.NONE}, /*SMALLINT*/
/*TINYINT*/ 	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.TINYINT,  Const.TINYINT,  Const.TINYINT,  Const.TINYINT,  Const.TINYINT,  Const.TINYINT,  Const.TINYINT,  Const.TINYINT,  Const.TINYINT,  Const.TINYINT,  Const.TINYINT,  Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.TINYINT,      Const.TINYINT,      Const.NONE}, /*TINYINT*/
/*BIGINT*/ 	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.BIGINT,   Const.BIGINT,   Const.BIGINT,   Const.BIGINT,   Const.BIGINT,   Const.BIGINT,   Const.BIGINT,   Const.BIGINT,   Const.BIGINT,   Const.BIGINT,   Const.BIGINT,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.BIGINT,       Const.BIGINT,       Const.NONE}, /*BIGINT*/
/*DATE*/	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.NONE,     Const.NONE,     Const.DATE,         Const.DATE,         Const.NONE}, /*DATE*/
/*CDAT*/	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.NONE,     Const.NONE,     Const.DATE,         Const.DATE,         Const.NONE}, /*CDAT*/
/*TIME*/	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.NONE,     Const.NONE,     Const.TIME,         Const.TIME,         Const.NONE}, /*TIME*/
/*CTIM*/	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.NONE,     Const.NONE,     Const.TIME,         Const.TIME,         Const.NONE}, /*CTIM*/
/*TIMESTAMP*/	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.NONE,     Const.NONE,     Const.TIMESTAMP,    Const.TIMESTAMP,    Const.NONE}, /*TIMESTAMP*/
/*BOOL*/	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,      Const.NONE}, /*BOOL*/
/*CBOO*/	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,      Const.NONE}, /*CBOO*/
/*NULL*/	  {Const.NONE, Const.VARCHAR,     Const.VARCHAR,      Const.VARCHAR,     Const.VARCHAR,        Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,      Const.VARCHAR,      Const.NONE}, /*NULL*/
/*CNUL*/	  {Const.NONE, Const.VARCHAR,     Const.VARCHAR,      Const.VARCHAR,     Const.VARCHAR,        Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR, Const.VARCHAR,  Const.VARCHAR,  Const.VARCHAR,      Const.VARCHAR,      Const.NONE}, /*CNUL*/
/*WILD*/	  {Const.NONE, Const.NONE,        Const.NONE,         Const.NONE,        Const.NONE,           Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.BOOLEAN,  Const.BOOLEAN,  Const.NONE,         Const.NONE,         Const.NONE}  /*WILD*/
   };

   private int[][] coalesceResultType =
   {     	   /*NONE*/    /*CHAR*/     	   /*CSTR*/          /*VARCHAR*/    	/*LONGVARCHAR*/       /*DOUB*/      /*CDOUB*/     /*DECIMAL*/    /*NUMERIC*/    /*FLOAT*/     /*REAL*/      /*INT*/        /*CINT*/       /*SMALLINT*/    /*TINYINT*/     /*BIGINT*/     /*DATE*/      /*CDAT*/      /*TIME*/           /*CTIM*/           /*TIMESTAMP*/      /*BOOL*/       /*CBOO*/       /*NULL*/      	    /*CNUL*/            /*WILD*/
/*NONE*/   	  {Const.NONE, Const.NONE,  	  Const.NONE,        Const.NONE,        Const.NONE,           Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.NONE,             Const.NONE,         Const.NONE },/*NONE*/
/*CHAR*/   	  {Const.NONE, Const.VARCHAR, 	  Const.VARCHAR,     Const.VARCHAR,     Const.LONGVARCHAR,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.VARCHAR,	    Const.VARCHAR,      Const.NONE },/*CHAR*/
/*CSTR*/   	  {Const.NONE, Const.VARCHAR, 	  Const.VARCHAR,     Const.VARCHAR,     Const.LONGVARCHAR,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.VARCHAR,	    Const.VARCHAR,      Const.NONE },/*CSTR*/
/*VARCHAR*/  	  {Const.NONE, Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.LONGVARCHAR,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.VARCHAR,	    Const.VARCHAR,      Const.NONE },/*VARCHAR*/
/*LONGVARCHAR*/   {Const.NONE, Const.LONGVARCHAR, Const.LONGVARCHAR, Const.LONGVARCHAR, Const.LONGVARCHAR,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.LONGVARCHAR,      Const.LONGVARCHAR,  Const.NONE },/*LONGVARCHAR*/
/*DOUB*/ 	  {Const.NONE, Const.NONE,  	  Const.NONE, 	     Const.NONE,        Const.NONE,           Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,  Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.DOUBLE, 	    Const.DOUBLE,       Const.NONE },/*DOUB*/
/*CDOUB*/	  {Const.NONE, Const.NONE,  	  Const.NONE,	     Const.NONE,        Const.NONE,           Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,  Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.DOUBLE, 	    Const.DOUBLE,       Const.NONE },/*CDOUB*/
/*DECIMAL*/ 	  {Const.NONE, Const.NONE,  	  Const.NONE, 	     Const.NONE,        Const.NONE,           Const.DOUBLE, Const.DOUBLE, Const.DECIMAL, Const.DECIMAL, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,  Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.DECIMAL, 	    Const.DECIMAL,      Const.NONE },/*DECIMAL*/
/*NUMERIC*/ 	  {Const.NONE, Const.NONE,  	  Const.NONE, 	     Const.NONE,        Const.NONE,           Const.DOUBLE, Const.DOUBLE, Const.DECIMAL, Const.NUMERIC, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,  Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.NUMERIC, 	    Const.NUMERIC,      Const.NONE },/*NUMERIC*/
/*FLOAT*/ 	  {Const.NONE, Const.NONE,  	  Const.NONE, 	     Const.NONE,        Const.NONE,           Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,  Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.FLOAT, 	    Const.FLOAT,        Const.NONE },/*FLOAT*/
/*REAL*/ 	  {Const.NONE, Const.NONE,  	  Const.NONE, 	     Const.NONE,        Const.NONE,           Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,   Const.DOUBLE,   Const.DOUBLE,  Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.REAL, 	    Const.REAL,         Const.NONE },/*REAL*/
/*INT*/  	  {Const.NONE, Const.NONE,  	  Const.NONE,	     Const.NONE,        Const.NONE,           Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE, Const.DOUBLE, Const.INTEGER, Const.INTEGER, Const.INTEGER,  Const.INTEGER,  Const.BIGINT,  Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.INTEGER,	    Const.INTEGER,      Const.NONE },/*INT*/
/*CINT*/ 	  {Const.NONE, Const.NONE,  	  Const.NONE,	     Const.NONE,    	Const.NONE,           Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE, Const.DOUBLE, Const.INTEGER, Const.INTEGER, Const.INTEGER,  Const.INTEGER,  Const.BIGINT,  Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.INTEGER,	    Const.INTEGER,      Const.NONE },/*CINT*/
/*SMALLINT*/  	  {Const.NONE, Const.NONE,  	  Const.NONE,	     Const.NONE,        Const.NONE,           Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE, Const.DOUBLE, Const.INTEGER, Const.INTEGER, Const.SMALLINT, Const.SMALLINT, Const.BIGINT,  Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.SMALLINT,	    Const.SMALLINT,     Const.NONE },/*SMALLINT*/
/*TINYINT*/  	  {Const.NONE, Const.NONE,  	  Const.NONE,	     Const.NONE,        Const.NONE,           Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE, Const.DOUBLE, Const.INTEGER, Const.INTEGER, Const.SMALLINT, Const.TINYINT,  Const.BIGINT,  Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.TINYINT,	    Const.TINYINT,      Const.NONE },/*TINYINT*/
/*BIGINT*/  	  {Const.NONE, Const.NONE,  	  Const.NONE,	     Const.NONE,        Const.NONE,           Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE, Const.DOUBLE, Const.BIGINT,  Const.BIGINT,  Const.BIGINT,   Const.BIGINT,   Const.BIGINT,  Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.BIGINT,	    Const.BIGINT,       Const.NONE },/*BIGINT*/
/*DATE*/ 	  {Const.NONE, Const.NONE,  	  Const.NONE,	     Const.NONE,    	Const.NONE,           Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NONE,    Const.DATE,   Const.DATE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.DATE,   	    Const.DATE,         Const.NONE },/*DATE*/
/*CDAT*/ 	  {Const.NONE, Const.NONE,  	  Const.NONE,	     Const.NONE,    	Const.NONE,           Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NONE,    Const.DATE,   Const.DATE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.DATE,   	    Const.DATE,         Const.NONE },/*CDAT*/
/*TIME*/ 	  {Const.NONE, Const.NONE,  	  Const.NONE,	     Const.NONE,    	Const.NONE,           Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,   Const.NONE,   Const.TIME,        Const.TIME,        Const.TIMESTAMP,   Const.NONE,    Const.NONE,    Const.TIME,   	    Const.TIME,         Const.NONE },/*TIME*/
/*CTIM*/ 	  {Const.NONE, Const.NONE,  	  Const.NONE,	     Const.NONE,    	Const.NONE,           Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,   Const.NONE,   Const.TIME,        Const.TIME,        Const.TIMESTAMP,   Const.NONE,    Const.NONE,    Const.TIME,   	    Const.TIME,         Const.NONE },/*CTIM*/
/*TIMESTAMP*/ 	  {Const.NONE, Const.NONE,  	  Const.NONE,	     Const.NONE,    	Const.NONE,           Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,   Const.NONE,   Const.TIMESTAMP,   Const.TIMESTAMP,   Const.TIMESTAMP,   Const.NONE,    Const.NONE,    Const.TIMESTAMP,   	    Const.TIMESTAMP,    Const.NONE },/*TIMESTAMP*/
/*BOOL*/ 	  {Const.NONE, Const.NONE,  	  Const.NONE,	     Const.NONE,    	Const.NONE,           Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,	    Const.BOOLEAN,      Const.NONE },/*BOOL*/
/*CBOO*/ 	  {Const.NONE, Const.NONE,  	  Const.NONE,	     Const.NONE,    	Const.NONE,           Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,	    Const.BOOLEAN,      Const.NONE },/*CBOO*/
/*NULL*/ 	  {Const.NONE, Const.VARCHAR,	  Const.VARCHAR,     Const.VARCHAR, 	Const.LONGVARCHAR,    Const.DOUBLE, Const.DOUBLE, Const.DECIMAL, Const.NUMERIC, Const.FLOAT,  Const.REAL,   Const.INTEGER, Const.INTEGER, Const.INTEGER,  Const.INTEGER,  Const.INTEGER, Const.DATE,   Const.DATE,   Const.TIME,        Const.TIME,        Const.TIME,        Const.BOOLEAN, Const.BOOLEAN, Const.VARCHAR,	    Const.VARCHAR,      Const.NONE },/*NULL*/
/*CNUL*/ 	  {Const.NONE, Const.VARCHAR,	  Const.VARCHAR,     Const.VARCHAR, 	Const.LONGVARCHAR,    Const.DOUBLE, Const.DOUBLE, Const.DECIMAL, Const.NUMERIC, Const.FLOAT,  Const.REAL,   Const.INTEGER, Const.INTEGER, Const.INTEGER,  Const.INTEGER,  Const.INTEGER, Const.DATE,   Const.DATE,   Const.TIME,        Const.TIME,        Const.TIME,        Const.BOOLEAN, Const.BOOLEAN, Const.VARCHAR,	    Const.VARCHAR,      Const.NONE },/*CNUL*/
/*WILD*/ 	  {Const.NONE, Const.NONE,  	  Const.NONE,        Const.NONE,    	Const.NONE,           Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,     Const.NONE,     Const.NONE,    Const.NONE,   Const.NONE,   Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,    Const.NONE,    Const.NONE,   	    Const.NONE,         Const.NONE } /*WILD*/
   };

   private int[][] caseResultType =
   {       	   /*NONE*/    /*CHAR*/            /*CSTR*/          /*VARCHAR*/        /*LONGVARCHAR*/      /*DOUB*/      /*CDOUB*/     /*DECIMAL*/   /*NUMERIC*/   /*FLOAT*/     /*REAL*/      /*INT*/        /*CINT*/       /*SMALLINT*/   /*TINYINT*/    /*BIGINT*/     /*DATE*/    /*CDAT*/    /*TIME*/    /*CTIM*/    /*TIMESTAMP*/    /*BOOL*/       /*CBOO*/       /*NULL*/             /*CNUL*/            /*WILD*/
/*NONE*/  	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.NONE,         Const.NONE,         Const.NONE },/*NONE*/
/*CHAR*/  	  {Const.NONE, Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.LONGVARCHAR,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.VARCHAR,      Const.VARCHAR,      Const.NONE },/*CHAR*/
/*CSTR*/  	  {Const.NONE, Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.LONGVARCHAR,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.VARCHAR,      Const.VARCHAR,      Const.NONE },/*CSTR*/
/*VARCHAR*/   	  {Const.NONE, Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.LONGVARCHAR,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.VARCHAR,      Const.VARCHAR,      Const.NONE },/*VARCHAR*/
/*LONGVARCHAR*/   {Const.NONE, Const.LONGVARCHAR, Const.LONGVARCHAR, Const.LONGVARCHAR, Const.LONGVARCHAR,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.LONGVARCHAR,  Const.LONGVARCHAR,  Const.NONE },/*LONGVARCHAR*/
/*DOUB*/ 	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.DOUBLE,       Const.DOUBLE,       Const.NONE },/*DOUB*/
/*CDOUB*/	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.DOUBLE,       Const.DOUBLE,       Const.NONE },/*CDOUB*/
/*DECIMAL*/ 	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.DOUBLE,       Const.DOUBLE,       Const.NONE },/*DECIMAL*/
/*NUMERIC*/ 	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.DOUBLE,       Const.DOUBLE,       Const.NONE },/*NUMERIC*/
/*FLOAT*/ 	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.DOUBLE,       Const.DOUBLE,       Const.NONE },/*FLOAT*/
/*REAL*/ 	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.DOUBLE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.DOUBLE,       Const.DOUBLE,       Const.NONE },/*REAL*/
/*INT*/ 	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.INTEGER,      Const.INTEGER,      Const.NONE },/*INT*/
/*CINT*/	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.INTEGER,      Const.INTEGER,      Const.NONE },/*CINT*/
/*SMALLINT*/ 	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.INTEGER,      Const.INTEGER,      Const.NONE },/*SMALLINT*/
/*TINYINT*/ 	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.INTEGER,      Const.INTEGER,      Const.NONE },/*TINYINT*/
/*BIGINT*/ 	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.INTEGER,      Const.INTEGER,      Const.NONE },/*BIGINT*/
/*DATE*/	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.DATE, Const.DATE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.DATE,         Const.DATE,         Const.NONE },/*DATE*/
/*CDAT*/	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.DATE, Const.DATE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.DATE,         Const.DATE,         Const.NONE },/*CDAT*/
/*TIME*/	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.TIME, Const.TIME, Const.TIMESTAMP, Const.NONE,    Const.NONE,    Const.TIME,         Const.TIME,         Const.NONE },/*TIME*/
/*CTIM*/	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.TIME, Const.TIME, Const.TIMESTAMP, Const.NONE,    Const.NONE,    Const.TIME,         Const.TIME,         Const.NONE },/*CTIM*/
/*TIMESTAMP*/	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.TIME, Const.TIME, Const.TIMESTAMP, Const.NONE,    Const.NONE,    Const.TIMESTAMP,    Const.TIMESTAMP,    Const.NONE },/*TIMESTAMP*/
/*BOOL*/	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,      Const.BOOLEAN,      Const.NONE },/*BOOL*/
/*CBOO*/	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,      Const.BOOLEAN,      Const.NONE },/*CBOO*/
/*NULL*/	  {Const.NONE, Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.LONGVARCHAR,   Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.DATE, Const.DATE, Const.TIME, Const.TIME, Const.TIMESTAMP, Const.BOOLEAN, Const.BOOLEAN, Const.VARCHAR,      Const.VARCHAR,      Const.NONE },/*NULL*/
/*CNUL*/	  {Const.NONE, Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.LONGVARCHAR,   Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.DOUBLE, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.INTEGER, Const.DATE, Const.DATE, Const.TIME, Const.TIME, Const.TIMESTAMP, Const.BOOLEAN, Const.BOOLEAN, Const.VARCHAR,      Const.VARCHAR,      Const.NONE },/*CNUL*/
/*WILD*/	  {Const.NONE, Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE,    Const.NONE,    Const.NONE,         Const.NONE,         Const.NONE } /*WILD*/
   };

   private int[] substringResultType =
       /*NONE*/     /*CHAR*/        /*CSTR*/             /*VARCHAR*/     /*LONGVARCHAR*/    /*DOUB*/      /*CDOUB*/    /*DECIMAL*/  /*NUMERIC*/  /*FLOAT*/    /*REAL*/    /*INT*/     /*CINT*/    /*SMALLINT*/ /*TINYINT*/  /*BIGINT*/   /*DATE*/    /*CDAT*/    /*TIME*/    /*CTIM*/    /*TIMESTAMP*/  /*BOOL*/    /*CBOO*/    /*NULL*/    /*CNUL*/    /*WILD*/
      {Const.NONE,  Const.VARCHAR,  Const.CONST_STRING,  Const.VARCHAR,  Const.LONGVARCHAR, Const.NONE,   Const.NONE,  Const.NONE,  Const.NONE,  Const.NONE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE,  Const.NONE,  Const.NONE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,    Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE };

   private int[][] concatenationResultType =
   {              /*NONE*/     /*CHAR*/             /*CSTR*/              /*VARCHAR*/          /*LONGVARCHAR*/      /*DOUB*/           /*CDOUB*/   	    /*DECIMAL*/        /*NUMERIC*/        /*FLOAT*/          /*REAL*/           /*INT*/              /*CINT*/                 /*SMALLINT*/       /*TINYINT*/        /*BIGINT*/         /*DATE*/             /*CDAT*/                 /*TIME*/             /*CTIM*/                  /*TIMESTAMP*/       /*BOOL*/      /*CBOO*/     /*NULL*/             /*CNUL*/                 /*WILD*/
/*NONE*/         {Const.NONE,  Const.NONE,          Const.NONE,           Const.NONE,          Const.NONE,          Const.NONE,        Const.NONE,          Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,              Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,              Const.NONE,          Const.NONE,               Const.NONE,         Const.NONE,   Const.NONE,  Const.NONE,          Const.NONE,              Const.NONE }, /*NONE*/
/*CHAR*/         {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*CHAR*/
/*CSTR*/         {Const.NONE,  Const.VARCHAR,       Const.CONST_STRING,   Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.CONST_STRING,  Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.CONST_STRING,      Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.CONST_STRING,      Const.VARCHAR,       Const.CONST_STRING,       Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.CONST_STRING,      Const.NONE }, /*CSTR*/
/*VARCHAR*/      {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*VARCHAR*/
/*LONGVARCHAR*/  {Const.NONE,  Const.LONGVARCHAR,   Const.LONGVARCHAR,    Const.LONGVARCHAR,   Const.LONGVARCHAR,   Const.LONGVARCHAR, Const.LONGVARCHAR,   Const.LONGVARCHAR, Const.LONGVARCHAR, Const.LONGVARCHAR, Const.LONGVARCHAR, Const.LONGVARCHAR,   Const.LONGVARCHAR,       Const.LONGVARCHAR, Const.LONGVARCHAR, Const.LONGVARCHAR, Const.LONGVARCHAR,   Const.LONGVARCHAR,       Const.LONGVARCHAR,   Const.LONGVARCHAR,        Const.LONGVARCHAR,  Const.NONE,   Const.NONE,  Const.LONGVARCHAR,   Const.LONGVARCHAR,       Const.NONE }, /*LONGVARCHAR*/
/*DOUB*/         {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*DOUB*/
/*CDOUB*/        {Const.NONE,  Const.VARCHAR,       Const.CONST_STRING,   Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.CONST_STRING,  Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.CONST_STRING,      Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.CONST_STRING,      Const.VARCHAR,       Const.CONST_STRING,       Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.CONST_STRING,      Const.NONE }, /*CDOUB*/
/*DECIMAL*/      {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*DECIMAL*/
/*NUMERIC*/      {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*NUMERIC*/
/*FLOAT*/        {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*FLOAT*/
/*REAL*/         {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*REAL*/
/*INT*/          {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*INT*/
/*CINT*/         {Const.NONE,  Const.VARCHAR,       Const.CONST_STRING,   Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.CONST_STRING,  Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.CONST_STRING,      Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.CONST_STRING,      Const.VARCHAR,       Const.CONST_STRING,       Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.CONST_STRING,      Const.NONE }, /*CINT*/
/*SMALLINT*/     {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*SMALLINT*/
/*TINYINT*/      {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*TINYINT*/
/*BIGINT*/       {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*BIGINT*/
/*DATE*/         {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*DATE*/
/*CDAT*/         {Const.NONE,  Const.VARCHAR,       Const.CONST_STRING,   Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.CONST_STRING,  Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.CONST_STRING,      Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.CONST_STRING,      Const.VARCHAR,       Const.CONST_STRING,       Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.CONST_STRING,      Const.NONE }, /*CDAT*/
/*TIME*/         {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*TIME*/
/*CTIM*/         {Const.NONE,  Const.VARCHAR,       Const.CONST_STRING,   Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.CONST_STRING,  Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.CONST_STRING,      Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.CONST_STRING,      Const.VARCHAR,       Const.CONST_STRING,       Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.CONST_STRING,      Const.NONE }, /*CTIM*/
/*TIMESTAMP*/    {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*TIMESTAMP*/
/*BOOL*/         {Const.NONE,  Const.NONE,          Const.NONE,           Const.NONE,          Const.NONE,          Const.NONE,        Const.NONE,          Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,              Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,              Const.NONE,          Const.NONE,               Const.NONE,         Const.NONE,   Const.NONE,  Const.NONE,          Const.NONE,              Const.NONE }, /*BOOL*/
/*CBOO*/         {Const.NONE,  Const.NONE,          Const.NONE,           Const.NONE,          Const.NONE,          Const.NONE,        Const.NONE,          Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,              Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,              Const.NONE,          Const.NONE,               Const.NONE,         Const.NONE,   Const.NONE,  Const.NONE,          Const.NONE,              Const.NONE }, /*CBOO*/
/*NULL*/         {Const.NONE,  Const.VARCHAR,       Const.VARCHAR,        Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.VARCHAR,           Const.VARCHAR,       Const.VARCHAR,            Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.VARCHAR,           Const.NONE }, /*NULL*/
/*CNUL*/         {Const.NONE,  Const.VARCHAR,       Const.CONST_STRING,   Const.VARCHAR,       Const.LONGVARCHAR,   Const.VARCHAR,     Const.CONST_STRING,  Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.CONST_STRING,      Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,     Const.VARCHAR,       Const.CONST_STRING,      Const.VARCHAR,       Const.CONST_STRING,       Const.VARCHAR,      Const.NONE,   Const.NONE,  Const.VARCHAR,       Const.CONST_STRING,      Const.NONE }, /*CNUL*/
/*WILD*/         {Const.NONE,  Const.NONE,          Const.NONE,           Const.NONE,          Const.NONE,          Const.NONE,        Const.NONE,          Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,              Const.NONE,        Const.NONE,        Const.NONE,        Const.NONE,          Const.NONE,              Const.NONE,          Const.NONE,               Const.NONE,         Const.NONE,   Const.NONE,  Const.NONE,          Const.NONE,              Const.NONE }  /*WILD*/
   };

   private int[][] likeResultType =
   {     	  /*NONE*/    /*CHAR*/        /*CSTR*/      	  /*VARCHAR*/     /*LONGVARCHAR*/   /*DOUB*/   	    /*CDOUB*/   	/*DECIMAL*/   	/*NUMERIC*/   	/*FLOAT*/   	/*REAL*/   	/*INT*/         /*CINT*/            /*SMALLINT*/    /*TINYINT*/     /*BIGINT*/      /*DATE*/        /*CDAT*/            /*TIME*/        /*CTIM*/            /*TIMESTAMP*/   /*BOOL*/      /*CBOO*/     /*NULL*/        /*CNUL*/           /*WILD*/
/*NONE*/ 	 {Const.NONE, Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,       Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,   Const.NONE,  Const.NONE,     Const.NONE,         Const.NONE }, /*NONE*/
/*CHAR*/  	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*CHAR*/
/*CSTR*/ 	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*CSTR*/
/*VARCHAR*/  	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*VARCHAR*/
/*LONGVARCHAR*/  {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*LONGVARCHAR*/
/*DOUB*/ 	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*DOUB*/
/*CDOUB*/	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*CDOUB*/
/*DECIMAL*/ 	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*DECIMAL*/
/*NUMERIC*/ 	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*NUMERIC*/
/*FLOAT*/ 	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*FLOAT*/
/*REAL*/ 	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*REAL*/
/*INT*/  	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*INT*/
/*CINT*/ 	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*CINT*/
/*SMALLINT*/  	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*SMALLINT*/
/*TINYINT*/  	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*TINYINT*/
/*BIGINT*/  	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*BIGINT*/
/*DATE*/ 	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*DATE*/
/*CDAT*/ 	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*CDAT*/
/*TIME*/ 	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*TIME*/
/*CTIM*/ 	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*CTIM*/
/*TIMESTAMP*/ 	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*TIMESTAMP*/
/*BOOL*/ 	 {Const.NONE, Const.NONE,     Const.NONE,   	  Const.NONE,     Const.NONE,       Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,   Const.NONE,  Const.NONE,     Const.NONE,         Const.NONE }, /*BOOL*/
/*CBOO*/ 	 {Const.NONE, Const.NONE,     Const.NONE,   	  Const.NONE,     Const.NONE,       Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,   Const.NONE,  Const.NONE,     Const.NONE,         Const.NONE }, /*CBOO*/
/*NULL*/ 	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*NULL*/
/*CNUL*/ 	 {Const.NONE, Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,    Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.BOOLEAN,      Const.BOOLEAN,  Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.BOOLEAN,      Const.NONE }, /*CNUL*/
/*WILD*/ 	 {Const.NONE, Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,       Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,         Const.NONE,     Const.NONE,   Const.NONE,  Const.NONE,     Const.NONE,         Const.NONE }  /*WILD*/
   };

   private int[] escapeResultType =
       /*NONE*/    /*CHAR*/        /*CSTR*/      /*VARCHAR*/    /*LONGVARCHAR*/  /*DOUB*/      /*CDOUB*/    /*DECIMAL*/   /*NUMERIC*/   /*FLOAT*/     /*REAL*/      /*INT*/      /*CINT*/        /*SMALLINT*/ /*TINYINT*/  /*BIGINT*/   /*DATE*/    /*CDAT*/    /*TIME*/    /*CTIM*/    /*TIMESTAMP*/    /*BOOL*/    /*CBOO*/    /*NULL*/       /*CNUL*/       /*WILD*/
      {Const.NONE, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN, Const.BOOLEAN,   Const.NONE,   Const.NONE,  Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,   Const.NONE,  Const.BOOLEAN,  Const.NONE,  Const.NONE,  Const.NONE,  Const.NONE, Const.NONE, Const.NONE, Const.NONE, Const.NONE,      Const.NONE, Const.NONE, Const.BOOLEAN, Const.BOOLEAN, Const.NONE};


/*************************************************************************************************/
/*                                        PUBLIC METHODS					 */
/*************************************************************************************************/

  public boolean isPartitionable(){
    	return isPartitionable;
  }

  public String getAllOrDistinctText(){
    	return allOrDistinct;
  }

  /*
  public void setVpQuery(String table,String attribute) {

  	//if(findAlias(table,0)==null) nao precisa pois findAlias nunca dara null para table pois table ja esta no fromTables
	String partitionableTable = findAlias(table,0) + "." + attribute ;
        vpQuery = vpQuery.replaceAll(" 1#1 ", " " + partitionableTable + " ");
        vpQueryIndexed = vpQuery;
  }
  */

  public String getVpQuery(){
  	return vpQuery;
  }

  public String getError(){
    	return error;
  }


  public Object[] getGroupByList(){
      	return groupByList;
  }

  public ArrayList<Tokens> getQColumnsList(){
      	return qColumnsList;
  }

  public ArrayList<Column> getQvpColumnsList(){
      	return qvpColumnsList;
  }

  public Object[][] getSelectCompositor(){
      	return selectCompositor;
  }

  public Object[] getHavingCompositor(){
        return havingCompositor;
  }

  public ArrayList<String> getAliasTextList(){
        return aliasTextList;
  }

  public ArrayList<String> getWhereAttList(){
        return whereAttList;
  }

  public ArrayList<String> getGroupByTextList(){
        return groupByTextList;
  }

  public ArrayList<String> getOrderByTextList(){
        return orderByTextList;
  }

  public String getLimitText(){
        return limitText;
  }
  public ArrayList<String> getSelectTextList(){
        return selectTextList;
  }

  public int getSelectAggregationFunctionCount(){
  	return selectAggregationFunctionCount;
  }

  public OrderByRef[] getOrderByIndexList(){
        return orderByIndexList;
  }

  public int getQvpCount(){
    	return qvpCount;
  }


/*************************************************************************************************/
/*                                        PRIVATE METHODS					 */
/*************************************************************************************************/


//add TOKENS elements from fromList to toList without repetitions

  private void addToList(ArrayList <String> fromList, ArrayList <String> toList){

    int i,j;
    boolean found=false;
    String temp = new String();

    if( toList.isEmpty() ) {

      if( !(fromList.isEmpty()) )
        toList=fromList;
    }

    else {

      if ( !toList.get(0).equals("*") ){

        for(i=0;i<fromList.size();i++){

           temp=fromList.get(i);

           for(j=0;j<toList.size();j++){

             if( temp.toLowerCase().equals(toList.get(j).toLowerCase()) ){
      	       found = true;
      	       break;
       	     }
           }

           if(!found)
             toList.add(temp);
           found = false;
        }
      }
    }
  }


// add a token in columnsList without repetition and refresh the token.compositor with the correct columnsList reference

  private void addColumnsList( Tokens token, ArrayList<Column> columnsList ){

    int i;
    boolean found=false;
    String temp;

    if( columnsList.isEmpty() ) {

     // count.index++;
      columnsList.add( new Column(new String(token.text), token.type, token.aggregationFunction, getTypeText(token),false) );
      token.compositorText = Const.COLUMN_PREFIX+ "0" ;
      token.compositor.clear();
      token.compositor.add(new ColumnIndex(0));
      token.compositor.trimToSize();
    }
    else{

     for(i=0;i<columnsList.size();i++){

       temp = columnsList.get(i).getText();

       if(temp.toLowerCase().equals(token.text.toLowerCase()) ){
          found = true;
          token.compositorText = Const.COLUMN_PREFIX+ i;
          token.compositor.clear();
          token.compositor.add(new ColumnIndex(i));
          token.compositor.trimToSize();
          break;
       }
     }

     if(!found){

      // count.index++;
       columnsList.add( new Column(new String(token.text), token.type, token.aggregationFunction, getTypeText(token),false) );
       token.compositor.clear();
       token.compositor.add(new ColumnIndex(columnsList.size()-1));
       token.compositor.trimToSize();
       token.compositorText = Const.COLUMN_PREFIX+ (columnsList.size()-1);
     }

    }

  }


  private void addWildCardToColumnsList(Tokens token) {

    Tokens tempToken = new Tokens();
    boolean entryTest =false;
    String table, tableOrAlias, field;
    String tokenTextList =" ";
    tempToken.selectColumnCount = 0;

    for(int j = 0; j<fromTableAlias.get(0).size(); j++){

  	table = fromTableAlias.get(0).get(j).table;
  	tableOrAlias = fromTableAlias.get(0).get(j).alias;
	try {
		ResultSet columnList = meta.getColumns(null,null,table.toUpperCase(),null);
	  	while(columnList.next()) {
	  		entryTest = true;
	  		field = columnList.getString("COLUMN_NAME");
	  		tempToken.text = tableOrAlias.toUpperCase() + "." + field;
	  		tempToken.alias = tableOrAlias + "." + field;
	  		tempToken.type = convertToConstType( columnList.getInt("DATA_TYPE") );
	  		tempToken.typeSize = columnList.getInt("COLUMN_SIZE");
	  		tempToken.typePrecision = columnList.getInt("DECIMAL_DIGITS");
		 	tempToken.columnRefTable = getColumnRefTable( tableOrAlias, field, 0 );
                 	tempToken.columnRefField = field;
              	 	if( (columnsNotInGroupError = mustIncludeInGroupBy(tempToken, 0)) )
              	 		columnsNotInGroup += " " + tempToken.text +",";
	  		qvpColumnsList.add(new Column(tempToken.text, tempToken.type, Const.NONE,
	  		                              getTypeText(tempToken), false) );
			tempToken.selectColumnCount++;
			tokenTextList += fromTableAlias.get(0).get(j).alias+"."+columnList.getString("COLUMN_NAME")+", ";
                  	tempToken.compositorText = Const.COLUMN_PREFIX + (qvpColumnsList.size()-1);
                  	tempToken.compositor.clear();
                  	tempToken.compositor.trimToSize();
                  	tempToken.compositor.add(new ColumnIndex(qvpColumnsList.size()-1));
                  	aliasTextList.add(new String( tempToken.alias ) );
                  	aliasTextList.trimToSize();
                  	selectCompositorText.add(new String(tempToken.compositorText));
                  	selectTextList.trimToSize();
                  	selectTextList.add(new String(tempToken.compositorText));
                  	selectCompositorText.trimToSize();
                  	selectCompTemp.add(tempToken.compositor.toArray());
                  	selectCompTemp.trimToSize();
                  	qColumnsList.add(tempToken.clone());
                  	qColumnsList.trimToSize();
	  	}
	}
	catch (Exception e) {		
	  	yyerror(e.toString());
	}
    }
    token.text = tokenTextList;
    token.selectColumnCount = tempToken.selectColumnCount;
    if(entryTest) {
            if(existsAggregationSelect.get(0)){
            	if(columnsNotInGroupError)
            		yyerror("The column(s)" + columnsNotInGroup.substring(0,columnsNotInGroup.length() - 1) + " must appear in the GROUP BY clause" );
            }
    	    token.text = token.text.substring(0,token.text.length() - 1);
    	    selectCompositor = selectCompTemp.toArray(selectCompositor);
	    selectCompTemp.clear();
	    selectCompTemp.trimToSize();
            columnsNotInGroupError = false;
            columnsNotInGroup = "";
	    
    }
  }


  private void addWildCardToColumnsList(Tokens token, int wildcardLevel) {

    boolean entryTest = false;
    String table, tableOrAlias, field;
    String tokenTextList =" ";
    Tokens tempToken = new Tokens();
    tempToken.selectColumnCount = 0;

    for(int j = 0; j<fromTableAlias.get(wildcardLevel).size(); j++){
  	table = fromTableAlias.get(wildcardLevel).get(j).table;
  	tableOrAlias = fromTableAlias.get(wildcardLevel).get(j).alias;
	try {
		ResultSet columnList = meta.getColumns(null,null,table.toUpperCase(),null);
	  	while(columnList.next()) {
	  		entryTest = true;
	  		tempToken.selectColumnCount++;
	  		tempToken.type = convertToConstType( columnList.getInt("DATA_TYPE") );
	  		tempToken.typeSize = columnList.getInt("COLUMN_SIZE");
	  		tempToken.typePrecision = columnList.getInt("DECIMAL_DIGITS");
	  		field = columnList.getString("COLUMN_NAME");
		 	tempToken.columnRefTable = getColumnRefTable( tableOrAlias, field, wildcardLevel );
                 	tempToken.columnRefField = field;
              	 	if( (columnsNotInGroupError = mustIncludeInGroupBy(tempToken, wildcardLevel)) )
              	 		columnsNotInGroup += " " + tableOrAlias.toUpperCase() + "." + field + ",";
	  	}
	}
	catch (Exception e) {
	  	yyerror(e.toString());
	}
    }
    token.selectColumnCount = tempToken.selectColumnCount;
    token.text = " *";
    if(entryTest) {
        if(existsAggregationSelect.get(wildcardLevel)){
        	if(columnsNotInGroupError)
        		yyerror("The column(s)" + columnsNotInGroup.substring(0,columnsNotInGroup.length() - 1) + " must appear in the GROUP BY clause" );
        }        
        columnsNotInGroupError = false;
        columnsNotInGroup = "";
    	if(tempToken.selectColumnCount==1) {
    		token.type = tempToken.type;
    		token.typeSize = tempToken.typeSize;
    		token.typePrecision = tempToken.typePrecision;
    	}
    	else {
    		token.type = Const.WILDCARD;
    		token.typeSize = 0;
    		token.typePrecision = 0;
    	}
    }
  }


  private ArrayList<Object> addCompositor(int operator, Tokens token1, Tokens token2){

  	ArrayList<Object> temp = new ArrayList<Object>(0);
  	temp.add(new Operator(operator));
	temp.addAll(token1.compositor);
	temp.addAll(token2.compositor);
        temp.trimToSize();
        return temp;
  }


  private ArrayList<Object> addCompositor(int operator, Tokens token1){

    	ArrayList<Object> temp = new ArrayList<Object>(0);
    	temp.add(new Operator(operator));
  	temp.addAll(token1.compositor);
        temp.trimToSize();
        return temp;
  }


  //returns the correspondent table name of an ALIAS

   private String findTable(String alias,int fromTableAliasLevel){

    	for(int j=0; j<fromTableAlias.get(fromTableAliasLevel).size(); j++){
		if(fromTableAlias.get(fromTableAliasLevel).get(j).alias.toLowerCase().equals(alias.toLowerCase()))
	        	return fromTableAlias.get(fromTableAliasLevel).get(j).table;
    	}

    	for(int i=fromTableAliasLevel-1; i>=0; i--){
    		for(int j=0; j<fromTableAlias.get(i).size(); j++){
    			if(fromTableAlias.get(i).get(j).alias.toLowerCase().equals(alias.toLowerCase()))
    				return fromTableAlias.get(i).get(j).table;
    		}
    	}
    	return null;
  }

  //returns the correspondent alias name of a table name

  private String findAlias(String table,int fromTableAliasLevel){

      	for(int j=0;j<fromTableAlias.get(fromTableAliasLevel).size(); j++){
	      	if(fromTableAlias.get(fromTableAliasLevel).get(j).table.toLowerCase().equals(table.toLowerCase()))
	      		return fromTableAlias.get(fromTableAliasLevel).get(j).alias;
      	}
      	for(int i=fromTableAliasLevel-1; i>=0; i--){
      		for(int j=0;j<fromTableAlias.get(i).size(); j++){
      			if(fromTableAlias.get(i).get(j).table.toLowerCase().equals(table.toLowerCase()))
      				return fromTableAlias.get(i).get(j).alias;
      		}
      	}
      	return null;
  }


  private String printColumnList(ArrayList <Column> columnList){
    int i;
    //String outString=" "+ columnList.get(0).getText();
    String outString=" ";

    for(i=0;i<columnList.size();i++){
      if(i == 0)
      	outString += columnList.get(0).getText();
      else
      	outString += ", " + columnList.get(i).getText();
    }
    return outString;

  }


/*************************************************************************************************/
/*                                        RESULT OPERATION METHODS			    	 */
/*************************************************************************************************/


  private void getResultConcatenationType(Tokens operate1, Tokens operate2, Tokens token){

  	if((token.type = concatenationResultType[operate1.type-Const.NONE][operate2.type-Const.NONE])!=Const.NONE) {
  		token.typeSize = operate1.typeLength + operate2.typeLength;
  		token.typeLength = operate1.typeLength + operate2.typeLength;
  		token.typePrecision = 0;
  	}
  	else
  		yyerror("Type mismatch in the operation : " + new String(token.text));
  }

  private void getResultEscapeType(Tokens operate, Tokens token){

    	if(((token.typeSize = escapeResultType[operate.type-Const.NONE])==Const.NONE) || (operate.typeLength != 1))
    		yyerror("Invalid string in the Escape clause : " + new String(token.text));
  }

  private void getResultLikeType(Tokens operate1, Tokens operate2, Tokens token){

  	if((token.type = likeResultType[operate1.type-Const.NONE][operate2.type-Const.NONE])!=Const.NONE) {
  		token.typeSize = 0;
  		token.typePrecision = 0;
  		token.typeLength = 0;
  	}
  	else {
  		yyerror("Type mismatch in the operation : " + new String(token.text));
  	}
  }

  private void getResultCaseType (Tokens operate1,Tokens operate2, Tokens token){

    	token.type = caseResultType[operate1.type-Const.NONE][operate2.type-Const.NONE];
    	if(operate1.typeSize == operate2.typeSize){
    		token.typeSize = operate1.typeSize;
    		if(operate1.typePrecision >= operate2.typePrecision) {
    			token.typePrecision = operate1.typePrecision;
    			token.typeLength = operate1.typeLength;
    		}
    		else {
    			token.typePrecision = operate2.typePrecision;
    			token.typeLength = operate2.typeLength;
    		}
    	}
    	else {
    		if(operate1.typeSize > operate2.typeSize){
    			token.typeSize = operate1.typeSize;
    			token.typePrecision = operate1.typePrecision;
    			token.typeLength = operate1.typeLength;
    		}
    		else {
    			token.typeSize = operate2.typeSize;
			token.typePrecision = operate2.typePrecision;
			token.typeLength = operate2.typeLength;
		}
    	}
  }

  private int getCaseWhenType (int operate1,int operate2){

    	return caseResultType[operate1-Const.NONE][operate2-Const.NONE];
  }

  private void getResultCoalesceType(Tokens operate1,Tokens operate2, Tokens token){

    	token.type = coalesceResultType[operate1.type-Const.NONE][operate2.type-Const.NONE];
    	if(operate1.typeSize == operate2.typeSize){
    		token.typeSize = operate1.typeSize;
    		if(operate1.typePrecision >= operate2.typePrecision) {
    			token.typePrecision = operate1.typePrecision;
    			token.typeLength =  operate1.typeLength;
    		}
    		else {
    			token.typePrecision = operate2.typePrecision;
    			token.typeLength = operate2.typeLength;
    		}
    	}
    	else {
    		if(operate1.typeSize > operate2.typeSize){
    			token.typeSize = operate1.typeSize;
    			token.typePrecision = operate1.typePrecision;
    			token.typeLength = operate1.typeLength;
    		}
    		else {
    			token.typeSize = operate2.typeSize;
			token.typePrecision = operate2.typePrecision;
			token.typeLength = operate2.typeLength;
		}
    	}

  }


  private int getResultInPredicateType(int operate1,int operate2){

    	return coalesceResultType[operate1-Const.NONE][operate2-Const.NONE];
  }


  private void getResultNullIfType(Tokens operate1,Tokens operate2, Tokens token){

  	if((token.type = nullIfResultType[operate1.type-Const.NONE][operate2.type-Const.NONE])!=Const.NONE){
  		token.typeSize = operate1.typeSize;
  		token.typePrecision = operate1.typePrecision;
  		token.typeLength = operate1.typeLength;
  	}
  	else
  		yyerror("Type mismatch in the operation  : " + new String(token.text));
  }


  private void getResultSignType(Tokens operate, Tokens token){
    	if((token.type = signResultType[operate.type-Const.NONE])!=Const.NONE) {
  		token.typeSize = operate.typeSize;
  		token.typePrecision = operate.typePrecision;
  		token.typeLength = operate.typeLength;
  	}

    	else
    		yyerror("Type mismatch in the +/- unary operation : " + new String(token.text));

  }

  private void getResultPlusType(Tokens operate1,Tokens operate2, Tokens token){
  	if((token.type = plusOrMinusResultType[operate1.type-Const.NONE][operate2.type-Const.NONE])!=Const.NONE) {
    		if(operate1.typeSize == operate2.typeSize){
    			token.typeSize = operate1.typeSize;
    			if(operate1.typePrecision >= operate2.typePrecision) {
    				token.typePrecision = operate1.typePrecision;
    				token.typeLength =  operate1.typeLength;
    			}
    			else {
    				token.typePrecision = operate2.typePrecision;
    				token.typeLength = operate2.typeLength;
    			}
    		}
    		else {
    			if(operate1.typeSize > operate2.typeSize){
    				token.typeSize = operate1.typeSize;
    				token.typePrecision = operate1.typePrecision;
    				token.typeLength = operate1.typeLength;
    			}
    			else {
    				token.typeSize = operate2.typeSize;
				token.typePrecision = operate2.typePrecision;
				token.typeLength = operate2.typeLength;
			}
    		}
  	}
  	else
  		yyerror("Type mismatch in the add operation : " + new String(token.text));
  }


  private void getResultMinusType(Tokens operate1,Tokens operate2, Tokens token){
    	if((token.type = plusOrMinusResultType[operate1.type-Const.NONE][operate2.type-Const.NONE])!=Const.NONE) {
    		if(operate1.typeSize == operate2.typeSize){
    			token.typeSize = operate1.typeSize;
    			if(operate1.typePrecision >= operate2.typePrecision) {
    				token.typePrecision = operate1.typePrecision;
    				token.typeLength =  operate1.typeLength;
    			}
    			else {
    				token.typePrecision = operate2.typePrecision;
    				token.typeLength = operate2.typeLength;
    			}
    		}
    		else {
    			if(operate1.typeSize > operate2.typeSize){
    				token.typeSize = operate1.typeSize;
    				token.typePrecision = operate1.typePrecision;
    				token.typeLength = operate1.typeLength;
    			}
    			else {
    				token.typeSize = operate2.typeSize;
				token.typePrecision = operate2.typePrecision;
				token.typeLength = operate2.typeLength;
			}
    		}
    	}
    	else
    		yyerror("Type mismatch in the minus operation : " + new String(token.text));
  }


  private void getResultMultiplicationType(Tokens operate1,Tokens operate2, Tokens token){

    	if((token.type = multiplicationResultType[operate1.type-Const.NONE][operate2.type-Const.NONE])!=Const.NONE) {
    		if(operate1.typeSize == operate2.typeSize){
    			token.typeSize = operate1.typeSize;
    			if(operate1.typePrecision >= operate2.typePrecision) {
    				token.typePrecision = operate1.typePrecision;
    				token.typeLength =  operate1.typeLength;
    			}
    			else {
    				token.typePrecision = operate2.typePrecision;
    				token.typeLength = operate2.typeLength;
    			}
    		}
    		else {
    			if(operate1.typeSize > operate2.typeSize){
    				token.typeSize = operate1.typeSize;
    				token.typePrecision = operate1.typePrecision;
    				token.typeLength = operate1.typeLength;
    			}
    			else {
    				token.typeSize = operate2.typeSize;
				token.typePrecision = operate2.typePrecision;
				token.typeLength = operate2.typeLength;
			}
    		}
    	}
    	else
    		yyerror("Type mismatch in the multiplication operation : " + new String(token.text));
  }


  private void getResultDivisionType(Tokens operate1,Tokens operate2, Tokens token){
    	if((token.type = divisionResultType[operate1.type-Const.NONE][operate2.type-Const.NONE])!=Const.NONE) {
    		if(operate1.typeSize == operate2.typeSize){
    			token.typeSize = operate1.typeSize;
    			if(operate1.typePrecision >= operate2.typePrecision) {
    				token.typePrecision = operate1.typePrecision;
    				token.typeLength =  operate1.typeLength;
    			}
    			else {
    				token.typePrecision = operate2.typePrecision;
    				token.typeLength = operate2.typeLength;
    			}
    		}
    		else {
    			if(operate1.typeSize > operate2.typeSize){
    				token.typeSize = operate1.typeSize;
    				token.typePrecision = operate1.typePrecision;
    				token.typeLength = operate1.typeLength;
    			}
    			else {
    				token.typeSize = operate2.typeSize;
				token.typePrecision = operate2.typePrecision;
				token.typeLength = operate2.typeLength;
			}
    		}
    	}
    	else
    		yyerror("Type mismatch in the division operation : " + new String(token.text));
  }

  private void getResultLogicOpType(Tokens operate1,Tokens operate2, Tokens token){
      	if((token.type = logicOpResultType[operate1.type-Const.NONE][operate2.type-Const.NONE])!=Const.NONE){
    		token.typeSize = 0;
		token.typePrecision = 0;
		token.typeLength = 0;
      	}
      	else
      		yyerror("Type mismatch in the logic operation : " + new String(token.text));
  }

  private void getResultLogicOpType(Tokens operate, Tokens token){
      	if((token.type = logicUnaryOpResultType[operate.type-Const.NONE])!=Const.NONE) {
    		token.typeSize = 0;
		token.typePrecision = 0;
		token.typeLength = 0;
      	}
      	else
      		yyerror("Type mismatch in the logic operation : " + new String(token.text));
  }

  private void getResultRelationalOpType(Tokens operate1,Tokens operate2, Tokens token){
      	if((token.type = relationalOpResultType[operate1.type-Const.NONE][operate2.type-Const.NONE])!=Const.NONE){
    		token.typeSize = 0;
		token.typePrecision = 0;
		token.typeLength = 0;
      	}
      	else
      		yyerror("Type mismatch in the relational operation : " + new String(token.text));
  }

  private void getResultRelationalOpType(Tokens operate1,Tokens operate2,Tokens operate3, Tokens token){
      	int reurnedType;
      	if((reurnedType = relationalOpResultType[operate1.type-Const.NONE][operate2.type-Const.NONE])==Const.NONE){
      		token.type = reurnedType;
      		yyerror("Type mismatch in the relational operation : " + new String(token.text) +
      		         "\nTypes : " + getTypeText(operate1) + " " + getTypeText(operate2)+ " " +
      		         getTypeText(operate3));
        }
      	else {
      		if((token.type = relationalOpResultType[operate1.type-Const.NONE][operate3.type-Const.NONE])==Const.NONE)
      			yyerror("Type mismatch in the relational operation : " + new String(token.text) +
      		         	"\nTypes : " + getTypeText(operate1) + " " + getTypeText(operate2)+ " " +
      		         	getTypeText(operate3));
      	}
    	token.typeSize = 0;
	token.typePrecision = 0;
	token.typeLength = 0;

  }


  private int getResultAggregationFunctionType(Tokens parameters, int aggregationFunction, Tokens token){
        int typeReturned;
        int[] functionResultArray=null;
        switch (aggregationFunction){
            case Const.AVG:
            	functionResultArray = avgResultType;
            	break;
            case Const.SUM:
            	functionResultArray = sumResultType;
            	break;
            case Const.COUNT:
		functionResultArray = countResultType;
            	break;
            case Const.MIN:
		functionResultArray = minResultType;
            	break;
            case Const.MAX:
		functionResultArray = maxResultType;
            	break;
            default : return Const.NONE;
        }

        if((typeReturned = functionResultArray[parameters.type-Const.NONE])==Const.NONE)
        	yyerror("Invalid parameter type in the aggregation function : " + new String(token.text));
        else {
    		token.typeSize = parameters.typeSize;
		token.typePrecision = parameters.typePrecision;
		token.typeLength = parameters.typeLength;
        }
        return typeReturned;
  }

  private void getResultExtractType(Tokens operate, Tokens token){
    	if((token.type = extractResultType[operate.type-Const.NONE])!=Const.NONE) {
  		token.typeSize = 0;
  		token.typePrecision = 0;
  		token.typeLength = 20;
  	}

    	else
    		yyerror("Type mismatch in the operation : " + new String(token.text));
  }

  private void getResultSubstringType(Tokens operate, Tokens token){
    	if((token.type = substringResultType[operate.type-Const.NONE])!=Const.NONE) {
  		token.typeSize = operate.typeSize;
  		token.typePrecision = 0;
  		token.typeLength = operate.typeLength;
  	}

    	else
    		yyerror("Type mismatch in the operation : " + new String(token.text));
  }


/*************************************************************************************************/
/*                                        GENERAL METHODS					 */
/*************************************************************************************************/


   private int verifySelectAliasRef(String selectAlias, int selectAliasLevel) {

   	for(int i = 0; i<selectAliasLevelList.get(selectAliasLevel).size(); i++){
   		if(selectAlias.toUpperCase().equals(selectAliasLevelList.get(selectAliasLevel).get(i).toUpperCase()))
   			return i;
   	}
   	return -1;
   }


  private int getColumnType(String tableOrAlias, String attribute, int tableOrAliasLevel, Tokens token) {
     if(findTable(tableOrAlias,tableOrAliasLevel)!=null) {
  	try {
  		ResultSet columnList = meta.getColumns(null,null,findTable(tableOrAlias,tableOrAliasLevel).toUpperCase(),null);

  		while(columnList.next()) {
  			if(columnList.getString("COLUMN_NAME").toUpperCase().equals(attribute.toUpperCase())) {
	  			token.typeSize = columnList.getInt("COLUMN_SIZE");
	  			token.typePrecision = columnList.getInt("DECIMAL_DIGITS");
	  			token.typeLength = getTypeLength(columnList.getInt("DATA_TYPE"),columnList.getInt("COLUMN_SIZE"), columnList.getInt("DECIMAL_DIGITS"));
  				return convertToConstType( columnList.getInt("DATA_TYPE") );
  			}
  	        }
  	        yyerror( new String(attribute) + " is not a " + new String(tableOrAlias) +" field");
  	        return Const.NONE;
  	} catch (Exception e) {
  		yyerror(e.toString());
  		return Const.NONE;
  	  }
     }
     else
      return Const.NONE;
  }



  private int getColumnType(String attribute, int tableOrAliasLevel, Tokens token) {

  	int foundAttribute = 0;
  	int returnedType = Const.NONE;
  	String table;
  	for(int j = 0; j<fromTableAlias.get(tableOrAliasLevel).size(); j++){
	  	table = fromTableAlias.get(tableOrAliasLevel).get(j).table;
	  	try {
	  		ResultSet columnList = meta.getColumns(null,null,table.toUpperCase(),null);
	  		while(columnList.next()) {
	  			if(columnList.getString("COLUMN_NAME").toUpperCase().equals(attribute.toUpperCase())) {
	  				token.typeSize = columnList.getInt("COLUMN_SIZE");
	  				token.typePrecision = columnList.getInt("DECIMAL_DIGITS");
	  				token.typeLength = getTypeLength(columnList.getInt("DATA_TYPE"),columnList.getInt("COLUMN_SIZE"), columnList.getInt("DECIMAL_DIGITS"));
	  				returnedType = convertToConstType( columnList.getInt("DATA_TYPE"));
	  				foundAttribute++;
	  			}
	  		}
	  	}
	  	catch (Exception e) {
	  		yyerror(e.toString());
	  		return Const.NONE;
	  	}
  	}
	if(foundAttribute > 1){
		yyerror("Ambiguity. " + new String(attribute) + " is field of too many tables");
		return Const.NONE;
	}
	if(foundAttribute == 1)
		return returnedType;
	else{//if(foundAttribute == 0)
  	    for(int i=tableOrAliasLevel-1;i>=0; i--){
  		for(int j = 0; j<fromTableAlias.get(i).size(); j++){
  			table = fromTableAlias.get(i).get(j).table;
  			try {
  				ResultSet columnList = meta.getColumns(null,null,table.toUpperCase(),null);
  				while(columnList.next()) {
  					if(columnList.getString("COLUMN_NAME").toUpperCase().equals(attribute.toUpperCase())) {
	  					token.typeSize = columnList.getInt("COLUMN_SIZE");
	  					token.typePrecision = columnList.getInt("DECIMAL_DIGITS");
	  					token.typeLength = getTypeLength(columnList.getInt("DATA_TYPE"),columnList.getInt("COLUMN_SIZE"), columnList.getInt("DECIMAL_DIGITS"));
	  					returnedType = convertToConstType( columnList.getInt("DATA_TYPE"));
  						foundAttribute++;
  					}
  			        }
  			}
  			catch (Exception e) {
  				yyerror(e.toString());
  				return Const.NONE;
  		  	}
  		}
  	    }
  	}
  	if(foundAttribute == 0){
  		yyerror("The column " + new String(attribute) + " does not exists");
  		return Const.NONE;
  	}
  	else //if(foundAttribute >= 1)
		return returnedType;


  }


   private ColumnRefTable getColumnRefTable(String tableOrAlias, String attribute, int tableOrAliasLevel) {
       if(findTable(tableOrAlias,tableOrAliasLevel)!=null) {
    	for(int j=0; j<fromTableAlias.get(tableOrAliasLevel).size(); j++){
			if(fromTableAlias.get(tableOrAliasLevel).get(j).alias.toLowerCase().equals(tableOrAlias.toLowerCase()))
		        	return new ColumnRefTable(fromTableAlias.get(tableOrAliasLevel).get(j).table,
		        	                          tableOrAliasLevel);
	    	}

	    	for(int i=tableOrAliasLevel-1; i>=0; i--){
	    		for(int j=0; j<fromTableAlias.get(i).size(); j++){
	    			if(fromTableAlias.get(i).get(j).alias.toLowerCase().equals(tableOrAlias.toLowerCase()))
	    				return new ColumnRefTable(fromTableAlias.get(i).get(j).table,i);
	    		}
	    	}
    	return null;
       }
       else
        return null;
  }


  private ColumnRefTable getColumnRefTable(String attribute,int tableOrAliasLevel) {

    	int foundAttribute = 0;
    	String table;
    	for(int j = 0; j<fromTableAlias.get(tableOrAliasLevel).size(); j++){
  	  	table = fromTableAlias.get(tableOrAliasLevel).get(j).table;
  	  	try {
  	  		ResultSet columnList = meta.getColumns(null,null,table.toUpperCase(),null);
  	  		while(columnList.next()) {
  	  			if(columnList.getString("COLUMN_NAME").toUpperCase().equals(attribute.toUpperCase())) {
  	  			return new ColumnRefTable(table,tableOrAliasLevel);
  	  			}
  	  		}
  	  	}
  	  	catch (Exception e) {
  	  	return null;
  	  	}
    	}
    	for(int i=tableOrAliasLevel-1;i>=0; i--){
    		for(int j = 0; j<fromTableAlias.get(i).size(); j++){
    			table = fromTableAlias.get(i).get(j).table;
    			try {
    				ResultSet columnList = meta.getColumns(null,null,table.toUpperCase(),null);
    				while(columnList.next()) {
    					if(columnList.getString("COLUMN_NAME").toUpperCase().equals(attribute.toUpperCase())) {
    					return new ColumnRefTable(table,i);
    					}
    			        }
    			}
    			catch (Exception e) {
    				return null;
    		  	}
    		}
    	}
    	return null;
  }

  private boolean constVerify(int type) {
  	boolean isConst = false;
  	switch(type){
  		case Const.CONST_BOOLEAN:
  			isConst = true;
  			break;
  		case Const.CONST_STRING:
  			isConst = true;
  			break;
  		case Const.CONST_DATE:
  			isConst = true;
  			break;
  		case Const.CONST_DOUBLE:
  			isConst = true;
  			break;
  		case Const.CONST_INTEGER:
  			isConst = true;
  			break;
  		case Const.CONST_NULL:
  			isConst = true;
  			break;
  		case Const.CONST_TIME:
  			isConst = true;
  			break;
  		default :
  			isConst = false;
  			break;
  	}
  	return isConst;
  }


  private int convertToConstType(int sqlType) throws ParserSilentException{
  	int returnedType;
  	switch(sqlType){
 		case Types.CHAR:
  			returnedType = Const.CHAR;
  			break;
  		case Types.VARCHAR:
  			returnedType = Const.VARCHAR;
  			break;
  		case Types.LONGVARCHAR:
  			returnedType = Const.LONGVARCHAR;
  			break;
  		case Types.DATE:
  			returnedType = Const.DATE;
  			break;
   		case Types.TIME:
  			returnedType = Const.TIME;
  			break;
  		case Types.TIMESTAMP:
  			returnedType = Const.TIMESTAMP;
  			break;
 		case Types.DECIMAL:
  			returnedType = Const.DECIMAL;
  			break;
  		case Types.DOUBLE:
  			returnedType = Const.DOUBLE;
  			break;
  		case Types.FLOAT:
  			returnedType = Const.FLOAT;
  			break;
  		case Types.INTEGER:
  			returnedType = Const.INTEGER;
  			break;
  		case Types.BIGINT:
  			returnedType = Const.BIGINT;
  			break;
   		case Types.NUMERIC:
  			returnedType = Const.NUMERIC;
  			break;
  		case Types.REAL:
  			returnedType = Const.REAL;
  			break;
  		case Types.SMALLINT:
  			returnedType = Const.SMALLINT;
  			break;
  		case Types.TINYINT:
  			returnedType = Const.TINYINT;
  			break;
  		case Types.BOOLEAN:
  			returnedType = Const.BOOLEAN;
  			break;
   	 	case Types.NULL:
  			returnedType = Const.NULL;
  			break;
	        default :
  			returnedType = Const.NONE;
  			yyerror("java.SQL.Types = " + sqlType + " not treated");
  			if(true)
  				throw new ParserSilentException("java.SQL.Types = " + sqlType + " not treated");
  			break;
  	}
  	return returnedType;
  }

  private int getTypeLength(int sqlType, int typeSize, int typePrecision) throws ParserSilentException{
    	int returnedLength;
    	switch(sqlType){
   		case Types.CHAR:
    			returnedLength = typeSize;
    			break;
    		case Types.VARCHAR:
    			returnedLength = typeSize;
    			break;
    		case Types.LONGVARCHAR:
    			returnedLength = typeSize;
    			break;
    		case Types.DATE:
    			returnedLength = 10;
    			break;
     		case Types.TIME:
    			returnedLength = 14;
    			break;
    		case Types.TIMESTAMP:
    			returnedLength = 26;
    			break;
   		case Types.DECIMAL:
    			returnedLength = typeSize + typePrecision + 1;
    			break;
    		case Types.DOUBLE:
    			returnedLength = 20;
    			break;
    		case Types.FLOAT:
    			if(typeSize==0 || typeSize >=25)
    				returnedLength = 20;
    			else
    				returnedLength = 11;
    			break;
    		case Types.INTEGER:
    			returnedLength = 11;
    			break;
    		case Types.BIGINT:
    			returnedLength = 20;
    			break;
     		case Types.NUMERIC:
    			returnedLength = typeSize + typePrecision + 1;
    			break;
    		case Types.REAL:
    			returnedLength = 11;
    			break;
    		case Types.SMALLINT:
    			returnedLength = 6;
    			break;
    		case Types.TINYINT:
    			returnedLength = 3;
    			break;
    		case Types.BOOLEAN:
    			returnedLength = 1;
    			break;
     	 	case Types.NULL:
    			returnedLength = 4;
    			break;
  	        default :
    			returnedLength = Const.NONE;
    			yyerror("java.SQL.Types = " + sqlType + " not treated");
    			if(true)
    				throw new ParserSilentException("java.SQL.Types = " + sqlType + " not treated");
    			break;
    	}
    	return returnedLength;
  }

  private boolean mustIncludeInGroupBy(String text,int groupByLevel){
  	for(int i = 0; i< groupByLevelList.get(groupByLevel).size(); i++){
  		if(semanticMatch(text,groupByLevelList.get(groupByLevel).get(i)))
  			return false;//nao precisa ser incluido
  	}
  	return true;
  }
  
  private boolean mustIncludeInGroupBy(Tokens columnRef, int groupByLevel){

  	if(columnRef.columnRefTable==null)
  		return true;
  	if(groupByLevel != columnRef.columnRefTable.tableLevel)
  		return false;
  	else { //if this column is referred in the from clause of the actual subquery level
  		for(int i = 0; i< groupByLevelList.get(groupByLevel).size(); i++){
  			if(semanticMatch(columnRef.columnRefField,groupByLevelList.get(groupByLevel).get(i)) ||
  			   semanticMatch(findAlias(columnRef.columnRefTable.name,groupByLevel) + "." + columnRef.columnRefField,groupByLevelList.get(groupByLevel).get(i))
  			   )
  				return false;
  		}
  	}
  	return true;
  }


  private boolean isVpAttribute(Tokens token){

	for(int i=0;i<rangeList.size();i++){
	  	if( (token.columnRefTable.name.toUpperCase().equals((rangeList.get(i)).getTableName().toUpperCase())) &&
	  	    (token.columnRefField.toUpperCase().equals((rangeList.get(i)).getField().toUpperCase())) )
	  		return true;
	}
	return false;
  }


  private boolean semanticMatch(String str1, String str2){
  	String[] str1Splited = str1.split(" ");
  	String[] str2Splited = str2.split(" ");
  	int found = 0;
  	for(int i =0; i< str1Splited.length; i++){
	  	if(!(str2.toLowerCase().contains(str1Splited[i].toLowerCase())))
	  		return false;
	}
	for(int j =0; j< str2Splited.length; j++){
		if(!(str1.toLowerCase().contains(str2Splited[j].toLowerCase())))
			return false;
	}
  	return true;
  }


  private String getTypeText(Tokens token) {
  	String typeText;
  	switch(token.type){
  		case Const.BOOLEAN:
  			typeText = "BOOLEAN";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.CONST_BOOLEAN:
  			typeText = "BOOLEAN";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.CONST_STRING:
  			typeText = "VARCHAR";
  			token.typePrecision = 0;
  			break;
  		case Const.CHAR:
  			typeText = "CHARACTER";
  			token.typePrecision = 0;
  			break;
  		case Const.DATE:
  			typeText = "DATE";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.CONST_DATE:
  			typeText = "DATE";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.DECIMAL:
  			typeText = "DECIMAL";
  			break;
  		case Const.DOUBLE:
  			typeText = "DOUBLE";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.CONST_DOUBLE:
  			typeText = "DOUBLE";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.FLOAT:
  			typeText = "FLOAT";
  			token.typePrecision = 0;
  			break;
  		case Const.INTEGER:
  			typeText = "INTEGER";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.CONST_INTEGER:
  			typeText = "INTEGER";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.LONGVARCHAR:
  			typeText = "LONGVARCHAR";
  			token.typePrecision = 0;
  			break;
  		case Const.NULL:
  			typeText = "NULL";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.CONST_NULL:
  			typeText = "NULL";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.NUMERIC:
  			typeText = "NUMERIC";
  			break;
  		case Const.REAL:
  			typeText = "REAL";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.SMALLINT:
  			typeText = "SMALLINT";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.TINYINT:
  			typeText = "TINYINT";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.BIGINT:
  			typeText = "BIGINT";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.TIME:
  			typeText = "TIME";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.CONST_TIME:
  			typeText = "TIME";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.TIMESTAMP:
  			typeText = "TIMESTAMP";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		case Const.VARCHAR:
  			typeText = "VARCHAR";
  			token.typePrecision = 0;
  			break;
  		case Const.WILDCARD:
  			typeText = "";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			break;
  		default :
  			typeText = "NONE";
  			token.typePrecision = 0;
  			token.typeSize = 0;
  			yyerror(token.text + " type not treated");
  			break;
  	}
  	if(token.typePrecision != 0)
  		typeText += "(" + token.typeSize + "," + token.typePrecision + ")";
  	else if(token.typeSize != 0)
  		 typeText += "(" + token.typeSize + ")";
  	return typeText;
  }


  private int yylex () {

    int yyl_return = -1;
    try {
      yylval = new ParserVal(new Tokens());
      yyl_return = lexer.yylex();
    }
    catch (IOException e) {
      yyerror("IO error :"+e);
    }
    return yyl_return;

  }


  public void yyerror (String error) {

    this.error += "\nError Parser: " + error + "\nLine: " + line + "\nColumn: " + column;

  }



/*************************************************************************************************/
/*                                        CONSTRUCTORS   					 */
/*************************************************************************************************/


  public Parser(String in, PargresDatabaseMetaData meta, ParserIni parserIni, ArrayList<Range> rangeList,
                String vpTable, String vpAttribute) throws ParserSilentException {

      this.meta = meta;
      this.error = "";
      this.inQuery = in;
      this.rangeList = rangeList;
      this.vpTable = vpTable;
      this.vpAttribute = vpAttribute;
      this.fromTableAlias = new ArrayList<ArrayList<Table>>(parserIni.getFromTableAlias());
      this.error = parserIni.getError();
      this.groupByLevelList = parserIni.getGroupByLevelList();
      this.selectAliasLevelList = parserIni.getSelectAliasLevelList();
      this.existsAggregationSelect = new ArrayList<Boolean>(parserIni.getExistsAggregationSelect());
      //this.isFromClauseInnerSelect = parserIni.isFromClauseInnerSelect();
      lexer = new Yylex(new StringReader(in), this);
      this.yyparse();

      if(this.error.equals("")){
      	int b;
      	String aliasTemp;
      	logger.debug("\n"+this.vpQuery+"\n");
      	//logger.debug(printCommaList(groupByList));
      	//addToList(groupByList,qvpColumnsList);

      	for(b=0;b<selectCompositorText.size();b++){
      		logger.debug( Messages.getString("parser.compositorText",new Object[]{ b, selectCompositorText.get(b)}));
      	}
      	for(b=0;b<groupByTextList.size();b++){
      		logger.debug( Messages.getString("parser.groupByText",new Object[] { b, groupByTextList.get(b)}) );
      	}
      	for(b=0;b<orderByTextList.size();b++){
      		logger.debug( Messages.getString("parser.orderByText", new Object[] { b, orderByTextList.get(b)}) );
      	}
      	for(b=0;b<aliasTextList.size();b++){
      		logger.debug( Messages.getString("parser.alias",new Object[] { b, aliasTextList.get(b)}) );
      	}
      	for(b=0;b<qvpColumnsList.size();b++){
      		logger.debug( Messages.getString("parser.qvpTextType", new Object[] { b, qvpColumnsList.get(b).getTypeText()}) );
      	}
      	if(this.havingCompositorText!=null)
      		logger.debug( Messages.getString("parser.havingCompositor", this.havingCompositorText));
      	if(!this.limitText.equals(""))
      		logger.debug(Messages.getString("parser.limit",this.limitText));
      	}

  }


  /******************************Operators identifiers *******************************************

  Arithmetic::		Logic:: 	Relational :   Other :
  + : 1			OR : 7     	= : 10	       is null : 16
  - : 2			AND : 8		<> : 11        Is not null : 17
  * : 3     		NOT : 9		< : 12
  / : 4					> : 13
  +(unario) : 5				<= : 14
  -(unario) : 6 			>= : 15



  ************************************************************************************************/
//#line 3003 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
throws org.pargres.commons.util.ParserSilentException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    //if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      //if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        //if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        //if (yychar < 0)    //it it didn't work/error
        //  {
        //  yychar = 0;      //change it to default string (no -1!)
          //if (yydebug)
          //  yylexdebug(yystate,yychar);
        //  }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        //if (yydebug)
          //debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      //if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
		throw new ParserSilentException("Sintax not treated. Line : "+line +" Column : "+column);
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            //if (yydebug)
              //debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            //if (yydebug)
              //debug("error recovery discarding state "+state_peek(0)+" ");
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        //if (yydebug)
          //{
          //yys = null;
          //if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          //if (yys == null) yys = "illegal-symbol";
          //debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          //}
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    //if (yydebug)
      //debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    if(yyn>140) doSwitch2(yyn);
    else{
	switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 27 "sql.y"
{
	 if(this.isFromClauseInnerSelect){
	    if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
               	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + ((Tokens)(val_peek(2).obj)).text +
            	                          ((Tokens)(val_peek(1).obj)).text + ";";
            	this.vpQuery = ((Tokens)(yyval.obj)).text;
            }
	 }
	 else {
	    if(onlyText == 0) {
	    	if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
            		((Tokens)(yyval.obj)).text=((Tokens)(val_peek(3).obj)).text + printColumnList(qvpColumnsList) +
            	                        	((Tokens)(val_peek(1).obj)).text + ";";
            		this.vpQuery = ((Tokens)(yyval.obj)).text;
            	}
            	else
               		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + ((Tokens)(val_peek(2).obj)).text +
            	                         	  ((Tokens)(val_peek(1).obj)).text + ";";
            }
            else {
               	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + ((Tokens)(val_peek(2).obj)).text +
            	                          ((Tokens)(val_peek(1).obj)).text + ";";
            }
         }
       }
break;
case 2:
//#line 54 "sql.y"
{
                 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + ((Tokens)(val_peek(0).obj)).text;
                 if(onlyText == 0) {
                 	((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
                 	((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
                 	((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
                 }
              }
break;
case 3:
//#line 62 "sql.y"
{
                 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                 if(onlyText == 0) {
                 	((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
                 	((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
                 	((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
                 }
              }
break;
case 4:
//#line 72 "sql.y"
{
                     ((Tokens)(yyval.obj)).text=" "+((Tokens)(val_peek(0).obj)).text;
                  }
break;
case 5:
//#line 75 "sql.y"
{
                     ((Tokens)(yyval.obj)).text=" "+((Tokens)(val_peek(0).obj)).text;
                  }
break;
case 6:
//#line 80 "sql.y"
{
	    if(onlyText == 0) {
 	       if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0) {
 	       		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
 	       		allOrDistinct = ((Tokens)(val_peek(1).obj)).text;
 	       }
 	       else {
 	       		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + ((Tokens)(val_peek(0).obj)).text;
 	       }
               ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
               ((Tokens)(yyval.obj)).selectColumnCount = ((Tokens)(val_peek(0).obj)).selectColumnCount;
               ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
 	    }
 	    else {
 	       		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + ((Tokens)(val_peek(0).obj)).text;
 	    }
 	  }
break;
case 7:
//#line 97 "sql.y"
{
            if(onlyText == 0) {
 	       if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0) {
 	       		allOrDistinct = " ";
               }
               ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
               ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
               ((Tokens)(yyval.obj)).selectColumnCount = ((Tokens)(val_peek(0).obj)).selectColumnCount;
               ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
            }
            else
               ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
          }
break;
case 8:
//#line 112 "sql.y"
{
		 if(onlyText == 0) {
	            if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
                    	/*qColumnCount++;*/
                    	addWildCardToColumnsList( (Tokens)(yyval.obj) );
                        ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;

                    	/*qColumnsList.add( ((Tokens)($$.obj)).clone() );*/
                    	/*addColumnsList( (Tokens)($1.obj),qvpColumnsList );*/
	 	    }
	 	    else {
	 	    	addWildCardToColumnsList( (Tokens)(yyval.obj), subqueryLevel );
	 	    }
                    ((Tokens)(yyval.obj)).isUniqueColumn = false;
	         }
	         else {
	            ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	         }
	       }
break;
case 9:
//#line 131 "sql.y"
{
                 if(onlyText == 0) {
                    ((Tokens)(yyval.obj)).text=" "+((Tokens)(val_peek(0).obj)).text;
	            ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
 	            ((Tokens)(yyval.obj)).selectColumnCount = ((Tokens)(val_peek(0).obj)).selectColumnCount;
 	            ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
                 }
                 else {
                    ((Tokens)(yyval.obj)).text=" "+((Tokens)(val_peek(0).obj)).text;
                 }
               }
break;
case 10:
//#line 144 "sql.y"
{
	   if(onlyText == 0) {
              ((Tokens)(yyval.obj)).text = "*";
              ((Tokens)(yyval.obj)).type = Const.WILDCARD;
              ((Tokens)(yyval.obj)).alias = "";
   	      ((Tokens)(yyval.obj)).columnRefTable = null;
 	      ((Tokens)(yyval.obj)).columnRefField = null;
 	   }
 	   else {
               ((Tokens)(yyval.obj)).text = "*";
	   }
         }
break;
case 11:
//#line 158 "sql.y"
{
                      if(onlyText == 0) {
			 ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
          		 ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
                         ((Tokens)(yyval.obj)).selectColumnCount = ((Tokens)(val_peek(0).obj)).selectColumnCount;
			 ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
			 if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
                            	selectCompositor = selectCompTemp.toArray(selectCompositor);
                            	selectCompTemp.clear();
                            	selectCompTemp.trimToSize();
		    	 }
		      }
		      else {
			 ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
		      }
                    }
break;
case 12:
//#line 176 "sql.y"
{
		  if(onlyText == 0) {
		     ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
	             ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
	             ((Tokens)(yyval.obj)).selectColumnCount = 1;
	             ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
		  }
		  else {
		     ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
		  }
		}
break;
case 13:
//#line 187 "sql.y"
{
                  if(onlyText == 0) {
                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "," + ((Tokens)(val_peek(0).obj)).text;
               	     ((Tokens)(yyval.obj)).type = Const.NONE;
                     ((Tokens)(yyval.obj)).selectColumnCount = ((Tokens)(val_peek(2).obj)).selectColumnCount +
                     					    ((Tokens)(val_peek(0).obj)).selectColumnCount;
                     ((Tokens)(yyval.obj)).isUniqueColumn = false;
                  }
                  else {
                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "," + ((Tokens)(val_peek(0).obj)).text;
                  }
                }
break;
case 14:
//#line 201 "sql.y"
{
               if(onlyText == 0) {
                  if(((Tokens)(val_peek(0).obj)).aggregationFunction!=Const.NONE){
                  	if(columnsNotInGroupError)
                  		yyerror("The column(s)" + columnsNotInGroup.substring(0,columnsNotInGroup.length() - 1) + " must appear in the GROUP BY clause" );

                  	if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
                 		qvpColumnsList = new ArrayList<Column>(qvpColumnsListTemp);
			}
                  }
                  else {
                        if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
                  	   int typeTemp;
                  	   boolean isConst;
                  	   if( constVerify(((Tokens)(val_peek(0).obj)).type)) {
                  	  	   isConst = true;
                  		   typeTemp = ((Tokens)(val_peek(0).obj)).type-1;
                  	   	   qvpColumnsList.add( new Column(((Tokens)(val_peek(0).obj)).text, typeTemp,
                  		       ((Tokens)(val_peek(0).obj)).aggregationFunction, getTypeText((Tokens)(val_peek(0).obj)),
                  		                                               isConst) );
                  		                                               
                  	    	   qvpColumnsListTemp = new ArrayList<Column>(qvpColumnsList);
                  	   	   ((Tokens)(val_peek(0).obj)).compositor.clear();
                  	   	   ((Tokens)(val_peek(0).obj)).compositor.trimToSize();
                  	   	   ((Tokens)(val_peek(0).obj)).compositor.add(new ColumnIndex(qvpColumnsList.size()-1));
                    	   }
                  	   else {
                  		   isConst = false;
                  		   typeTemp = ((Tokens)(val_peek(0).obj)).type;
                  		   qvpColumnsList.add( new Column(((Tokens)(val_peek(0).obj)).text, typeTemp,
                  		      ((Tokens)(val_peek(0).obj)).aggregationFunction, getTypeText((Tokens)(val_peek(0).obj)),
                  		   	                               	       isConst) );
                  	   	   qvpColumnsListTemp = new ArrayList<Column>(qvpColumnsList);
                  	   	   ((Tokens)(val_peek(0).obj)).compositorText = Const.COLUMN_PREFIX + (qvpColumnsList.size()-1);
                  	  	   ((Tokens)(val_peek(0).obj)).compositor.clear();
                  	   	   ((Tokens)(val_peek(0).obj)).compositor.trimToSize();
                  	   	   ((Tokens)(val_peek(0).obj)).compositor.add(new ColumnIndex(qvpColumnsList.size()-1));
                  	   }
			}
                  	if(existsAggregationSelect.get(subqueryLevel)){
				if(mustIncludeInGroupBy(((Tokens)(val_peek(0).obj)).text, subqueryLevel))
					if(columnsNotInGroupError)
						yyerror("The column(s)" + columnsNotInGroup.substring(0,columnsNotInGroup.length() - 1) + " must appear in the GROUP BY clause");
		  	}
                  }
                  ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                  columnsNotInGroupError = false;
                  columnsNotInGroup = "";
                  ((Tokens)(yyval.obj)).selectColumnCount = 1;
                  ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
                  /*qColumnCount++;*/
                  if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
                  	aliasTextList.add(((Tokens)(val_peek(0).obj)).alias);
                  	aliasTextList.trimToSize();
                  	selectCompositorText.add( new String ( ((Tokens)(val_peek(0).obj)).compositorText ) );
                  	selectTextList.trimToSize();
                  	selectTextList.add(new String(((Tokens)(val_peek(0).obj)).compositorText));
                  	selectCompositorText.trimToSize();
                  	selectCompTemp.add( ((Tokens)(val_peek(0).obj)).compositor.toArray() );
                  	selectCompTemp.trimToSize();
                  	qColumnsList.add( ((Tokens)(val_peek(0).obj)).clone() );
                  	qColumnsList.trimToSize();
                  }
               }
               else {
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
               }
             }
break;
case 15:
//#line 272 "sql.y"
{
	      if(this.isFromClauseInnerSelect){
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " as " + ((Tokens)(val_peek(0).obj)).text;
                  ((Tokens)(yyval.obj)).alias ="";
		  ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(2).obj)).typeSize;
		  ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(2).obj)).typePrecision;
		  ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(2).obj)).typeLength;
                  ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(2).obj)).type;
		  ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction;
 		  ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText;
                  ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(2).obj)).compositor);
                  ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(2).obj)).isUniqueColumn;
	      }
	      else {
		if(onlyText == 0) {
		  if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
                  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text;
                  	((Tokens)(yyval.obj)).alias =((Tokens)(val_peek(0).obj)).text;
		  }
		  else {
		  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " as " + ((Tokens)(val_peek(0).obj)).text;
                  	((Tokens)(yyval.obj)).alias ="";
		  }
		  ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(2).obj)).typeSize;
		  ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(2).obj)).typePrecision;
		  ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(2).obj)).typeLength;
                  ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(2).obj)).type;
		  ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction;
 		  ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText;
                  ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(2).obj)).compositor);
                  ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(2).obj)).isUniqueColumn;
                }
                else {
 		  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " as " + ((Tokens)(val_peek(0).obj)).text;
               }
              }
             }
break;
case 16:
//#line 310 "sql.y"
{
		if(onlyText == 0) {
		  ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		  ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		  ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                  ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		  ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 		  ((Tokens)(yyval.obj)).alias = ((Tokens)(val_peek(0).obj)).text;
                  ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		  ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		  ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
  		  ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		  ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                }
                else {
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                }
              }
break;
case 17:
//#line 331 "sql.y"
{
		   if(onlyText == 0) {
		      ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
	 	      ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
	 	      ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                      ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
	  	      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
 	  	      ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 		      ((Tokens)(yyval.obj)).alias = ((Tokens)(val_peek(0).obj)).text;
                      ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
	 	      ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		      ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
  		      ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		      ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                   }
                   else {
	  	      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                   }
                 }
break;
case 18:
//#line 350 "sql.y"
{
                   if(onlyText == 0) {
                      ((Tokens)(yyval.obj)).compositorText =  ((Tokens)(val_peek(2).obj)).compositorText + " or " +
	                                                   ((Tokens)(val_peek(0).obj)).compositorText;
                      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
                                                ((Tokens)(val_peek(0).obj)).text;
                      getResultLogicOpType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
          	      if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction) == Const.NONE)
	      	      	    ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;

		      ((Tokens)(yyval.obj)).compositor=new ArrayList<Object>(addCompositor(Const.OR,(Tokens)val_peek(2).obj,(Tokens)val_peek(0).obj));
                      ((Tokens)(yyval.obj)).isUniqueColumn = false;
                      ((Tokens)(yyval.obj)).columnRefTable = null;
		      ((Tokens)(yyval.obj)).columnRefField = null;
		      if(havingCase!=0 && !this.isFromClauseInnerSelect)
		      	throw(new ParserSilentException("InterQuery : Expression not treated yet. Line : "+line+" Column : "+column ));

                   }
                   else {
                      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
                                                ((Tokens)(val_peek(0).obj)).text;
                  }
                 }
break;
case 19:
//#line 375 "sql.y"
{
	       if(onlyText == 0) {
		  ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		  ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		  ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                  ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		  ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 		  ((Tokens)(yyval.obj)).alias = ((Tokens)(val_peek(0).obj)).text;
                  ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		  ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		  ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
  		  ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		  ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
              }
              else {
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
              }
            }
break;
case 20:
//#line 394 "sql.y"
{
              if(onlyText == 0) {
                 ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText + " and " +
	                                             ((Tokens)(val_peek(0).obj)).compositorText;
                 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
                                           ((Tokens)(val_peek(0).obj)).text;
                 getResultLogicOpType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
          	 if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction) == Const.NONE)
	      	 	((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;

                 ((Tokens)(yyval.obj)).compositor=new ArrayList<Object>(addCompositor(Const.AND,(Tokens)val_peek(2).obj,(Tokens)val_peek(0).obj));
                 ((Tokens)(yyval.obj)).isUniqueColumn = false;
                 ((Tokens)(yyval.obj)).columnRefTable = null;
		 ((Tokens)(yyval.obj)).columnRefField = null;
              }
              else {
                 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
                                           ((Tokens)(val_peek(0).obj)).text;
              }
            }
break;
case 21:
//#line 417 "sql.y"
{
		 if(onlyText == 0) {
		  ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		  ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		  ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                  ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		  ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 		  ((Tokens)(yyval.obj)).alias = ((Tokens)(val_peek(0).obj)).text;
                  ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		  ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		  ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
  		  ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		  ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                 }
                 else {
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                 }
               }
break;
case 22:
//#line 436 "sql.y"
{
                 if(onlyText == 0) {                    
                    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
                    getResultLogicOpType( (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
                    ((Tokens)(yyval.obj)).compositor=new ArrayList<Object>(addCompositor(Const.NOT,(Tokens)val_peek(0).obj));
                    ((Tokens)(yyval.obj)).compositorText = "not " + ((Tokens)(val_peek(0).obj)).compositorText;
                    ((Tokens)(yyval.obj)).isUniqueColumn = false;
                    ((Tokens)(yyval.obj)).columnRefTable = null;
		    ((Tokens)(yyval.obj)).columnRefField = null;
		    notExists--;
                  }
                  else {
                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
                 }
               }
break;
case 23:
//#line 453 "sql.y"
{
 	     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
 	     if(onlyText == 0) 
 	        notExists++;
 	  }
break;
case 24:
//#line 460 "sql.y"
{
		   if(onlyText == 0) {
		  	((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		  	((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		  	((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                  	((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		  	((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 		  	((Tokens)(yyval.obj)).alias = ((Tokens)(val_peek(0).obj)).text;
                  	((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		  	((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		  	((Tokens)(yyval.obj)).isUniqueColumn = false;
  		  	((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		  	((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                   }
                   else {
 		  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                  }
                 }
break;
case 25:
//#line 479 "sql.y"
{
	           if(onlyText == 0) {
	                if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		   	     addColumnsList( (Tokens)(val_peek(0).obj),qvpColumnsListTemp );
                        }
		  	((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		  	((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		  	((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                  	((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		  	((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 		  	((Tokens)(yyval.obj)).alias = ((Tokens)(val_peek(0).obj)).text;
                  	((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		  	((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		  	((Tokens)(yyval.obj)).isUniqueColumn = false;
  		  	((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		  	((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
		     	if(!this.isFromClauseInnerSelect)
		     		throw(new ParserSilentException("InterQuery : Exists subquery in the Select clause. Line : " + line + " Column : " + column));
                   }
                   else {
		  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                   }
                 }
break;
case 26:
//#line 514 "sql.y"
{
	    if(onlyText == 0) {
		  ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		  ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		  ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                  ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		  ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 		  ((Tokens)(yyval.obj)).alias = ((Tokens)(val_peek(0).obj)).text;
                  ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		  ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		  ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
  		  ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		  ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
            }
            else {
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
            }
          }
break;
case 27:
//#line 535 "sql.y"
{
		      if(onlyText == 0) {
		  	((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		  	((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		  	((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                  	((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		  	((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 		  	((Tokens)(yyval.obj)).alias = ((Tokens)(val_peek(0).obj)).text;
                  	((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		  	((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		  	((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
  		  	((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		  	((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                      }
                      else {
		  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                      }
                    }
break;
case 28:
//#line 555 "sql.y"
{
                 if(onlyText == 0) {
                   ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText + " " +
                                                       ((Tokens)(val_peek(1).obj)).text + " " +
                                                       ((Tokens)(val_peek(0).obj)).compositorText;
                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
                                             ((Tokens)(val_peek(0).obj)).text;
                   getResultRelationalOpType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
          	   if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction) == Const.NONE)
	      	   	((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
                   ((Tokens)(yyval.obj)).compositor=new ArrayList<Object>(addCompositor(((Tokens)(val_peek(1).obj)).operator,(Tokens)val_peek(2).obj,(Tokens)val_peek(0).obj));
                   ((Tokens)(yyval.obj)).isUniqueColumn = false;
                   ((Tokens)(yyval.obj)).columnRefTable = null;
		   ((Tokens)(yyval.obj)).columnRefField = null;
                 }
                 else {
                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
                                             ((Tokens)(val_peek(0).obj)).text;
                 }
               }
break;
case 29:
//#line 576 "sql.y"
{
		 if(onlyText == 0) {
		  ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		  ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		  ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                  ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		  ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 		  ((Tokens)(yyval.obj)).alias = ((Tokens)(val_peek(0).obj)).text;
                  ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		  ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		  ((Tokens)(yyval.obj)).isUniqueColumn = false;
  		  ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		  ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                }
                else {
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                }
               }
break;
case 30:
//#line 597 "sql.y"
{
                  	if(onlyText == 0) {
                  	 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		   	 ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		   	 ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		  	 ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
		   	 ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		   	 ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
		  	 ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		  	 ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
                         ((Tokens)(yyval.obj)).columnRefTable = null;
                         ((Tokens)(yyval.obj)).columnRefField = null;
                       }
                       else {
                  	 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                       }
                     }
break;
case 31:
//#line 614 "sql.y"
{
                       if(onlyText == 0) {
                	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		  	((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		  	((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		  	((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
			((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
			((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
			((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		   	((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
                        ((Tokens)(yyval.obj)).columnRefTable = null;
                        ((Tokens)(yyval.obj)).columnRefField = null;
                       }
                       else {
                   	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                      }
                     }
break;
case 32:
//#line 631 "sql.y"
{
                       if(onlyText == 0) {
	                if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		   	     addColumnsList( (Tokens)(val_peek(0).obj),qvpColumnsListTemp );
                        }
                  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		  	((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		  	((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		  	((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
			((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
			((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
			((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		   	((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
                        ((Tokens)(yyval.obj)).columnRefTable = null;
                        ((Tokens)(yyval.obj)).columnRefField = null;
                       }
                       else {
                  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                       }
                      }
break;
case 33:
//#line 654 "sql.y"
{
		if(onlyText == 0) {
		  ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		  ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		  ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                  ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		  ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 		  ((Tokens)(yyval.obj)).alias = ((Tokens)(val_peek(0).obj)).text;
                  ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		  ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		  ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
  		  ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		  ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                }
                else {
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                }
              }
break;
case 34:
//#line 673 "sql.y"
{
                    if(onlyText == 0) {
                    	if(!this.isFromClauseInnerSelect)
                    	   throw new ParserSilentException("InterQuery : Relational operation involving Subquery. Line : "+line+" Column : "+column);
                    }
                    else {
		       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " (" + ((Tokens)(val_peek(1).obj)).text + ")";
                    }
                  }
break;
case 35:
//#line 682 "sql.y"
{
                    if(onlyText == 0) {
                    	if(!this.isFromClauseInnerSelect)
                    	   throw new ParserSilentException("InterQuery : Relational operation involving Subquery. Line : "+line+" Column : "+column);
                    }
                    else {
		       ((Tokens)(yyval.obj)).text = "(" + ((Tokens)(val_peek(1).obj)).text + ")";
                    }
                  }
break;
case 36:
//#line 694 "sql.y"
{
 	     if(onlyText == 0) {
		((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
	        ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	        ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 		((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
	        ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
	        ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
  		((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
             }
             else {
		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
             }
           }
break;
case 37:
//#line 712 "sql.y"
{
	     if(onlyText == 0) {
	      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " + " + ((Tokens)(val_peek(0).obj)).text;
              getResultPlusType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );

	      if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction) == Const.NONE)
	      	   ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 	      ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText +" + "+
                                                  ((Tokens)(val_peek(0).obj)).compositorText;
              ((Tokens)(yyval.obj)).compositor = new ArrayList<Object>(addCompositor(Const.PLUS,(Tokens)val_peek(2).obj,(Tokens)val_peek(0).obj));
              ((Tokens)(yyval.obj)).isUniqueColumn = false;
  	      ((Tokens)(yyval.obj)).columnRefTable = null;
 	      ((Tokens)(yyval.obj)).columnRefField = null;
            }
            else {
 	      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " + " + ((Tokens)(val_peek(0).obj)).text;
            }
           }
break;
case 38:
//#line 731 "sql.y"
{
	     if(onlyText == 0) {
	      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " - " + ((Tokens)(val_peek(0).obj)).text;
	      getResultMinusType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
	      if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction) == Const.NONE)
	      	   ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 	      ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText +" - "+
	                                          ((Tokens)(val_peek(0).obj)).compositorText;
	      ((Tokens)(yyval.obj)).compositor = new ArrayList<Object>(addCompositor(Const.MINUS,(Tokens)val_peek(2).obj,(Tokens)val_peek(0).obj));
	      ((Tokens)(yyval.obj)).isUniqueColumn = false;
              ((Tokens)(yyval.obj)).columnRefTable = null;
   	      ((Tokens)(yyval.obj)).columnRefField = null;
	    }
	    else {
	      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " - " + ((Tokens)(val_peek(0).obj)).text;
	    }
	   }
break;
case 39:
//#line 750 "sql.y"
{
	      if(onlyText == 0) {
		((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
		((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
  		((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
              }
              else {
		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
              }
            }
break;
case 40:
//#line 768 "sql.y"
{
              if(onlyText == 0) {
                ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " * " +
                                          ((Tokens)(val_peek(0).obj)).text;
                getResultMultiplicationType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
                if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction) == Const.NONE)
	      	     ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 		((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText +" * "+
                                                    ((Tokens)(val_peek(0).obj)).compositorText;
       		((Tokens)(yyval.obj)).compositor = new ArrayList<Object>(addCompositor(Const.MULTIPLICATION,(Tokens)val_peek(2).obj,(Tokens)val_peek(0).obj));
       		((Tokens)(yyval.obj)).isUniqueColumn = false;
  		((Tokens)(yyval.obj)).columnRefTable = null;
 		((Tokens)(yyval.obj)).columnRefField = null;
              }
              else {
                  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " * " + ((Tokens)(val_peek(0).obj)).text;
              }
            }
break;
case 41:
//#line 787 "sql.y"
{
	      if(onlyText == 0) {
	        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " / " + ((Tokens)(val_peek(0).obj)).text;
	        getResultDivisionType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
  	        if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction) == Const.NONE)
	      	     ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 		((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText +" / "+
                                                    ((Tokens)(val_peek(0).obj)).compositorText;
                ((Tokens)(yyval.obj)).compositor = new ArrayList<Object>(addCompositor(Const.DIVISION,(Tokens)val_peek(2).obj,(Tokens)val_peek(0).obj));
                ((Tokens)(yyval.obj)).isUniqueColumn = false;
  		((Tokens)(yyval.obj)).columnRefTable = null;
 		((Tokens)(yyval.obj)).columnRefField = null;
	      }
	      else {
	        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " / " + ((Tokens)(val_peek(0).obj)).text;
	      }
	    }
break;
case 42:
//#line 806 "sql.y"
{
		 	  if(onlyText == 0) {
		 	    ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		 	    ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		 	    ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
  			    ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
			    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			    ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
			    ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		            ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		            ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
  		            ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		            ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
			 }
			 else {
			    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			 }
			}
break;
case 43:
//#line 824 "sql.y"
{
	         	  if(onlyText == 0) {
	        		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text +
	        					  ((Tokens)(val_peek(1).obj)).text +
	                    		                  ((Tokens)(val_peek(0).obj)).text;
	        		getResultConcatenationType( (Tokens)(val_peek(2).obj),(Tokens)(val_peek(0).obj),(Tokens)(yyval.obj) );
  	        		if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction) == Const.NONE)
	      			     ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
 				((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText +" || "+
                		                                    ((Tokens)(val_peek(0).obj)).compositorText;
                		((Tokens)(yyval.obj)).compositor = new ArrayList<Object>(addCompositor(Const.CONCATENATION,(Tokens)val_peek(2).obj,(Tokens)val_peek(0).obj));
                		((Tokens)(yyval.obj)).isUniqueColumn = false;
  		                ((Tokens)(yyval.obj)).columnRefTable = null;
 		                ((Tokens)(yyval.obj)).columnRefField = null;
	    		  }
	    		  else {
	        		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text +  ((Tokens)(val_peek(1).obj)).text +
	                    		                  ((Tokens)(val_peek(0).obj)).text;
	    		  }
	    		}
break;
case 44:
//#line 846 "sql.y"
{
		 	 if(onlyText == 0) {
		 	    ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		 	    ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		 	    ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
  			    ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
			    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			    ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
			    ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		            ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		            ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
		            ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
  		            ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
  		         }
  		         else {
			    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
  		         }
  		       }
break;
case 45:
//#line 864 "sql.y"
{
                          if(onlyText == 0) {
                            ((Tokens)(yyval.obj)).text = "+" + ((Tokens)(val_peek(0).obj)).text;
                            getResultSignType( (Tokens)(val_peek(0).obj),(Tokens)(yyval.obj) );
                            ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
			    ((Tokens)(yyval.obj)).compositorText="+"+((Tokens)(val_peek(0).obj)).compositorText;
                            ((Tokens)(yyval.obj)).compositor = new ArrayList<Object>(addCompositor(Const.UNARY_PLUS,(Tokens)val_peek(0).obj));
                            ((Tokens)(yyval.obj)).isUniqueColumn = false;
  		            ((Tokens)(yyval.obj)).columnRefTable = null;
 		            ((Tokens)(yyval.obj)).columnRefField = null;
                         }
                         else {
                         }
                            ((Tokens)(yyval.obj)).text = "+" + ((Tokens)(val_peek(0).obj)).text;
                       }
break;
case 46:
//#line 880 "sql.y"
{
                         if(onlyText == 0) {
                            ((Tokens)(yyval.obj)).text = "-" + ((Tokens)(val_peek(0).obj)).text;
                            getResultSignType( (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
                            ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
			    ((Tokens)(yyval.obj)).compositorText = "-" + ((Tokens)(val_peek(0).obj)).compositorText;
                            ((Tokens)(yyval.obj)).compositor = new ArrayList<Object>(addCompositor(Const.UNARY_MINUS,(Tokens)val_peek(0).obj));
                            ((Tokens)(yyval.obj)).isUniqueColumn = false;
  		            ((Tokens)(yyval.obj)).columnRefTable = null;
 		            ((Tokens)(yyval.obj)).columnRefField = null;
                         }
                         else {
                            ((Tokens)(yyval.obj)).text = "-" + ((Tokens)(val_peek(0).obj)).text;
                         }
                       }
break;
case 47:
//#line 897 "sql.y"
{
		if(onlyText == 0) {
		   if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		   	selectAggregationFunctionCount++;
                   }
		   ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
 		   ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
 		   ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                   ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                   ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
		   ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		   ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		   ((Tokens)(yyval.obj)).isUniqueColumn = false;
		   ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		   ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                }
                else {
                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                }
              }
break;
case 48:
//#line 919 "sql.y"
{
                if(onlyText == 0) {
                 if(isFunctionParameter==0){
              	 	if( (columnsNotInGroupError = mustIncludeInGroupBy((Tokens)(val_peek(0).obj), subqueryLevel)) )
              	 		columnsNotInGroup += " " + ((Tokens)(val_peek(0).obj)).text + ",";
                 }
                 if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
                 	addColumnsList( ((Tokens)(val_peek(0).obj)),qvpColumnsListTemp );
                 }
		 ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		 ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		 ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                 ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
                 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                 ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
		 ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		 ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		 ((Tokens)(yyval.obj)).isUniqueColumn = true;
		 ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		 ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
               }
               else {
                  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
               }
              }
break;
case 49:
//#line 945 "sql.y"
{
		if(onlyText == 0) {
		   ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(1).obj)).type;
  		   ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(1).obj)).typeSize;
 		   ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(1).obj)).typePrecision;
 		   ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(1).obj)).typeLength;
                   ((Tokens)(yyval.obj)).text="(" + ((Tokens)(val_peek(1).obj)).text + ")";
                   ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(1).obj)).aggregationFunction;
		   ((Tokens)(yyval.obj)).compositorText = "("+((Tokens)(val_peek(1).obj)).compositorText+")";
                   ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(1).obj)).compositor);
                   ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(1).obj)).isUniqueColumn;
		   ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(1).obj)).columnRefTable;
 		   ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(1).obj)).columnRefField;
                }
                else {
                   ((Tokens)(yyval.obj)).text="(" + ((Tokens)(val_peek(1).obj)).text + ")";
                }
              }
break;
case 50:
//#line 964 "sql.y"
{
		if(onlyText == 0) {
		   ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		   ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		   ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                   ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		   ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
		   ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).text;
		   ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		   ((Tokens)(yyval.obj)).isUniqueColumn = false;
		   ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		   ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
	       }
	       else {
		   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	       }
	      }
break;
case 51:
//#line 982 "sql.y"
{
	        if(onlyText == 0) {
	           if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		   	addColumnsList( (Tokens)(val_peek(0).obj),qvpColumnsListTemp );
                   }                   
		   ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		   ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		   ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
	           ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	           ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
	           ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		   ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		   ((Tokens)(yyval.obj)).isUniqueColumn = false;
		   ((Tokens)(yyval.obj)).columnRefTable = null;
 		   ((Tokens)(yyval.obj)).columnRefField = null;
		   if(havingCase!=0 && !this.isFromClauseInnerSelect)
		   	throw(new ParserSilentException("InterQuery : Case in the Having clause. Line : "+line+" Column : "+column));
	        }
	        else {
		   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	        }
	      }
break;
case 52:
//#line 1005 "sql.y"
{
	        if(onlyText == 0) {
	           if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		   	addColumnsList( (Tokens)(val_peek(0).obj),qvpColumnsListTemp );
                   }
		   ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		   ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		   ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
	           ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	           ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
	           ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		   ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		   ((Tokens)(yyval.obj)).isUniqueColumn = false;
		   ((Tokens)(yyval.obj)).columnRefTable = null;
 		   ((Tokens)(yyval.obj)).columnRefField = null;
	        }
	        else {
		   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	        }
	      }
break;
case 53:
//#line 1026 "sql.y"
{
	        if(onlyText == 0) {
	           if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		   	addColumnsList( (Tokens)(val_peek(0).obj),qvpColumnsListTemp );
                   }
		   ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		   ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		   ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
	           ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	           ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
	           ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		   ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		   ((Tokens)(yyval.obj)).isUniqueColumn = false;
		   ((Tokens)(yyval.obj)).columnRefTable = null;
 		   ((Tokens)(yyval.obj)).columnRefField = null;
	        }
	        else {
		   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	        }
	      }
break;
case 54:
//#line 1050 "sql.y"
{
		   if(onlyText == 0) {
                     if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(4).obj)).aggregationFunction) == Const.NONE)
	      	     	  if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction) == Const.NONE)
	      	  		 ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;

                     Tokens tokenTemp1 = new Tokens();
                     Tokens tokenTemp2 = new Tokens();

                     tokenTemp1.compositor = new ArrayList<Object>(addCompositor(Const.GREATER_EQUAL,(Tokens)val_peek(4).obj,(Tokens)val_peek(2).obj));
                     tokenTemp2.compositor = new ArrayList<Object>(addCompositor(Const.LESS_EQUAL,(Tokens)val_peek(4).obj,(Tokens)val_peek(0).obj));
                     ((Tokens)(yyval.obj)).compositor = new ArrayList<Object>(addCompositor(Const.AND,tokenTemp1,tokenTemp2));

                     ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(4).obj)).compositorText + " >= "+
                                                         ((Tokens)(val_peek(2).obj)).compositorText + " and " +
                                                         ((Tokens)(val_peek(4).obj)).compositorText + " <= " +
                                                         ((Tokens)(val_peek(0).obj)).compositorText;
                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text + " " +  ((Tokens)(val_peek(3).obj)).text + " " +
                                               ((Tokens)(val_peek(2).obj)).text + " " +  ((Tokens)(val_peek(1).obj)).text + " " +
                                               ((Tokens)(val_peek(0).obj)).text;
                     getResultRelationalOpType((Tokens)(val_peek(4).obj),(Tokens)(val_peek(2).obj),(Tokens)(val_peek(0).obj),(Tokens)(yyval.obj));
                     ((Tokens)(yyval.obj)).columnRefTable = null;
                     ((Tokens)(yyval.obj)).columnRefField = null;
                   }
                   else {
                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text + " " + ((Tokens)(val_peek(3).obj)).text + " " +
                                               ((Tokens)(val_peek(2).obj)).text + " " +  ((Tokens)(val_peek(1).obj)).text + " " +
                                               ((Tokens)(val_peek(0).obj)).text;
                   }
                 }
break;
case 55:
//#line 1081 "sql.y"
{

                   if(onlyText == 0) {
                     if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(5).obj)).aggregationFunction) == Const.NONE)
		     	  if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction) == Const.NONE)
	      	  		((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;

                     Tokens tokenTemp1 = new Tokens();
		     Tokens tokenTemp2 = new Tokens();

		     tokenTemp1.compositor = new ArrayList<Object>(addCompositor(Const.LESS,(Tokens)val_peek(5).obj,(Tokens)val_peek(2).obj));
		     tokenTemp2.compositor = new ArrayList<Object>(addCompositor(Const.GREATER,(Tokens)val_peek(5).obj,(Tokens)val_peek(0).obj));
		     ((Tokens)(yyval.obj)).compositor = new ArrayList<Object>(addCompositor(Const.OR,tokenTemp1,tokenTemp2));

                     ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(5).obj)).compositorText + " < "+
                                                         ((Tokens)(val_peek(2).obj)).compositorText + " or " +
                                                         ((Tokens)(val_peek(5).obj)).compositorText + " > " +
                                                         ((Tokens)(val_peek(0).obj)).compositorText;
                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(5).obj)).text + " " + ((Tokens)(val_peek(4).obj)).text + " " +
                                             ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
                                             ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
                     getResultRelationalOpType((Tokens)(val_peek(5).obj),(Tokens)(val_peek(3).obj),(Tokens)(val_peek(1).obj),(Tokens)(yyval.obj));
                        ((Tokens)(yyval.obj)).columnRefTable = null;
                        ((Tokens)(yyval.obj)).columnRefField = null;
                   }
                   else {
                      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(5).obj)).text + " " + ((Tokens)(val_peek(4).obj)).text + " " +
                                                ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
                                                ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
                  }
                 }
break;
case 56:
//#line 1114 "sql.y"
{
                     if(onlyText == 0) {
                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " +  ((Tokens)(val_peek(1).obj)).text + " " +
                                                 ((Tokens)(val_peek(0).obj)).text;
	      	       getResultLikeType( (Tokens)(val_peek(2).obj),(Tokens)(val_peek(0).obj),(Tokens)(yyval.obj) );
                       if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction) == Const.NONE)
	      	  		((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;

                      ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText + " " +
                                                 	  ((Tokens)(val_peek(1).obj)).text + " " +
                                                 	  ((Tokens)(val_peek(0).obj)).compositorText;
                        ((Tokens)(yyval.obj)).columnRefTable = null;
                        ((Tokens)(yyval.obj)).columnRefField = null;
                     }
                     else {
                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
                                                 ((Tokens)(val_peek(0).obj)).text;
                     }
                  }
break;
case 57:
//#line 1134 "sql.y"
{
                     if(onlyText == 0) {
                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
                                                 ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
	      	       getResultLikeType( (Tokens)(val_peek(3).obj),(Tokens)(val_peek(1).obj),(Tokens)(yyval.obj) );
                       if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(3).obj)).aggregationFunction) == Const.NONE)
	      	  		((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(1).obj)).aggregationFunction;

                       ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(3).obj)).compositorText + " " +
                                                 	   ((Tokens)(val_peek(2).obj)).text + " " +
                                                 	   ((Tokens)(val_peek(1).obj)).compositorText + " " +
                                                 	   ((Tokens)(val_peek(0).obj)).compositorText;
                        ((Tokens)(yyval.obj)).columnRefTable = null;
                        ((Tokens)(yyval.obj)).columnRefField = null;
                    }
                    else {
                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
                                                 ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
                    }
               }
break;
case 58:
//#line 1154 "sql.y"
{
                    if(onlyText == 0) {
                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
                                                 ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
	      	       getResultLikeType( (Tokens)(val_peek(3).obj),(Tokens)(val_peek(0).obj),(Tokens)(yyval.obj) );
                       if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(3).obj)).aggregationFunction) == Const.NONE)
	      	  		((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;

                       ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(3).obj)).compositorText + " " +
                                                 	   ((Tokens)(val_peek(2).obj)).text + " " +
                                                	   ((Tokens)(val_peek(1).obj)).text + " " +
                                                	   ((Tokens)(val_peek(0).obj)).compositorText;
                       ((Tokens)(yyval.obj)).columnRefTable = null;
                       ((Tokens)(yyval.obj)).columnRefField = null;
                    }
                    else {
                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
                                                 ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
                    }
                 }
break;
case 59:
//#line 1174 "sql.y"
{
		    if(onlyText == 0) {
		       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text + " " + ((Tokens)(val_peek(3).obj)).text + " " +
		                                 ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
                                                 ((Tokens)(val_peek(0).obj)).text;
	      	       getResultLikeType( (Tokens)(val_peek(4).obj),(Tokens)(val_peek(1).obj),(Tokens)(yyval.obj) );
                       if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(4).obj)).aggregationFunction) == Const.NONE)
	      	  		((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(1).obj)).aggregationFunction;

		       ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(4).obj)).compositorText + " " +
		                                 	   ((Tokens)(val_peek(3).obj)).text + " " +
		                                 	   ((Tokens)(val_peek(2).obj)).text + " " +
                                                 	   ((Tokens)(val_peek(1).obj)).compositorText + " " +
                                                 	   ((Tokens)(val_peek(0).obj)).compositorText;
                       ((Tokens)(yyval.obj)).columnRefTable = null;
                       ((Tokens)(yyval.obj)).columnRefField = null;
                    }
                    else {
		       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text + " " + ((Tokens)(val_peek(3).obj)).text + " " +
		                                 ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
                                                 ((Tokens)(val_peek(0).obj)).text;
                    }
                 }
break;
case 60:
//#line 1205 "sql.y"
{
		      if(onlyText == 0) {
			((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(6).obj)).text+" in ("+((Tokens)(val_peek(3).obj)).text + " " +
			                          ((Tokens)(val_peek(2).obj)).text + ((Tokens)(val_peek(1).obj)).text + ")";
		        if(((Tokens)(val_peek(2).obj)).selectColumnCount>1)
		           yyerror("Subquery has too many columns : "+ new String(((Tokens)(yyval.obj)).text));
		        else {
		           if((((Tokens)(yyval.obj)).type=getResultInPredicateType(((Tokens)(val_peek(6).obj)).type,((Tokens)(val_peek(2).obj)).type))==Const.NONE)
		       	 	   yyerror("Type mismatch in the operation : "+ new String(((Tokens)(yyval.obj)).text));
		     	}
		     	((Tokens)(yyval.obj)).type = Const.BOOLEAN;
		        subqueryLevel--;
		     	isPartitionable = false;
		     	if(!this.isFromClauseInnerSelect) {
		     		if(havingCase==0)
		     			throw(new ParserSilentException("InterQuery : IN subquery in the Select clause. Line : "+line+" Column : "+ column));
		     		else
		     			throw(new ParserSilentException("InterQuery : IN subquery in the Having clause. Line : "+line+" Column : "+ column));
		     	}
		     }
		     else {
			((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(6).obj)).text+" in ("+((Tokens)(val_peek(3).obj)).text + " " +
						  ((Tokens)(val_peek(2).obj)).text + ((Tokens)(val_peek(1).obj)).text + ")";
		     }
		   }
break;
case 61:
//#line 1230 "sql.y"
{
		      if(onlyText == 0) {
		        ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(7).obj)).text + " not in (" +
		        			  ((Tokens)(val_peek(3).obj)).text + " " +  ((Tokens)(val_peek(2).obj)).text +
              				          ((Tokens)(val_peek(1).obj)).text + ")";
		        if(((Tokens)(val_peek(2).obj)).selectColumnCount>1)
		           yyerror("Subquery has too many columns : "+ new String(((Tokens)(yyval.obj)).text));
		        else {
		           if((((Tokens)(yyval.obj)).type=getResultInPredicateType(((Tokens)(val_peek(7).obj)).type,((Tokens)(val_peek(2).obj)).type))==Const.NONE)
		       	 	   yyerror("Type mismatch in the operation: "+ new String(((Tokens)(yyval.obj)).text));
		     	}
		     	((Tokens)(yyval.obj)).type = Const.BOOLEAN;
		        subqueryLevel--;
		     	isPartitionable = false;
		     	if(!this.isFromClauseInnerSelect) {
		     		if(havingCase==0)
		     		 	throw(new ParserSilentException("InterQuery : NOT IN subquery in the Select clause. Line : "+line+" Column : "+ column));
		     		else
		     		 	throw(new ParserSilentException("InterQuery : IN subquery in the Having clause. Line : "+line+" Column : "+ column));
		     	}
		     }
		     else {
		        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(7).obj)).text + " not in (" + ((Tokens)(val_peek(3).obj)).text +
		        		          " " +  ((Tokens)(val_peek(2).obj)).text + ((Tokens)(val_peek(1).obj)).text + ")";
		     }
		   }
break;
case 62:
//#line 1257 "sql.y"
{
		      if(onlyText == 0) {
		        ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text + " in (" + ((Tokens)(val_peek(1).obj)).text + ")";
		        if((((Tokens)(yyval.obj)).type=getResultInPredicateType(((Tokens)(val_peek(4).obj)).type,((Tokens)(val_peek(1).obj)).type))==Const.NONE)
		       		yyerror("Type mismatch in the operation : "+ new String(((Tokens)(yyval.obj)).text));
		        ((Tokens)(yyval.obj)).type = Const.BOOLEAN;
		     	isPartitionable = false;
		     }
		     else {
		        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text + " in (" + ((Tokens)(val_peek(1).obj)).text + ")";
		     }
		   }
break;
case 63:
//#line 1270 "sql.y"
{
		      if(onlyText == 0) {
		        ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(5).obj)).text + " not in (" + ((Tokens)(val_peek(1).obj)).text + ")";
		        if((((Tokens)(yyval.obj)).type=getResultInPredicateType(((Tokens)(val_peek(5).obj)).type,((Tokens)(val_peek(1).obj)).type))==Const.NONE)
		       		yyerror("Type mismatch in the operation : "+ new String(((Tokens)(yyval.obj)).text));

		        ((Tokens)(yyval.obj)).type = Const.BOOLEAN;
		     	isPartitionable = false;
		     }
		     else {
		        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(5).obj)).text + " not in (" + ((Tokens)(val_peek(1).obj)).text + ")";
		     }
		   }
break;
case 64:
//#line 1286 "sql.y"
{
		 if(onlyText == 0) {
		   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		   ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
	        }
	        else {
		   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	        }
	      }
break;
case 65:
//#line 1295 "sql.y"
{
		 if(onlyText == 0) {
		   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "," + ((Tokens)(val_peek(0).obj)).text;
		   ((Tokens)(yyval.obj)).type = getResultInPredicateType( ((Tokens)(val_peek(2).obj)).type ,
	                                                               ((Tokens)(val_peek(0).obj)).type );
	         }
	         else {
		   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "," + ((Tokens)(val_peek(0).obj)).text;
	         }
	      }
break;
case 66:
//#line 1311 "sql.y"
{
                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + ((Tokens)(val_peek(0).obj)).text;
                }
break;
case 67:
//#line 1314 "sql.y"
{ ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text; }
break;
case 68:
//#line 1317 "sql.y"
{
                    ((Tokens)(yyval.obj)).text=" "+((Tokens)(val_peek(1).obj)).text+" "+((Tokens)(val_peek(0).obj)).text;
                 }
break;
case 69:
//#line 1320 "sql.y"
{((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;}
break;
case 70:
//#line 1323 "sql.y"
{((Tokens)(yyval.obj)).text = ":" + ((Tokens)(val_peek(0).obj)).text;}
break;
case 71:
//#line 1326 "sql.y"
{((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;}
break;
case 72:
//#line 1329 "sql.y"
{
		   if(onlyText == 0) {
		     ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		     ((Tokens)(yyval.obj)).typePrecision = 0;
		     ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		     ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
                     ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
                     if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
                     	((Tokens)(yyval.obj)).compositor.clear();
                     	((Tokens)(yyval.obj)).compositor.add(((Tokens)(val_peek(0).obj)).text.substring(1,((Tokens)(val_peek(0).obj)).text.length() - 1));
                     	((Tokens)(yyval.obj)).compositor.trimToSize();
                     }
		     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                   }
                   else {
                     ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
                   }
                  }
break;
case 73:
//#line 1349 "sql.y"
{
		   if(onlyText == 0) {
		     ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		     ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		     ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		     ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
                     ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
                     if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
                     	((Tokens)(yyval.obj)).compositor.clear();
                     	((Tokens)(yyval.obj)).compositor.add(new Double(((Tokens)(val_peek(0).obj)).text));
                     	((Tokens)(yyval.obj)).compositor.trimToSize();
                     }
		     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                    }
                    else {
                     ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
                    }
                  }
break;
case 74:
//#line 1369 "sql.y"
{
		   if(onlyText == 0) {
		     ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		     ((Tokens)(yyval.obj)).typePrecision = 0;
		     ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		     ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
                     ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
                     if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
                     	((Tokens)(yyval.obj)).compositor.clear();
                     	((Tokens)(yyval.obj)).compositor.add(new Integer(((Tokens)(val_peek(0).obj)).text));
                     	((Tokens)(yyval.obj)).compositor.trimToSize();
                     }
		     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                   }
                   else {
                     ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
                   }
                  }
break;
case 75:
//#line 1389 "sql.y"
{
                      if(onlyText == 0) {
                        ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text ;
                        ((Tokens)(yyval.obj)).type = Const.CONST_DATE;
		 	((Tokens)(yyval.obj)).typePrecision = 0;
		 	((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
		        ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
                        /*if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0)*/
                        /*verificacao do formato da data*/
                        SimpleDateFormat formato = new SimpleDateFormat();
			formato.applyPattern("yyyy-MM-dd");
			String dataConteudo=((Tokens)(val_peek(0).obj)).text.substring(1,((Tokens)(val_peek(0).obj)).text.length() - 1);
                        try {
		 		((Tokens)(yyval.obj)).typeSize = 10;
				Date data = new Date();
				data = formato.parse(dataConteudo);
				((Tokens)(yyval.obj)).compositor.clear();
				((Tokens)(yyval.obj)).compositor.add(data);
				((Tokens)(yyval.obj)).compositor.trimToSize();
		        }
		        catch (ParseException e1) {
				/* TODO Auto-generated catch block*/
				yyerror("Invalid DATE type format : "+ new String(((Tokens)(yyval.obj)).text));
		        }
		       ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(1).obj)).columnRefTable;
		       ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(1).obj)).columnRefField;
		     }
		     else {
                        ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text ;
		     }
		  }
break;
case 76:
//#line 1420 "sql.y"
{
                     if(onlyText == 0) {
                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		       ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		       ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		       ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		       ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
		       ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).text;
		       ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		       ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		       ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                    }
                    else {
                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                    }
                  }
break;
case 77:
//#line 1436 "sql.y"
{
                     if(onlyText == 0) {
                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                       ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		       ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		       ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		       ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
                       ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
                       ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).text;
		       ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		       ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		       ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                    }
                    else {
                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                    }
                  }
break;
case 78:
//#line 1453 "sql.y"
{
      		     if(onlyText == 0) {
      		       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		       ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		       ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		       ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		       ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
      		       ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
                       ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).text;
		       ((Tokens)(yyval.obj)).compositor= new ArrayList<Object>(((Tokens)(val_peek(0).obj)).compositor);
		       ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		       ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
      		    }
      		    else {
       		       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
     		    }
      		  }
break;
case 79:
//#line 1472 "sql.y"
{
           if(onlyText == 0) {
             ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
             ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
	     ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
	     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
	     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
          }
          else {
             ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
          }
        }
break;
case 80:
//#line 1484 "sql.y"
{
          if(onlyText == 0) {
             ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
             ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
             ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
	     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
	     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
          }
          else {
             ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
          }
        }
break;
case 81:
//#line 1496 "sql.y"
{
          if(onlyText == 0) {
             ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
             ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
             ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
	     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
	     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
          }
          else {
             ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
          }
        }
break;
case 82:
//#line 1508 "sql.y"
{
          if(onlyText == 0) {
             ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
             ((Tokens)(yyval.obj)).type = Const.CONST_DATE;
             ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
	     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(1).obj)).columnRefTable;
	     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(1).obj)).columnRefField;
             SimpleDateFormat formato = new SimpleDateFormat();
		formato.applyPattern("yyyy-MM-dd");
		String dataConteudo=((Tokens)(val_peek(0).obj)).text.substring(1,((Tokens)(val_peek(0).obj)).text.length() - 1);
             try {
		Date data = new Date();
		data = formato.parse(dataConteudo);
		((Tokens)(yyval.obj)).compositor.clear();
		((Tokens)(yyval.obj)).compositor.add(data);
		((Tokens)(yyval.obj)).compositor.trimToSize();
	     }
	     catch (ParseException e1) {
	     	/* TODO Auto-generated catch block*/
	     	yyerror("Invalid DATE type format: "+ new String(((Tokens)(yyval.obj)).text));
	     }
          }
          else {
              ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
         }
        }
break;
case 83:
//#line 1534 "sql.y"
{
          if(onlyText == 0) {
             ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
             ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
	     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
	     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
          }
          else {
             ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
          }
        }
break;
case 84:
//#line 1546 "sql.y"
{
          if(onlyText == 0) {
             ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
             ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
	     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
	     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
          }
          else {
             ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
          }
        }
break;
case 85:
//#line 1558 "sql.y"
{
          if(onlyText == 0) {
             ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
             ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
	     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
	     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
          }
          else {
             ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
          }
        }
break;
case 86:
//#line 1573 "sql.y"
{
         if(onlyText == 0) {
            ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
            ((Tokens)(yyval.obj)).type = Const.CONST_STRING;
            ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).text.length()-2;
	    ((Tokens)(yyval.obj)).typePrecision = 0;
	    ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).text.length()-2;
            ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
            ((Tokens)(yyval.obj)).columnRefTable = null;
	    ((Tokens)(yyval.obj)).columnRefField = null;
         }
         else {
            ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
         }
       }
break;
case 87:
//#line 1590 "sql.y"
{
            if(onlyText == 0) {
             ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
             ((Tokens)(yyval.obj)).type = Const.CONST_DOUBLE;
	     ((Tokens)(yyval.obj)).typeSize = 0;
	     ((Tokens)(yyval.obj)).typePrecision = 0;
             ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).text.length();
             ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
             ((Tokens)(yyval.obj)).columnRefTable = null;
	     ((Tokens)(yyval.obj)).columnRefField = null;
            }
            else {
             ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
            }
          }
break;
case 88:
//#line 1607 "sql.y"
{
         if(onlyText == 0) {
            ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
            ((Tokens)(yyval.obj)).type = Const.CONST_INTEGER;
	    ((Tokens)(yyval.obj)).typeSize = 0;
	    ((Tokens)(yyval.obj)).typePrecision = 0;
	    ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).text.length();
            ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
            ((Tokens)(yyval.obj)).columnRefTable = null;
	    ((Tokens)(yyval.obj)).columnRefField = null;
         }
         else {
            ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
         }
       }
break;
case 89:
//#line 1624 "sql.y"
{
          if(onlyText == 0) {
            ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
            ((Tokens)(yyval.obj)).type = Const.CONST_BOOLEAN;
	    ((Tokens)(yyval.obj)).typeSize = 0;
	    ((Tokens)(yyval.obj)).typePrecision = 0;
	    ((Tokens)(yyval.obj)).typeLength = 0;
            ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
            if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
	     	((Tokens)(yyval.obj)).compositor.clear();
	        ((Tokens)(yyval.obj)).compositor.add(new Boolean(true));
	        ((Tokens)(yyval.obj)).compositor.trimToSize();
	    }
	    ((Tokens)(yyval.obj)).columnRefTable = null;
	    ((Tokens)(yyval.obj)).columnRefField = null;
          }
          else {
            ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
          }
        }
break;
case 90:
//#line 1644 "sql.y"
{
          if(onlyText == 0) {
            ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
            ((Tokens)(yyval.obj)).type = Const.CONST_BOOLEAN;
	    ((Tokens)(yyval.obj)).typeSize = 0;
	    ((Tokens)(yyval.obj)).typePrecision = 0;
	    ((Tokens)(yyval.obj)).typeLength = 0;
            ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
            if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
	     	((Tokens)(yyval.obj)).compositor.clear();
	        ((Tokens)(yyval.obj)).compositor.add(new Boolean(false));
	        ((Tokens)(yyval.obj)).compositor.trimToSize();
	    }
	    ((Tokens)(yyval.obj)).columnRefTable = null;
	    ((Tokens)(yyval.obj)).columnRefField = null;
         }
         else {
            ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
         }
       }
break;
case 91:
//#line 1666 "sql.y"
{
       if(onlyText == 0) {
            ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
            ((Tokens)(yyval.obj)).type = Const.CONST_NULL;
	    ((Tokens)(yyval.obj)).typeSize = 0;
	    ((Tokens)(yyval.obj)).typePrecision = 0;
	    ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).text.length();
            ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
            ((Tokens)(yyval.obj)).columnRefTable = null;
	    ((Tokens)(yyval.obj)).columnRefField = null;
       }
       else {
            ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
       }
     }
break;
case 92:
//#line 1683 "sql.y"
{
           if(onlyText == 0) {
              ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text ;
              ((Tokens)(yyval.obj)).type = Const.CONST_INTEGER;
	      ((Tokens)(yyval.obj)).typeSize = 0;
	      ((Tokens)(yyval.obj)).typePrecision = 0;
	      ((Tokens)(yyval.obj)).typeLength = 0;
              ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
              ((Tokens)(yyval.obj)).columnRefTable = null;
	      ((Tokens)(yyval.obj)).columnRefField = null;
           }
           else {
              ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text ;
           }
         }
break;
case 93:
//#line 1698 "sql.y"
{
             if(onlyText == 0) {
              ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text ;
              ((Tokens)(yyval.obj)).type = Const.CONST_INTEGER;
	      ((Tokens)(yyval.obj)).typeSize = 0;
	      ((Tokens)(yyval.obj)).typePrecision = 0;
	      ((Tokens)(yyval.obj)).typeLength = 0;
              ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
              ((Tokens)(yyval.obj)).columnRefTable = null;
	      ((Tokens)(yyval.obj)).columnRefField = null;
             }
             else {
              ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text ;
             }
           }
break;
case 94:
//#line 1719 "sql.y"
{
                       if(onlyText == 0) {
                         isFunctionParameter--;
                         if( ( ((Tokens)(val_peek(3).obj)).text.toLowerCase() ).equals("avg") ){
                           ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + "(" + ((Tokens)(val_peek(1).obj)).text + ")" ;

                           ((Tokens)(yyval.obj)).type = getResultAggregationFunctionType((Tokens)(val_peek(1).obj),Const.AVG,(Tokens)(yyval.obj));
                           ((Tokens)(yyval.obj)).aggregationFunction = Const.AVG;
                           if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
                           	ArrayList<Object> compositorTemp =new ArrayList<Object>(0);
                           	String sumCompositor;

                           	((Tokens)(yyval.obj)).text="sum"+"("+((Tokens)(val_peek(1).obj)).text+")";
                           	((Tokens)(yyval.obj)).aggregationFunction = Const.SUM;
                                ((Tokens)(yyval.obj)).type = getResultAggregationFunctionType( (Tokens)(val_peek(1).obj),
                               				 	        	  	     Const.SUM,
                               				      	 	 		    (Tokens)(yyval.obj) );
                           	addColumnsList( (Tokens)(yyval.obj),qvpColumnsListTemp );
                           	sumCompositor = ((Tokens)(yyval.obj)).compositorText;
                           	compositorTemp.add(new Operator(4));
                           	compositorTemp.addAll(((Tokens)(yyval.obj)).compositor);
                           	((Tokens)(yyval.obj)).compositor.clear();
                           	((Tokens)(yyval.obj)).compositor.trimToSize();

                           	((Tokens)(yyval.obj)).text="count"+"("+((Tokens)(val_peek(1).obj)).text+")";
                           	((Tokens)(yyval.obj)).aggregationFunction = Const.COUNT;
                                ((Tokens)(yyval.obj)).type = getResultAggregationFunctionType( (Tokens)(val_peek(1).obj),
                               				 	        	  	     Const.COUNT,
                               				      	 	 		    (Tokens)(yyval.obj) );
                           	addColumnsList( ((Tokens)(yyval.obj)),qvpColumnsListTemp );
                           	compositorTemp.addAll(((Tokens)(yyval.obj)).compositor);
                           	((Tokens)(yyval.obj)).compositor = new ArrayList<Object>(compositorTemp);
                           	((Tokens)(yyval.obj)).compositor.trimToSize();

                           	((Tokens)(yyval.obj)).compositorText = sumCompositor + " / " +
                                                          ((Tokens)(yyval.obj)).compositorText;
                           	((Tokens)(yyval.obj)).text="avg(" + ((Tokens)(val_peek(1).obj)).text + ")";
                           }
                          }
                          else {
                           ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(3).obj)).text + "(" + ((Tokens)(val_peek(1).obj)).text + ")";
                           ((Tokens)(yyval.obj)).type = getResultAggregationFunctionType( (Tokens)(val_peek(1).obj) ,
			              					  ((Tokens)(val_peek(3).obj)).aggregationFunction,
			              					  (Tokens)(yyval.obj) );
                           ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(3).obj)).aggregationFunction;

                           if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
                           	addColumnsList( ((Tokens)(yyval.obj)),qvpColumnsListTemp );
                           }
                          }
  		          ((Tokens)(yyval.obj)).columnRefTable = null;
 		          ((Tokens)(yyval.obj)).columnRefField = null;
                        }
                        else {
                           ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + "(" + ((Tokens)(val_peek(1).obj)).text + ")" ;
                        }
                      }
break;
case 95:
//#line 1778 "sql.y"
{
 	       if(onlyText == 0) {
 	          isFunctionParameter++;
 	          ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
 	       }
 	       else {
		  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
 	       }
 	     }
break;
case 96:
//#line 1789 "sql.y"
{
                   ((Tokens)(yyval.obj)).aggregationFunction = Const.AVG;
		   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                }
break;
case 97:
//#line 1793 "sql.y"
{
                   ((Tokens)(yyval.obj)).aggregationFunction = Const.MIN;
                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		}
break;
case 98:
//#line 1797 "sql.y"
{
                   ((Tokens)(yyval.obj)).aggregationFunction = Const.MAX;
                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		}
break;
case 99:
//#line 1801 "sql.y"
{
                   ((Tokens)(yyval.obj)).aggregationFunction = Const.SUM;
                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		}
break;
case 100:
//#line 1805 "sql.y"
{
                   ((Tokens)(yyval.obj)).aggregationFunction = Const.COUNT;
                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		}
break;
case 101:
//#line 1812 "sql.y"
{ 
 		      if(onlyText == 0) {
 		         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			 ((Tokens)(yyval.obj)).typeSize = 0;
			 ((Tokens)(yyval.obj)).typePrecision = 0;
 		         ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
  		         ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		         ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
 		      }
 		      else {
 		         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
 		      }
 		    }
break;
case 102:
//#line 1825 "sql.y"
{
                      if(onlyText == 0) {
                         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
			 ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
			 ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
                         ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
  		         ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		         ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                      }
                      else {
                         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
                      }
                    }
break;
case 103:
//#line 1838 "sql.y"
{
                      if(onlyText == 0) {
                         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
			 ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
			 ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
                         ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
  		         ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		         ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                      }
                      else {
                         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
                      }
                    }
break;
case 104:
//#line 1851 "sql.y"
{
                      if(onlyText == 0) {
                         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			 ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
			 ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
                         ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
  		         ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		         ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                      }
                      else {
                         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                      }
                    }
break;
case 105:
//#line 1867 "sql.y"
{
   		      if(onlyText == 0) {
   			 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			 ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
			 ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
   		         ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
  		         ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		         ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
   		      }
   		      else {
   			 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
   		      }
   		    }
break;
case 106:
//#line 1880 "sql.y"
{
		      if(onlyText == 0) {
		        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " + " + ((Tokens)(val_peek(0).obj)).text;
		        getResultPlusType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
  		        ((Tokens)(yyval.obj)).columnRefTable = null;
 		        ((Tokens)(yyval.obj)).columnRefField = null;
		      }
		      else {
		        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " + " + ((Tokens)(val_peek(0).obj)).text;
		      }
		    }
break;
case 107:
//#line 1891 "sql.y"
{
	              if(onlyText == 0) {
	                ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " - " + ((Tokens)(val_peek(0).obj)).text;
	                getResultMinusType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
  		        ((Tokens)(yyval.obj)).columnRefTable = null;
 		        ((Tokens)(yyval.obj)).columnRefField = null;
	              }
	              else {
	                ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " - " + ((Tokens)(val_peek(0).obj)).text;
	              }
	            }
break;
case 108:
//#line 1904 "sql.y"
{
                       if(onlyText == 0) {
                          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			  ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
			  ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
                          ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
  		          ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		          ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                       }
                       else {
                          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                       }
                     }
break;
case 109:
//#line 1917 "sql.y"
{
                      if(onlyText == 0) {
                        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " * " + ((Tokens)(val_peek(0).obj)).text;
                        getResultMultiplicationType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
  		        ((Tokens)(yyval.obj)).columnRefTable = null;
 		        ((Tokens)(yyval.obj)).columnRefField = null;
                      }
                      else {
                        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " * " + ((Tokens)(val_peek(0).obj)).text;
                      }
                     }
break;
case 110:
//#line 1928 "sql.y"
{
		      if(onlyText == 0) {
		        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " / " + ((Tokens)(val_peek(0).obj)).text;
		         getResultDivisionType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
  		        ((Tokens)(yyval.obj)).columnRefTable = null;
 		        ((Tokens)(yyval.obj)).columnRefField = null;
                      }
                      else {
		        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " / " + ((Tokens)(val_peek(0).obj)).text;
                      }
                     }
break;
case 111:
//#line 1941 "sql.y"
{
			  if(onlyText == 0) {
			    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		 	    ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		 	    ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
  			    ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
  		            ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		            ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
			  }
			  else {
			    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			  }
			}
break;
case 112:
//#line 1954 "sql.y"
{
	        	  if(onlyText == 0) {
	        		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + ((Tokens)(val_peek(1).obj)).text +
	                    		                  ((Tokens)(val_peek(0).obj)).text;
	        		getResultConcatenationType( (Tokens)(val_peek(2).obj),(Tokens)(val_peek(0).obj),(Tokens)(yyval.obj) );
  		                ((Tokens)(yyval.obj)).columnRefTable = null;
 		                ((Tokens)(yyval.obj)).columnRefField = null;
	    		  }
	    		  else {
	        		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + ((Tokens)(val_peek(1).obj)).text +
	                    		                  ((Tokens)(val_peek(0).obj)).text;
	    		  }
	    		}
break;
case 113:
//#line 1969 "sql.y"
{
                                  if(onlyText == 0) {
                                     ((Tokens)(yyval.obj)).text = "+ " + ((Tokens)(val_peek(0).obj)).text;
                                     getResultSignType( (Tokens)(val_peek(0).obj),(Tokens)(yyval.obj) );
  		        	     ((Tokens)(yyval.obj)).columnRefTable = null;
 		         	     ((Tokens)(yyval.obj)).columnRefField = null;
                                  }
                                  else {
                                     ((Tokens)(yyval.obj)).text = "+ " + ((Tokens)(val_peek(0).obj)).text;
                                  }
                                }
break;
case 114:
//#line 1981 "sql.y"
{
                                  if(onlyText == 0) {
                                     ((Tokens)(yyval.obj)).text = "- " + ((Tokens)(val_peek(0).obj)).text;
                                     getResultSignType( (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
  			             ((Tokens)(yyval.obj)).columnRefTable = null;
 		 	             ((Tokens)(yyval.obj)).columnRefField = null;
                                  }
                                  else {
                                     ((Tokens)(yyval.obj)).text = "- " + ((Tokens)(val_peek(0).obj)).text;
                                  }
                                }
break;
case 115:
//#line 1993 "sql.y"
{
                                  if(onlyText == 0) {
                                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			 	     ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
				     ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
                                     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
	   		             ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
	 		             ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                                  }
                                  else {
                                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                                  }
                                }
break;
case 116:
//#line 2008 "sql.y"
{
                         if(onlyText == 0) {
                            ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			    ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
			    ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
                            ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
  		            ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		            ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
                         }
                         else {
                            ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                         }
                       }
break;
case 117:
//#line 2021 "sql.y"
{
                         if(onlyText == 0) {
                            ((Tokens)(yyval.obj)).text="(" + ((Tokens)(val_peek(1).obj)).text + ")";
			    ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(1).obj)).typeSize;
			    ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(1).obj)).typePrecision;
                            ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(1).obj)).type;
  		            ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(1).obj)).columnRefTable;
 		            ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(1).obj)).columnRefField;
                         }
                         else {
                            ((Tokens)(yyval.obj)).text="(" + ((Tokens)(val_peek(1).obj)).text + ")";
                         }
                       }
break;
case 118:
//#line 2034 "sql.y"
{
                  	 if(onlyText == 0) {
                  	    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			    ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
			    ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
                  	    ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
  		            ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
 		            ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
		         }
		         else {
                  	    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		         }
		       }
break;
case 119:
//#line 2047 "sql.y"
{
		       	 if(onlyText == 0) {
		       	    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		       	    ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
			    ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
			    ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		            ((Tokens)(yyval.obj)).columnRefTable = null;
		            ((Tokens)(yyval.obj)).columnRefField = null;
	       	         }
	       	         else {
		       	    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	       	         }
	       	       }
break;
case 120:
//#line 2060 "sql.y"
{	       	       
		       	 if(onlyText == 0) {
		       	    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		       	    ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
			    ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
			    ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		            ((Tokens)(yyval.obj)).columnRefTable = null;
		            ((Tokens)(yyval.obj)).columnRefField = null;
	       	         }
	       	         else {
		       	    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	       	         }
	       	       }
break;
case 121:
//#line 2073 "sql.y"
{	       	       
		       	 if(onlyText == 0) {
		       	    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		       	    ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
			    ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
			    ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		            ((Tokens)(yyval.obj)).columnRefTable = null;
		            ((Tokens)(yyval.obj)).columnRefField = null;
	       	         }
	       	         else {
		       	    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	       	         }
	       	       }
break;
case 122:
//#line 2093 "sql.y"
{
	        	    if(onlyText == 0) {
			       ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
			       ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
			       ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
	        	       ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
			       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	        	       ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
	        	       ((Tokens)(yyval.obj)).columnRefTable = null;
			       ((Tokens)(yyval.obj)).columnRefField = null;
			       ((Tokens)(yyval.obj)).isUniqueColumn = false;
	        	    }
	        	    else {
			       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	        	    }			    
		       }
break;
case 123:
//#line 2118 "sql.y"
{ 
			 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(5).obj)).text + "( " + ((Tokens)(val_peek(3).obj)).text + " " +
			    			   ((Tokens)(val_peek(2).obj)).text + " "  + ((Tokens)(val_peek(1).obj)).text + " )";	        	 
	        	 if(onlyText == 0) {
			    getResultExtractType( (Tokens)(val_peek(1).obj),(Tokens)(yyval.obj) );
	        	 }
		   }
break;
case 124:
//#line 2127 "sql.y"
{((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;}
break;
case 125:
//#line 2130 "sql.y"
{
                   if(onlyText == 0) {
                      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		      ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		      ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
                      ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
                   }
                   else {
                      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
                   }		     
 	       }
break;
case 126:
//#line 2147 "sql.y"
{
	        	    if(onlyText == 0) {
			       ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
			       ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
			       ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
	        	       ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
			       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	        	       ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
	        	       ((Tokens)(yyval.obj)).columnRefTable = null;
			       ((Tokens)(yyval.obj)).columnRefField = null;
			       ((Tokens)(yyval.obj)).isUniqueColumn = false;
	        	    }
	        	    else {
			       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
	        	    }			    
		       }
break;
case 127:
//#line 2174 "sql.y"
{
			 	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(5).obj)).text + "( " + ((Tokens)(val_peek(3).obj)).text + " " +
			    			   	  ((Tokens)(val_peek(2).obj)).text + " "  + ((Tokens)(val_peek(1).obj)).text + " )";	        	 
	        	 	if(onlyText == 0) {
			 	   getResultSubstringType( (Tokens)(val_peek(3).obj),(Tokens)(yyval.obj) );
	        	 	}			     
			      }
break;
case 128:
//#line 2181 "sql.y"
{
			 	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(7).obj)).text + "( " + ((Tokens)(val_peek(5).obj)).text + " " +
			    			   	  ((Tokens)(val_peek(4).obj)).text + " "  + ((Tokens)(val_peek(3).obj)).text + " " +
			    			   	  ((Tokens)(val_peek(2).obj)).text + " "  + ((Tokens)(val_peek(1).obj)).text +" )";	        	 
	        	 	if(onlyText == 0) {
			 	   getResultSubstringType( (Tokens)(val_peek(5).obj),(Tokens)(yyval.obj) );
	        	 	}			      
			      }
break;
case 129:
//#line 2195 "sql.y"
{((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;}
break;
case 130:
//#line 2199 "sql.y"
{
       	      if(onlyText == 0) {
       		 ((Tokens)(yyval.obj)).type = getColumnType( ((Tokens)(val_peek(0).obj)).text ,subqueryLevel,(Tokens)(val_peek(0).obj) );
       		 ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
       		 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
       		 ((Tokens)(yyval.obj)).columnRefTable = getColumnRefTable(((Tokens)(val_peek(0).obj)).text,subqueryLevel);
       		 ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).text;
       		 ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
       		 ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
       		 ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
              }
              else {
       		 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
              }
            }
break;
case 131:
//#line 2214 "sql.y"
{
	      if(onlyText == 0) {
		 if(findTable(((Tokens)(val_peek(2).obj)).text,subqueryLevel)==null)
		 	yyerror("Table " + new String(((Tokens)(val_peek(2).obj)).text) + " does not referred in FROM clause");
		 else {
		 	((Tokens)(yyval.obj)).columnRefTable = getColumnRefTable( ((Tokens)(val_peek(2).obj)).text,
		 	 						       ((Tokens)(val_peek(0).obj)).text,
		 							       subqueryLevel );
                 	((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).text;
                 }
                 ((Tokens)(yyval.obj)).type = Const.INTEGER;
       		 ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
       		 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "." + ((Tokens)(val_peek(0).obj)).text;
 	         if(!this.isFromClauseInnerSelect)
 	      	   throw(new ParserSilentException("InterQuery : Wildcard. Line : "+line+" Column : " + column));
              }
              else {
        		 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "." + ((Tokens)(val_peek(0).obj)).text;
             }
            }
break;
case 132:
//#line 2234 "sql.y"
{
              if(onlyText == 0) {
                 if(findTable(((Tokens)(val_peek(2).obj)).text,subqueryLevel)==null)
		 	yyerror("Table " + new String(((Tokens)(val_peek(2).obj)).text) + " does not referred in FROM clause");
		 else {
		 	((Tokens)(yyval.obj)).columnRefTable = getColumnRefTable( ((Tokens)(val_peek(2).obj)).text,
		 	 						       ((Tokens)(val_peek(0).obj)).text,
		 							       subqueryLevel );
                 	((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).text;
                 }
       		 ((Tokens)(yyval.obj)).type = getColumnType(((Tokens)(val_peek(2).obj)).text,((Tokens)(val_peek(0).obj)).text,subqueryLevel,(Tokens)(yyval.obj) );
       		 ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
       		 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "." + ((Tokens)(val_peek(0).obj)).text;
              }
              else {
       		 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "." + ((Tokens)(val_peek(0).obj)).text;
              }
            }
break;
case 133:
//#line 2254 "sql.y"
{((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;}
break;
case 134:
//#line 2258 "sql.y"
{
          ((Tokens)(yyval.obj)).text = " " + ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
       }
break;
case 135:
//#line 2263 "sql.y"
{((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;}
break;
case 136:
//#line 2264 "sql.y"
{((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;}
break;
case 137:
//#line 2265 "sql.y"
{((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;}
break;
case 138:
//#line 2268 "sql.y"
{((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;}
break;
case 139:
//#line 2269 "sql.y"
{
                 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "," + ((Tokens)(val_peek(0).obj)).text;
              }
break;
case 140:
//#line 2274 "sql.y"
{((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;}
break;

//#line 8027 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    }//else
    //#### Now let's reduce... ####
    //if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      //if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        //if (yychar<0) yychar=0;  //clean, if necessary
        //if (yydebug)
          //yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      //if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################

private void doSwitch2(int my_yyn) throws ParserSilentException{
	switch(my_yyn){
	case 141:
//		#line 2283 "sql.y"
		{
				  if(onlyText == 0) {
				     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				     ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
				     ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
				     ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
				     ((Tokens)(yyval.obj)).aggregationFunction =((Tokens)(val_peek(0).obj)).aggregationFunction;
				     isSelectExp--;
				  }
				  else {
				     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				  }
				}
		break;
		case 142:
//		#line 2297 "sql.y"
		{
				  if(onlyText == 0) {
				     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				     ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
				     ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
				     ((Tokens)(yyval.obj)).typeLength = ((Tokens)(val_peek(0).obj)).typeLength;
				     ((Tokens)(yyval.obj)).aggregationFunction =((Tokens)(val_peek(0).obj)).aggregationFunction;
				     isSelectExp--;
				  }
				  else {
				     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				  }
				}
		break;
		case 143:
//		#line 2313 "sql.y"
		{
				    if(onlyText == 0) {
				       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(5).obj)).text + "(" + ((Tokens)(val_peek(3).obj)).text + "," +
		 	       				         ((Tokens)(val_peek(1).obj)).text + ")";
				       getResultNullIfType( (Tokens)(val_peek(3).obj), (Tokens)(val_peek(1).obj), (Tokens)(yyval.obj) );
				       if( ((((Tokens)(val_peek(1).obj)).aggregationFunction != Const.NONE) ||
				           (((Tokens)(val_peek(3).obj)).aggregationFunction != Const.NONE)) && !this.isFromClauseInnerSelect ) {
				     	   throw(new ParserSilentException("InterQuery : Aggregation function in the NullIf clause. Line : "+line+" Column : "+column));
			      	       }
				    }
				    else {
				       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(5).obj)).text + "(" + ((Tokens)(val_peek(3).obj)).text + "," +
		 	       				         ((Tokens)(val_peek(1).obj)).text + ")";
				    }
				  }
		break;
		case 144:
//		#line 2328 "sql.y"
		{
				    if(onlyText == 0) {
				       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + "(" + ((Tokens)(val_peek(1).obj)).text + ")";
				       if( (((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(1).obj)).type) == Const.NONE )
				       		yyerror("Type mismatch in the operation : "+ new String(((Tokens)(yyval.obj)).text));
				       else {
				      	   ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(3).obj)).typeSize;
				    	   ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(3).obj)).typePrecision;

				       }
				       if( (((Tokens)(val_peek(1).obj)).aggregationFunction != Const.NONE) && !this.isFromClauseInnerSelect) {
				       		isPartitionable = false;
				     	        throw(new ParserSilentException("InterQuery : Aggregation function in the Coalesce clause. Line : "+line+" Column : "+column));
				       }
				       ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(1).obj)).aggregationFunction;
				    }
				    else {
				       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + "(" + ((Tokens)(val_peek(1).obj)).text + ")";
				    }
				  }
		break;
		case 145:
//		#line 2350 "sql.y"
		{
		         if(onlyText == 0) {
		            isSelectExp++;
		            ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		         }
		         else {
		            ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		         }
		       }
		break;
		case 146:
//		#line 2361 "sql.y"
		{
		           if(onlyText == 0) {
		            isSelectExp++;
		            ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		           }
		           else {
		            ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		           }
		       }
		break;
		case 147:
//		#line 2372 "sql.y"
		{
		       if(onlyText == 0) {
			  isSelectExp++;
		          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		       }
		       else {
		          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		       }
		     }
		break;
		case 148:
//		#line 2383 "sql.y"
		{
				   	 if(onlyText == 0) {
				   	   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				           ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				      	   ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
				    	   ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
				           ((Tokens)(yyval.obj)).aggregationFunction =((Tokens)(val_peek(0).obj)).aggregationFunction;
		  		        }
		  		        else {
		 		   	   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		 		        }
		  		      }
		break;
		case 149:
//		#line 2395 "sql.y"
		{
				   	if(onlyText == 0) {
				   	   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "," + ((Tokens)(val_peek(0).obj)).text;
				           getResultCoalesceType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj));

				           if((((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction)==Const.NONE)
				           	((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
				           ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(2).obj)).aggregationFunction;
		  		        }
		  		        else {
				   	   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "," + ((Tokens)(val_peek(0).obj)).text;
		  		        }
		  		      }
		break;
		case 150:
//		#line 2410 "sql.y"
		{
				     if(onlyText == 0) {
				  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				  	((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				      	((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
				    	((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
				     }
				     else {
				  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				     }
				   }
		break;
		case 151:
//		#line 2421 "sql.y"
		{
				     if(onlyText == 0) {
				  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				  	((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				      	((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
				        ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
				     }
				     else {
				  	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				     }
				   }
		break;
		case 152:
//		#line 2434 "sql.y"
		{
			      if(onlyText == 0) {
			         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
			         			   ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
				 ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(1).obj)).type;
				 ((Tokens)(yyval.obj)).caseWhenType = getCaseWhenType( ((Tokens)(val_peek(2).obj)).caseWhenType ,
			                                                            ((Tokens)(val_peek(1).obj)).caseWhenType );
				 if((((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction)==Const.NONE) {
				     ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(1).obj)).aggregationFunction;
				 }
				 if( ((Tokens)(yyval.obj)).caseWhenType == Const.NONE )
				 	yyerror("Type mismatch in the WHEN clause : "+ new String(((Tokens)(yyval.obj)).text));

				 if( ((Tokens)(yyval.obj)).type == Const.NONE )
				 	yyerror("Invalid returned type : "+ new String(((Tokens)(yyval.obj)).text));

				 if( ((((Tokens)(val_peek(2).obj)).aggregationFunction != Const.NONE) ||
				     (((Tokens)(val_peek(1).obj)).aggregationFunction != Const.NONE)) && !this.isFromClauseInnerSelect  ) {
				 	isPartitionable = false;
		 	     	        throw(new ParserSilentException("InterQuery : Aggregation function in the Case clause. Line : "+line+" Column : "+column));
			         }
			      }
			      else {
			         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
			         			   ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
			      }
			    }
		break;
		case 153:
//		#line 2461 "sql.y"
		{
			      if(onlyText == 0) {
			         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text + " " + ((Tokens)(val_peek(3).obj)).text + " " +
			         			   ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
			         			   ((Tokens)(val_peek(0).obj)).text;
				 getResultCaseType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(1).obj), (Tokens)(yyval.obj) );
				 ((Tokens)(yyval.obj)).caseWhenType = getCaseWhenType( ((Tokens)(val_peek(3).obj)).caseWhenType ,
			                                                    	    ((Tokens)(val_peek(2).obj)).caseWhenType );
				 if((((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(3).obj)).aggregationFunction)==Const.NONE) {
				    if((((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction)==Const.NONE)
				        ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(1).obj)).aggregationFunction;
				 }
				 if( ((Tokens)(yyval.obj)).caseWhenType == Const.NONE )
				 	yyerror("Type mismatch in the WHEN clause : "+ new String(((Tokens)(yyval.obj)).text));

				 if( ((Tokens)(yyval.obj)).type == Const.NONE )
				 	yyerror("Invalid returned type : "+ new String(((Tokens)(yyval.obj)).text));

				 if( ((((Tokens)(val_peek(3).obj)).aggregationFunction != Const.NONE) ||
				     (((Tokens)(val_peek(2).obj)).aggregationFunction != Const.NONE) ||
				     (((Tokens)(val_peek(1).obj)).aggregationFunction != Const.NONE)) && !this.isFromClauseInnerSelect ) {
				 	isPartitionable = false;
				     	throw(new ParserSilentException("InterQuery : Aggregation function in the Case clause. Line : "+line+" Column : "+column));
			         }
			      }
			      else {
			         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text + " " + ((Tokens)(val_peek(3).obj)).text + " " +
			         			   ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
			         			   ((Tokens)(val_peek(0).obj)).text;
			      }
			    }
		break;
		case 154:
//		#line 2494 "sql.y"
		{
					  if(onlyText == 0) {
					     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
					     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
					     ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
					     ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
					     ((Tokens)(yyval.obj)).caseWhenType = ((Tokens)(val_peek(0).obj)).caseWhenType;
					     ((Tokens)(yyval.obj)).aggregationFunction =((Tokens)(val_peek(0).obj)).aggregationFunction;
					  }
					   else {
					     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
					   }
					}
		break;
		case 155:
//		#line 2507 "sql.y"
		{
			  		  if(onlyText == 0) {
			  		     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
					     getResultCaseType( (Tokens)(val_peek(1).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
					     ((Tokens)(yyval.obj)).caseWhenType = getCaseWhenType( ((Tokens)(val_peek(1).obj)).caseWhenType ,
			                                                                        ((Tokens)(val_peek(0).obj)).caseWhenType );
					     if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(1).obj)).aggregationFunction) == Const.NONE)
			      	     		  ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
					  }
					  else {
			  		     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
					  }
					}
		break;
		case 156:
//		#line 2522 "sql.y"
		{
				     if(onlyText == 0) {
				        ((Tokens)(yyval.obj)).text = "when "+((Tokens)(val_peek(2).obj)).text+" then "+((Tokens)(val_peek(0).obj)).text;
		 		        ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
					((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
					((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		 		        ((Tokens)(yyval.obj)).caseWhenType = ((Tokens)(val_peek(2).obj)).caseWhenType;
		 		        if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction) == Const.NONE)
			      	             ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
				     }
				     else {
				        ((Tokens)(yyval.obj)).text = "when "+((Tokens)(val_peek(2).obj)).text+" then "+((Tokens)(val_peek(0).obj)).text;
				     }
				   }
		break;
		case 157:
//		#line 2538 "sql.y"
		{
			      if(onlyText == 0) {
				  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
				  ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				  ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
				  ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
				  ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(0).obj)).aggregationFunction;
			      }
			      else {
				  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
			      }
			    }
		break;
		case 158:
//		#line 2552 "sql.y"
		{
			       if(onlyText == 0) {
			         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
			         			   ((Tokens)(val_peek(0).obj)).text ;
				 ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(1).obj)).type;
				 ((Tokens)(yyval.obj)).caseWhenType = ((Tokens)(val_peek(1).obj)).caseWhenType;
				 ((Tokens)(yyval.obj)).aggregationFunction = ((Tokens)(val_peek(1).obj)).aggregationFunction;
				 if( (((Tokens)(yyval.obj)).caseWhenType != Const.BOOLEAN) &&
				     (((Tokens)(yyval.obj)).caseWhenType != Const.CONST_BOOLEAN))
				 	yyerror("CASE/WHEN parameters must be BOOLEAN : "+ new String(((Tokens)(yyval.obj)).text));

				 if( ((Tokens)(yyval.obj)).type == Const.NONE )
				 	yyerror("Invalid returned type : "+ new String(((Tokens)(yyval.obj)).text));

				 if( (((Tokens)(val_peek(1).obj)).aggregationFunction != Const.NONE) && !this.isFromClauseInnerSelect) {
				 	isPartitionable = false;
				     	throw(new ParserSilentException("InterQuery : Aggregation function in the Case clause. Line : "+line+" Column : "+column));
			         }
			      }
			      else {
			         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
			         			   ((Tokens)(val_peek(0).obj)).text ;
			      }
			    }
		break;
		case 159:
//		#line 2577 "sql.y"
		{
			        if(onlyText == 0) {
			         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
			         			   ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text ;
				 getResultCaseType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(1).obj), (Tokens)(yyval.obj) );
				 ((Tokens)(yyval.obj)).caseWhenType = ((Tokens)(val_peek(2).obj)).caseWhenType;
				 if((((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction)==Const.NONE)
				     ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(1).obj)).aggregationFunction;

				 if( (((Tokens)(yyval.obj)).caseWhenType != Const.BOOLEAN) &&
				     (((Tokens)(yyval.obj)).caseWhenType != Const.CONST_BOOLEAN))
				 	yyerror("CASE/WHEN parameters must be BOOLEAN : "+ new String(((Tokens)(yyval.obj)).text));

				 if( ((Tokens)(yyval.obj)).type == Const.NONE )
				 	yyerror("Invalid returned type : "+ new String(((Tokens)(yyval.obj)).text));

				 if( ((((Tokens)(val_peek(2).obj)).aggregationFunction != Const.NONE) ||
				     (((Tokens)(val_peek(1).obj)).aggregationFunction != Const.NONE)) && !this.isFromClauseInnerSelect  ) {
				 	isPartitionable = false;
				     	throw(new ParserSilentException("InterQuery : Aggregation function in the Case clause. Line : "+line+" Column : "+column));
			         }
			       }
			       else {
			         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
			         			   ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text ;
			       }
			      }
		break;
		case 160:
//		#line 2606 "sql.y"
		{
					    if(onlyText == 0) {
					       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
					       ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
					       ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
					       ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
					       ((Tokens)(yyval.obj)).caseWhenType = ((Tokens)(val_peek(0).obj)).caseWhenType;
					       ((Tokens)(yyval.obj)).aggregationFunction =((Tokens)(val_peek(0).obj)).aggregationFunction;
					    }
					    else {
					       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
					    }
					  }
		break;
		case 161:
//		#line 2619 "sql.y"
		{
			  		    if(onlyText == 0) {
			  		       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text+ " " + ((Tokens)(val_peek(0).obj)).text;
					       getResultCaseType( (Tokens)(val_peek(1).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
					       ((Tokens)(yyval.obj)).caseWhenType = ((Tokens)(val_peek(1).obj)).caseWhenType;
					       if( (((Tokens)(yyval.obj)).caseWhenType == Const.BOOLEAN) ||
					           (((Tokens)(yyval.obj)).caseWhenType == Const.CONST_BOOLEAN)  )
					            ((Tokens)(yyval.obj)).caseWhenType = ((Tokens)(val_peek(0).obj)).caseWhenType;

					       if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(1).obj)).aggregationFunction) == Const.NONE)
			      	     		    ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
					    }
					    else {
			  		       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text+ " " + ((Tokens)(val_peek(0).obj)).text;
					    }
					  }
		break;
		case 162:
//		#line 2637 "sql.y"
		{
				       if(onlyText == 0) {
				          ((Tokens)(yyval.obj)).text = "when "+((Tokens)(val_peek(2).obj)).text+" then "+((Tokens)(val_peek(0).obj)).text;
		 		          ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
					  ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
					  ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		 		          ((Tokens)(yyval.obj)).caseWhenType = ((Tokens)(val_peek(2).obj)).type;
		 		          if( (((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(2).obj)).aggregationFunction) == Const.NONE)
			      	               ((Tokens)(yyval.obj)).aggregationFunction=((Tokens)(val_peek(0).obj)).aggregationFunction;
				       }
				       else {
				          ((Tokens)(yyval.obj)).text = "when "+((Tokens)(val_peek(2).obj)).text+" then "+((Tokens)(val_peek(0).obj)).text;
				       }
				     }
		break;
		case 163:
//		#line 2666 "sql.y"
		{
				   if(onlyText == 0) {
				      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				      ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				      ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
				      ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;
		 		      ((Tokens)(yyval.obj)).caseWhenType = ((Tokens)(val_peek(0).obj)).type;
				      ((Tokens)(yyval.obj)).aggregationFunction =((Tokens)(val_peek(0).obj)).aggregationFunction;
				   }
				   else {
				      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   }
				 }
		break;
		case 164:
//		#line 2687 "sql.y"
		{
		            if(onlyText == 0) {
		               ((Tokens)(yyval.obj)).compositorText ="\n"+((Tokens)(val_peek(1).obj)).text +((Tokens)(val_peek(0).obj)).compositorText;
		               ((Tokens)(yyval.obj)).text = "\n" + new String(((Tokens)(val_peek(1).obj)).text )+ ((Tokens)(val_peek(0).obj)).text;
		               ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
		               ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
		            }
		            else {
		               ((Tokens)(yyval.obj)).text ="\n" + new String(((Tokens)(val_peek(1).obj)).text )+ ((Tokens)(val_peek(0).obj)).text;
		            }
		          }
		break;
		case 165:
//		#line 2698 "sql.y"
		{
		          if(onlyText == 0) {
		            ((Tokens)(yyval.obj)).compositorText = "\n"+((Tokens)(val_peek(0).obj)).text + "\nwhere 1#1 >= ? and 1#1 < ?";
		            if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0 && !this.isFromClauseInnerSelect) {
		               ((Tokens)(yyval.obj)).text = "\n" + ((Tokens)(val_peek(0).obj)).text +"\nwhere " + findAlias(vpTable,0) + "." +
		                                      vpAttribute + " >= ? and "+ findAlias(vpTable,0) + "." + vpAttribute + " < ?";
		               qvpCount++;
		            }
		            else {
		               ((Tokens)(yyval.obj)).text = "\n" + ((Tokens)(val_peek(0).obj)).text;
		               ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		               ((Tokens)(yyval.obj)).isInPartitionable = false;
		            }
		          }
		          else {
		               ((Tokens)(yyval.obj)).text = "\n" + ((Tokens)(val_peek(0).obj)).text;
		          }
		        }
		break;
		case 166:
//		#line 2718 "sql.y"
		{
		                               if(onlyText == 0) {
		                                  ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(1).obj)).compositorText+((Tokens)(val_peek(0).obj)).text;
		                                  ((Tokens)(yyval.obj)).text =((Tokens)(val_peek(1).obj)).text + ((Tokens)(val_peek(0).obj)).text;
		                                  ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(1).obj)).isJoinPartitionable;
		                                  ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(1).obj)).isInPartitionable;
		                               }
		                               else {
		                                  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + ((Tokens)(val_peek(0).obj)).text;
		                               }
		                             }
		break;
		case 167:
//		#line 2729 "sql.y"
		{
		                               if(onlyText == 0) {
		                                  ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		                                  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                                  ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
		                                  ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
		                               }
		                               else {
		                                  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                               }
		                             }
		break;
		case 168:
//		#line 2740 "sql.y"
		{
				            if(onlyText == 0) {
				              ((Tokens)(yyval.obj)).compositorText ="\nwhere 1#1 >= ? and 1#1 < ?"+((Tokens)(val_peek(0).obj)).text;
		                               if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0 && !this.isFromClauseInnerSelect) {
		                                  ((Tokens)(yyval.obj)).text = "\nwhere " +  findAlias(vpTable,0) + "." + vpAttribute +
		                                  		            " >= ? and "+ findAlias(vpTable,0) + "." + vpAttribute +
		                                  		            " < ?"+ ((Tokens)(val_peek(0).obj)).text;
		                               	  qvpCount++;
		                               }
		                               else {
		                                  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                                  ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		                                  ((Tokens)(yyval.obj)).isInPartitionable = false;
		                               }
		                            }
		                            else {
		                                  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                            }
		                           }
		break;
		case 169:
//		#line 2761 "sql.y"
		{
		                            ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + ((Tokens)(val_peek(0).obj)).text; }
		break;
		case 170:
//		#line 2763 "sql.y"
		{((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;}
		break;
		case 171:
//		#line 2764 "sql.y"
		{((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;}
		break;
		case 172:
//		#line 2767 "sql.y"
		{
		                      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + ((Tokens)(val_peek(0).obj)).text;
		                   }
		break;
		case 173:
//		#line 2770 "sql.y"
		{
		                      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                   }
		break;
		case 174:
//		#line 2773 "sql.y"
		{((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;}
		break;
		case 175:
//		#line 2776 "sql.y"
		{
				           ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + ((Tokens)(val_peek(0).obj)).text;
				        }
		break;
		case 176:
//		#line 2779 "sql.y"
		{((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;}
		break;
		case 177:
//		#line 2780 "sql.y"
		{((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;}
		break;
		case 178:
//		#line 2783 "sql.y"
		{
			     if(this.isFromClauseInnerSelect){
			           ((Tokens)(yyval.obj)).text = " " + ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
			     }
			     else { 	       
		 	       if(onlyText == 0) {
		 		  if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0) {
			          	limitText = new String( " " + ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text);
			          	((Tokens)(yyval.obj)).text = "";
			          }
			          else
			                ((Tokens)(yyval.obj)).text = " " + ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
			       }
			       else {
			                ((Tokens)(yyval.obj)).text = " " + ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
			       }
			     }
			    }
		break;
		case 179:
//		#line 2809 "sql.y"
		{
		                     ((Tokens)(yyval.obj)).text = "\n"+ ((Tokens)(val_peek(2).obj)).text + " " +
		                                                     ((Tokens)(val_peek(1).obj)).text + " " +
		                                                     ((Tokens)(val_peek(0).obj)).text;
		                  }
		break;
		case 180:
//		#line 2816 "sql.y"
		{
					if(onlyText == 0) {
					   if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		                           	groupByList = ((Tokens)(val_peek(0).obj)).compositor.toArray();
		                           	qvpColumnsListTemp = new ArrayList<Column>(qvpColumnsList);
		                           }
		                           ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
		                        }
		                        else {
		                           ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;
		                        }
		                   }
		break;
		case 181:
//		#line 2830 "sql.y"
		{((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;}
		break;
		case 182:
//		#line 2831 "sql.y"
		{
		                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "," + ((Tokens)(val_peek(0).obj)).text;
		                  }
		break;
		case 183:
//		#line 2836 "sql.y"
		{
		                 if(onlyText == 0) {
		                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                     if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0)
		                         groupByTextList.add(new String(((Tokens)(val_peek(0).obj)).compositorText) );
		                 }
		                 else {
		                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                 }
		               }
		break;
		case 184:
//		#line 2848 "sql.y"
		{
				      if(onlyText == 0) {
				         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				         ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				         ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
				      }
				      else {
				         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				      }
				    }
		break;
		case 185:
//		#line 2858 "sql.y"
		{
				      if(onlyText == 0) {
				        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " + " + ((Tokens)(val_peek(0).obj)).text;
				        ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText + " + " +
				                                  ((Tokens)(val_peek(0).obj)).compositorText;
		                        getResultPlusType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );

				      }
				      else {
				        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " + " + ((Tokens)(val_peek(0).obj)).text;
				      }
				    }
		break;
		case 186:
//		#line 2870 "sql.y"
		{
			              if(onlyText == 0) {
			                ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " - " +
			                                          ((Tokens)(val_peek(0).obj)).text;
			                ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText + " - " +
			                                          ((Tokens)(val_peek(0).obj)).compositorText;
		                        getResultMinusType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
			              }
			              else {
			                ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " - " +
			                                          ((Tokens)(val_peek(0).obj)).text;
			              }
			            }
		break;
		case 187:
//		#line 2885 "sql.y"
		{
		                       if(onlyText == 0) {
		                          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                          ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		                          ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		                       }
		                       else {
		                          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                       }
		                     }
		break;
		case 188:
//		#line 2895 "sql.y"
		{
		                       if(onlyText == 0) {
		                         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " * " + ((Tokens)(val_peek(0).obj)).text;
		                         ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText + " * " +
		                                                             ((Tokens)(val_peek(0).obj)).compositorText;
		                         getResultMultiplicationType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
		                       }
		                       else {
		                         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " * " + ((Tokens)(val_peek(0).obj)).text;
		                       }
		                     }
		break;
		case 189:
//		#line 2906 "sql.y"
		{
		                       if(onlyText == 0) {
		                         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " / " + ((Tokens)(val_peek(0).obj)).text;
		                         ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText + " / " +
		                                                   ((Tokens)(val_peek(0).obj)).compositorText;
		                         getResultDivisionType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
		                       }
		                       else {
		                         ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " / " + ((Tokens)(val_peek(0).obj)).text;
		                       }
		                     }
		break;
		case 190:
//		#line 2919 "sql.y"
		{
		 			    if(onlyText == 0) {
		 			      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		 			      ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
					      ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
					    }
					    else {
		 			      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
					    }
					  }
		break;
		case 191:
//		#line 2929 "sql.y"
		{
			                    if(onlyText == 0) {
			        		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + ((Tokens)(val_peek(1).obj)).text +
			                    		                  ((Tokens)(val_peek(0).obj)).text;
			        		getResultConcatenationType( (Tokens)(val_peek(2).obj),(Tokens)(val_peek(0).obj),(Tokens)(yyval.obj) );
						((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(2).obj)).compositorText +" || "+
		                		                                    ((Tokens)(val_peek(0).obj)).compositorText;
			    		    }
			    		    else {
			        		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text +  ((Tokens)(val_peek(1).obj)).text +
			                    		                  ((Tokens)(val_peek(0).obj)).text;
			    		    }
			    		  }
		break;
		case 192:
//		#line 2944 "sql.y"
		{
		                                  if(onlyText == 0) {
		                                     ((Tokens)(yyval.obj)).text = "+ " + ((Tokens)(val_peek(0).obj)).text;
		                                     ((Tokens)(yyval.obj)).compositorText = "+ " + ((Tokens)(val_peek(0).obj)).compositorText;
		 	                             getResultSignType( (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
		                                  }
		                                  else {
		                                     ((Tokens)(yyval.obj)).text = "+ " + ((Tokens)(val_peek(0).obj)).text;
		                                  }
		                                }
		break;
		case 193:
//		#line 2954 "sql.y"
		{
		                                  if(onlyText == 0) {
		                                     ((Tokens)(yyval.obj)).text = "- " + ((Tokens)(val_peek(0).obj)).text;
		                                     ((Tokens)(yyval.obj)).compositorText = "- " + ((Tokens)(val_peek(0).obj)).compositorText;
		                            	     getResultSignType( (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
		                                  }
		                                  else {
		                                     ((Tokens)(yyval.obj)).text = "- " + ((Tokens)(val_peek(0).obj)).text;
		                                  }
		                                }
		break;
		case 194:
//		#line 2964 "sql.y"
		{
		                                  if(onlyText == 0) {
		                                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                                     ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
		                                     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
		                                  }
		                                  else {
		                                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                                  }
		                                }
		break;
		case 195:
//		#line 2976 "sql.y"
		{
					 if(onlyText == 0) {
					    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
					    if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		                 	    	addColumnsList( ((Tokens)(val_peek(0).obj)),qvpColumnsList );
		                 	    }
					    ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
					    ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				         }
				         else {
					    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				         }
				       }
		break;
		case 196:
//		#line 2989 "sql.y"
		{
		                         if(onlyText == 0) {
		                            ((Tokens)(yyval.obj)).text="(" + ((Tokens)(val_peek(1).obj)).text + ")";
		                            ((Tokens)(yyval.obj)).compositorText = "("+((Tokens)(val_peek(1).obj)).compositorText+")";
		                            ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(1).obj)).type;
		                         }
		                         else {
		                            ((Tokens)(yyval.obj)).text="(" + ((Tokens)(val_peek(1).obj)).text + ")";
		                         }
		                       }
		break;
		case 197:
//		#line 2999 "sql.y"
		{
		                  	 if(onlyText == 0) {
		                  	    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                  	    ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).text;
				  	    ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				         }
				         else {
		                  	    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				         }
				       }
		break;
		case 198:
//		#line 3016 "sql.y"
		{
		  	       if(this.isFromClauseInnerSelect){
		                    ((Tokens)(yyval.obj)).text = "\n"+ ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text +
		                                              " " + ((Tokens)(val_peek(0).obj)).text;
		                     orderByIndexList = orderByIndexListTemp.toArray(orderByIndexList);
		  	       }
		  	       else {
		                  if(onlyText == 0) {
		                     if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		                     	((Tokens)(yyval.obj)).text = "";
		                     	qvpColumnsListTemp = new ArrayList<Column>(qvpColumnsList);
		                     }
		                     else ((Tokens)(yyval.obj)).text = "\n"+ ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text +
		                                                    " " + ((Tokens)(val_peek(0).obj)).text;
		                     orderByIndexList = orderByIndexListTemp.toArray(orderByIndexList);
		                 }
		                 else {
		                    ((Tokens)(yyval.obj)).text = "\n"+ ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text +
		                                              " " + ((Tokens)(val_peek(0).obj)).text;
		                 }
		               }
		              }
		break;
		case 199:
//		#line 3040 "sql.y"
		{((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;}
		break;
		case 200:
//		#line 3041 "sql.y"
		{
		                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "," + ((Tokens)(val_peek(0).obj)).text;
		                     }
		break;
		case 201:
//		#line 3046 "sql.y"
		{
		                    if(onlyText == 0) {
		                   	if(existsAggregationSelect.get(subqueryLevel)) {
				        	if(isFunctionParameter==0) {
				        		if(columnsNotInGroupError)
				   				yyerror("The column(s)" + columnsNotInGroup.substring(0,columnsNotInGroup.length() - 1) + " must appear in the GROUP BY clause" );
				   	        }
				   	}
				   	columnsNotInGroupError = false;
		                  	columnsNotInGroup = "";
		                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				    }
				    else {
		                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				    }
				   }
		break;
		case 202:
//		#line 3064 "sql.y"
		{
		                if(onlyText == 0) {
		                   if(new Integer(((Tokens)(val_peek(0).obj)).text) > qColumnsList.size() )
		                   	yyerror("The ORDER BY position " + new String(((Tokens)(val_peek(0).obj)).text) + " does not exists in the SELECT clause list.");
		                   if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		                   	orderByTextList.add( new String (((Tokens)(val_peek(0).obj)).text) );
		                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                   }
		                }
		                else {
		                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                }
		              }
		break;
		case 203:
//		#line 3077 "sql.y"
		{
		                if(onlyText == 0) {
		                   if(new Integer(((Tokens)(val_peek(1).obj)).text) > qColumnsList.size() )
		                   	yyerror("The ORDER BY position " + new String(((Tokens)(val_peek(1).obj)).text) + " does not exists in the SELECT clause list.");
		                   if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		                   	orderByTextList.add( new String (((Tokens)(val_peek(1).obj)).text+((Tokens)(val_peek(0).obj)).text) );
		                   }
		                   ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(1).obj)).text+((Tokens)(val_peek(0).obj)).text;
		                }
		                else {
		                   ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(1).obj)).text+((Tokens)(val_peek(0).obj)).text;
		                }
		              }
		break;
		case 204:
//		#line 3090 "sql.y"
		{
		                if(onlyText == 0) {
		                  if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
				   	orderByTextList.add( new String (((Tokens)(val_peek(0).obj)).compositorText) );
		                  }
		                  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                }
		                else {
		                  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                }
		              }
		break;
		case 205:
//		#line 3101 "sql.y"
		{
		                if(onlyText == 0) {
		                   if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		                   	orderByTextList.add( new String(((Tokens)(val_peek(1).obj)).compositorText + ((Tokens)(val_peek(0).obj)).text) );
		                   }
		                   ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(1).obj)).text+((Tokens)(val_peek(0).obj)).text;
		                }
		                else {
		                   ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(1).obj)).text+((Tokens)(val_peek(0).obj)).text;
		                }
		              }
		break;
		case 206:
//		#line 3114 "sql.y"
		{
		              ((Tokens)(yyval.obj)).text=" " + ((Tokens)(val_peek(0).obj)).text;
		              ((Tokens)(yyval.obj)).type = Const.ASC;
		           }
		break;
		case 207:
//		#line 3118 "sql.y"
		{
		              ((Tokens)(yyval.obj)).text=" " + ((Tokens)(val_peek(0).obj)).text;
		              ((Tokens)(yyval.obj)).type = Const.DESC;
		           }
		break;
		case 208:
//		#line 3125 "sql.y"
		{
				if(onlyText == 0) {
				 ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
		       		 ((Tokens)(yyval.obj)).columnRefTable = getColumnRefTable(((Tokens)(val_peek(0).obj)).text,subqueryLevel);
		       		 ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).text;
		       		 ((Tokens)(yyval.obj)).typeSize = ((Tokens)(val_peek(0).obj)).typeSize;
		       		 ((Tokens)(yyval.obj)).typePrecision = ((Tokens)(val_peek(0).obj)).typePrecision;

		                 int selectAliasIndex;
		                 if( ( selectAliasIndex = verifySelectAliasRef( ((Tokens)(val_peek(0).obj)).text,subqueryLevel) ) != -1 ) {
		                 	((Tokens)(yyval.obj)).compositorText = Const.COLUMN_PREFIX +  selectAliasIndex;
		       		        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                 }
		                 else {
		       		 	((Tokens)(yyval.obj)).type = getColumnType( ((Tokens)(val_peek(0).obj)).text ,subqueryLevel,(Tokens)(val_peek(0).obj) );
		       		 	if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
				   		addColumnsList( ((Tokens)(val_peek(0).obj)),qvpColumnsList);
				   	}
			     		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			       		((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(0).obj)).compositorText;
				   	if(isFunctionParameter==0) {
				   		if( (columnsNotInGroupError=mustIncludeInGroupBy( (Tokens)(yyval.obj), subqueryLevel)) )
		              	 			columnsNotInGroup += " " + new String(((Tokens)(yyval.obj)).text + ",");
		       		 	}
		       		 }
		               }
		               else {
			     		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		               }
		            }
		break;
		case 209:
//		#line 3156 "sql.y"
		{
			      if(onlyText == 0) {
				 if(findTable(((Tokens)(val_peek(2).obj)).text,subqueryLevel)==null)
				 	yyerror("Table " + new String(((Tokens)(val_peek(2).obj)).text) + " does not referred in FROM clause");
				 else {
				 	((Tokens)(yyval.obj)).columnRefTable = getColumnRefTable( ((Tokens)(val_peek(2).obj)).text,
				 	 						       ((Tokens)(val_peek(0).obj)).text,
				 							       subqueryLevel );
		                 	((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).text;
		                 }
		                 ((Tokens)(yyval.obj)).type = Const.INTEGER;
		       		 ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
		       		 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "." + ((Tokens)(val_peek(0).obj)).text;
		       		 if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
				 	addColumnsList( ((Tokens)(yyval.obj)),qvpColumnsList);
				 }
				 if(isFunctionParameter==0) {
				 	if( (columnsNotInGroupError=mustIncludeInGroupBy( (Tokens)(yyval.obj), subqueryLevel)) )
		              	 		columnsNotInGroup += " " + new String(((Tokens)(yyval.obj)).text + "," );
		                 }
		 	      	if(!this.isFromClauseInnerSelect)
		 	         throw(new ParserSilentException("InterQuery : Wildcard. Line : "+line+" Column : "+column));

		              }
		              else {
		       		 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "." + ((Tokens)(val_peek(0).obj)).text;
		              }
		            }
		break;
		case 210:
//		#line 3184 "sql.y"
		{
		              if(onlyText == 0) {
		                 if(findTable(((Tokens)(val_peek(2).obj)).text,subqueryLevel)==null)
				 	yyerror("Table " + new String(((Tokens)(val_peek(2).obj)).text) + " does not referred in FROM clause");
				 else {
				 	((Tokens)(yyval.obj)).columnRefTable = getColumnRefTable( ((Tokens)(val_peek(2).obj)).text,
				 	 						       ((Tokens)(val_peek(0).obj)).text,
				 							       subqueryLevel );
		                 	((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).text;
		                 }
		       		 ((Tokens)(yyval.obj)).type = getColumnType(((Tokens)(val_peek(2).obj)).text,((Tokens)(val_peek(0).obj)).text,subqueryLevel,(Tokens)(yyval.obj) );
		       		 ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
		       		 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "." + ((Tokens)(val_peek(0).obj)).text;
		       		 if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
				   	addColumnsList( ((Tokens)(yyval.obj)),qvpColumnsList);
				 }
				 if(isFunctionParameter==0) {
				 	if( (columnsNotInGroupError=mustIncludeInGroupBy( (Tokens)(yyval.obj), subqueryLevel)) )
		              	 		columnsNotInGroup += " " + new String(((Tokens)(yyval.obj)).text + "," );
		                 }
		              }
		              else {
		       		 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "." + ((Tokens)(val_peek(0).obj)).text;
		              }
		            }
		break;
		case 211:
//		#line 3217 "sql.y"
		{
		                 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		              }
		break;
		case 212:
//		#line 3222 "sql.y"
		{((Tokens)(yyval.obj)).text=((Tokens)(val_peek(0).obj)).text;}
		break;
		case 213:
//		#line 3223 "sql.y"
		{
		               	    if(isFromClauseInnerSelect && (subqueryLevel == 0) && (fromSubqueryLevel == 0))
		               	    	throw(new ParserSilentException("InterQuery : From subquery must be unique in the FROM clause. Line : "+line+" Column : "+column));
		                    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "," + ((Tokens)(val_peek(0).obj)).text;
		                 }
		break;
		case 214:
//		#line 3230 "sql.y"
		{((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;}
		break;
		case 215:
//		#line 3231 "sql.y"
		{
		               ((Tokens)(yyval.obj)).text = "("  + ((Tokens)(val_peek(1).obj)).text + ")";
		            }
		break;
		case 216:
//		#line 3234 "sql.y"
		{
		               ((Tokens)(yyval.obj)).text = "(" + ((Tokens)(val_peek(2).obj)).text + ") " + ((Tokens)(val_peek(0).obj)).text;
		            }
		break;
		case 217:
//		#line 3237 "sql.y"
		{
		               ((Tokens)(yyval.obj)).text = "(" + ((Tokens)(val_peek(3).obj)).text + ") as " + ((Tokens)(val_peek(0).obj)).text;
		            }
		break;
		case 218:
//		#line 3240 "sql.y"
		{
		               ((Tokens)(yyval.obj)).text = "("  + ((Tokens)(val_peek(4).obj)).text + ")";
		            }
		break;
		case 219:
//		#line 3243 "sql.y"
		{
		               ((Tokens)(yyval.obj)).text = "(" + ((Tokens)(val_peek(5).obj)).text + ") " + ((Tokens)(val_peek(3).obj)).text;
		            }
		break;
		case 220:
//		#line 3246 "sql.y"
		{
		               ((Tokens)(yyval.obj)).text = "(" + ((Tokens)(val_peek(6).obj)).text + ") as " + ((Tokens)(val_peek(3).obj)).text;
		            }
		break;
		case 221:
//		#line 3251 "sql.y"
		{
		        if(onlyText == 0) {
		           ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		        }
		        else {
		           ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		        }
		      }
		break;
		case 222:
//		#line 3259 "sql.y"
		{
		        if(onlyText == 0) {
		           ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		        }
		        else {
		           ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		        }
		      }
		break;
		case 223:
//		#line 3267 "sql.y"
		{
		        if(onlyText == 0) {
		           ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " as " + ((Tokens)(val_peek(0).obj)).text;
		        }
		        else {
		           ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " as " + ((Tokens)(val_peek(0).obj)).text;
		        }
		      }
		break;
		case 224:
//		#line 3277 "sql.y"
		{((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;}
		break;
		case 225:
//		#line 3278 "sql.y"
		{
		             ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text +"."+ ((Tokens)(val_peek(0).obj)).text;
		          }
		break;
		case 226:
//		#line 3281 "sql.y"
		{
		             ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text + "." +  ((Tokens)(val_peek(2).obj)).text + "." +
		                                       ((Tokens)(val_peek(0).obj)).text;
		          }
		break;
		case 227:
//		#line 3287 "sql.y"
		{
				   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "." +  ((Tokens)(val_peek(1).obj)).text + "." +
		                                       	     ((Tokens)(val_peek(0).obj)).text;
			           onlyText--;
			           fromSubqueryLevel--;
			      }
		break;
		case 228:
//		#line 3295 "sql.y"
		{
				    onlyText++;
				    if(fromSubqueryLevel>0)
				    	throw(new ParserSilentException("InterQuery : So far, only one FROM subquery level is treated. Line : "+line+" Column :"+column));
				    fromSubqueryLevel++;
		               	    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;               	    
		               	    if(subqueryLevel>0)
		               	    	throw(new ParserSilentException("InterQuery : So far, only outerquery FROM subquery is treated. Line : "+line+" Column :"+column));
		               	  }
		break;
		case 229:
//		#line 3306 "sql.y"
		{((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;}
		break;
		case 230:
//		#line 3307 "sql.y"
		{((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + ", " + ((Tokens)(val_peek(0).obj)).text;}
		break;
		case 231:
//		#line 3314 "sql.y"
		{
			 if(this.isFromClauseInnerSelect){
			      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		              if( (((Tokens)(val_peek(0).obj)).type!=Const.BOOLEAN) && (((Tokens)(val_peek(0).obj)).type!=Const.CONST_BOOLEAN) )
		                    yyerror("The WHERE clause expression "+ new String(((Tokens)(val_peek(0).obj)).text) + " must be BOOLEAN.");
			 }
			 else {
		            if(onlyText == 0) {
		              ((Tokens)(val_peek(1).obj)).compositorText = "\nwhere 1#1 >= ? and 1#1 < ? and (" + ((Tokens)(val_peek(0).obj)).text +")";
			      if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0) {
			         if(!((Tokens)(val_peek(0).obj)).isInPartitionable){
		              	 	((Tokens)(yyval.obj)).text ="\n" + ((Tokens)(val_peek(1).obj)).text + " " + findAlias(vpTable,0) + "." +
		              	 			 vpAttribute + " >= ? and "+ findAlias(vpTable,0) + "." + vpAttribute +
						                   " < ? and (" + ((Tokens)(val_peek(0).obj)).text+")";

		                 }
		                 else {
		                 	((Tokens)(yyval.obj)).text = "\n" + ((Tokens)(val_peek(1).obj)).text + " " +findAlias(vpTable,0) + "." +
		                 			 vpAttribute + " >= ? and "+ findAlias(vpTable,0) + "." + vpAttribute +
		                 			 " < ? and " + subqueryVpa +" >= ? and " + subqueryVpa + " < ? and (" +
				 	   	          ((Tokens)(val_peek(0).obj)).text+")";
		                 	qvpCount++;
		                 }
		                 qvpCount++;
		                 ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		              }
		              else {
		              	 if(((Tokens)(val_peek(0).obj)).isJoinPartitionable){
		              	 	((Tokens)(yyval.obj)).text = "\n" + ((Tokens)(val_peek(1).obj)).text + " " + subqueryVpa +" >= ? and "+
		              	 			          subqueryVpa + " < ? and (" + ((Tokens)(val_peek(0).obj)).text+")";
				 	((Tokens)(val_peek(1).obj)).compositorText = "\nwhere 1#1 >= ? and 1#1 < ? and (" + subqueryVpa +
		              	 			" >= ? and " + subqueryVpa + " < ? and (" + ((Tokens)(val_peek(0).obj)).text+"))";
				 	qvpCount++;
				 }
				 else {
		                	((Tokens)(yyval.obj)).text ="\n" + ((Tokens)(val_peek(1).obj)).text + " " +((Tokens)(val_peek(0).obj)).text;
					if(!((Tokens)(val_peek(0).obj)).isInPartitionable && !this.isFromClauseInnerSelect)
						throw(new ParserSilentException("InterQuery :No vpa join in the Subquery. Line : "+line+" Column :"+column));
		                 }
		                 ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
		                 ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
		              }
		              if( (((Tokens)(val_peek(0).obj)).type!=Const.BOOLEAN) && (((Tokens)(val_peek(0).obj)).type!=Const.CONST_BOOLEAN) )
		                    yyerror("The WHERE clause expression "+ new String(((Tokens)(val_peek(0).obj)).text) + " must be BOOLEAN.");

		            }
		            else {
				     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		            }
		          }
		        }
		break;
		case 232:
//		#line 3367 "sql.y"
		{
		                   if(onlyText == 0) {
		                     ((Tokens)(yyval.obj)).alias = ((Tokens)(val_peek(0).obj)).alias;
				     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				     ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
				     ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
				     ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
				     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		 		     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
				   }
				   else {
				     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   }
				 }
		break;
		case 233:
//		#line 3382 "sql.y"
		{
		                   if(onlyText == 0) {
		                      ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(2).obj)).text + " " +  ((Tokens)(val_peek(1).obj)).text + " " +
		                                              ((Tokens)(val_peek(0).obj)).text;
		                      getResultLogicOpType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
		                      ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(2).obj)).isJoinPartitionable &&
		                       					       ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
		                      ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(2).obj)).isInPartitionable &&
		                       					     ((Tokens)(val_peek(0).obj)).isInPartitionable;
		                      ((Tokens)(yyval.obj)).isUniqueColumn = false;
		                      ((Tokens)(yyval.obj)).columnRefTable = null;
				      ((Tokens)(yyval.obj)).columnRefField = null;
		                   }
		                   else {
		                       ((Tokens)(yyval.obj)).text=((Tokens)(val_peek(2).obj)).text + " " +  ((Tokens)(val_peek(1).obj)).text + " " +
		                                               ((Tokens)(val_peek(0).obj)).text;
		                  }
		                 }
		break;
		case 234:
//		#line 3402 "sql.y"
		{
		              if(onlyText == 0) {
		                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				   ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
				   ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
				   ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
				   ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		 		   ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
			      }
			      else {
		                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			      }
			    }
		break;
		case 235:
//		#line 3416 "sql.y"
		{
		              if(onlyText == 0) {
		                ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
		                                          ((Tokens)(val_peek(0).obj)).text;
		                getResultLogicOpType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj),(Tokens)(yyval.obj) );
		                ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(2).obj)).isJoinPartitionable ||
		                       			  	         ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
		                ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(2).obj)).isInPartitionable ||
		                       			  	       ((Tokens)(val_peek(0).obj)).isInPartitionable;
		                ((Tokens)(yyval.obj)).isUniqueColumn = false;
		                ((Tokens)(yyval.obj)).columnRefTable = null;
				((Tokens)(yyval.obj)).columnRefField = null;
		              }
		              else {
		                ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
		                                          ((Tokens)(val_peek(0).obj)).text;
		             }
		            }
		break;
		case 236:
//		#line 3436 "sql.y"
		{
		                if(onlyText == 0) {
		                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				   ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
				   ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
				   ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
				   ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		 		   ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
			        }
			        else {
		                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			        }
			      }
		break;
		case 237:
//		#line 3450 "sql.y"
		{
		                if(onlyText == 0) {
		                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		                   getResultLogicOpType( (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
		                   ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		                   ((Tokens)(yyval.obj)).isInPartitionable = false;
		                   ((Tokens)(yyval.obj)).isUniqueColumn = false;
		                   ((Tokens)(yyval.obj)).columnRefTable = null;
				   ((Tokens)(yyval.obj)).columnRefField = null;
				   notExists--;
		                }
		                else {
		                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		                }
		              }
		break;
		case 238:
//		#line 3467 "sql.y"
		{
		                  if(onlyText == 0) {
		                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				     ((Tokens)(yyval.obj)).isJoinPartitionable = false;
				     ((Tokens)(yyval.obj)).isInPartitionable = false;
				     ((Tokens)(yyval.obj)).isUniqueColumn = false;
				     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		 		     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
				  }
				  else {
		                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				  }
				}
		break;
		case 239:
//		#line 3481 "sql.y"
		{
				  if(onlyText == 0) {
				     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				     ((Tokens)(yyval.obj)).isJoinPartitionable = false;
				     ((Tokens)(yyval.obj)).isInPartitionable = false;
				     ((Tokens)(yyval.obj)).isUniqueColumn = false;
				     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		 		     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
				  }
				  else {
				     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				  }
				}
		break;
		case 240:
//		#line 3495 "sql.y"
		{
		                  if(onlyText == 0) {
		                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				     ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
				     ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
				     ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
				     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		 		     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
				  }
				  else {
		                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				  }
				}
		break;
		case 241:
//		#line 3511 "sql.y"
		{
		                       if(onlyText == 0) {
		                  	 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				 	 ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				 	 ((Tokens)(yyval.obj)).isJoinPartitionable = false;
				 	 ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
				 	 ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
				  	 ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		 		  	 ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
				       }
				       else {
		                  	 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				       }
				     }
		break;
		case 242:
//		#line 3526 "sql.y"
		{
		                     if(onlyText == 0) {
		                       if( ((Tokens)(val_peek(2).obj)).isJoinPartitionable && (subqueryLevel!=0) &&
		                           ((Tokens)(val_peek(0).obj)).isJoinPartitionable && ((Tokens)(val_peek(1).obj)).text.equals("=") &&
		                           ((Tokens)(val_peek(2).obj)).columnRefTable != null &&
		                           ((Tokens)(val_peek(0).obj)).columnRefTable != null ){

		                           if((((Tokens)(val_peek(2).obj)).columnRefTable.tableLevel < ((Tokens)(val_peek(0).obj)).columnRefTable.tableLevel) &&
		                               (((Tokens)(val_peek(0).obj)).columnRefTable.tableLevel == subqueryLevel) &&
		                                isVpAttribute((Tokens)(val_peek(0).obj)) && isVpAttribute((Tokens)(val_peek(2).obj))  ) {

		                               		((Tokens)(yyval.obj)).isJoinPartitionable = true;
		                               		subqueryVpa = new String(((Tokens)(val_peek(0).obj)).text);
		                               }
		                           else {
		                           	if((((Tokens)(val_peek(0).obj)).columnRefTable.tableLevel < ((Tokens)(val_peek(2).obj)).columnRefTable.tableLevel) &&
		                               	   (((Tokens)(val_peek(2).obj)).columnRefTable.tableLevel == subqueryLevel) &&
		                                    isVpAttribute((Tokens)(val_peek(2).obj)) && isVpAttribute((Tokens)(val_peek(0).obj)) ) {

		                           		((Tokens)(yyval.obj)).isJoinPartitionable = true;
		                           		subqueryVpa = new String(((Tokens)(val_peek(2).obj)).text);
		                           	}
		                           	else ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		                           }
		                       }
		                       else ((Tokens)(yyval.obj)).isJoinPartitionable = false;

		                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
		                                                 ((Tokens)(val_peek(0).obj)).text;
		                       getResultRelationalOpType((Tokens)(val_peek(2).obj),(Tokens)(val_peek(0).obj),(Tokens)(yyval.obj));
		                       ((Tokens)(yyval.obj)).isUniqueColumn = false;
		                     }
		                     else {
		                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " +  ((Tokens)(val_peek(1).obj)).text + " " +
		                                                 ((Tokens)(val_peek(0).obj)).text;
		                     }
		                   }
		break;
		case 243:
//		#line 3564 "sql.y"
		{
		                       if(onlyText == 0) {
		                          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				          ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				          ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
				          ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
				          ((Tokens)(yyval.obj)).isUniqueColumn = false;
				  	  ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		 		  	  ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
				       }
				       else {
		                          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				       }
				     }
		break;
		case 244:
//		#line 3580 "sql.y"
		{
		                     	  if(onlyText == 0) {
		                     	     ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
				      	     ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
		                     	     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   	     ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				   	     ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
				   	     ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
				   	     ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
				   	  }
				   	  else {
		                     	     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   	  }
				   	}
		break;
		case 245:
//		#line 3594 "sql.y"
		{
		                          if(onlyText == 0 && !this.isFromClauseInnerSelect) {                          	
		                          	   throw new ParserSilentException("InterQuery : Relational operation involving Subquery. Line : "+line+" Column : "+column);
		                          }
		                          else {
		                     	   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " (" + ((Tokens)(val_peek(1).obj)).text + ")";
		                          }
		                        }
		break;
		case 246:
//		#line 3602 "sql.y"
		{
		                          if(onlyText == 0 && !this.isFromClauseInnerSelect) {                          	
		                          	   throw new ParserSilentException("InterQuery : Relational operation involving Subquery. Line : "+line+" Column : "+column);
		                           }
		                           else {
		                      	   ((Tokens)(yyval.obj)).text = "(" + ((Tokens)(val_peek(1).obj)).text + ")";
		                         }
		                        }
		break;
		case 247:
//		#line 3612 "sql.y"
		{
		                   if(onlyText == 0) {
		                      ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
				      ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
		                      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				      ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				      ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
				      ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
				      ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
				   }
				   else {
		                      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   }
				 }
		break;
		case 248:
//		#line 3626 "sql.y"
		{
			           if(onlyText == 0) {
			              ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " + " + ((Tokens)(val_peek(0).obj)).text;
		                      getResultPlusType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
			              ((Tokens)(yyval.obj)).isJoinPartitionable = false;
			              ((Tokens)(yyval.obj)).isInPartitionable = false;
			              ((Tokens)(yyval.obj)).isUniqueColumn = false;
		                      ((Tokens)(yyval.obj)).columnRefTable = null;
				      ((Tokens)(yyval.obj)).columnRefField = null;

			           }
			           else {
			              ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " + " + ((Tokens)(val_peek(0).obj)).text;
			           }
			         }
		break;
		case 249:
//		#line 3641 "sql.y"
		{
			           if(onlyText == 0) {
			              ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " - " + ((Tokens)(val_peek(0).obj)).text;
		                      getResultMinusType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
			              ((Tokens)(yyval.obj)).isJoinPartitionable = false;
			              ((Tokens)(yyval.obj)).isInPartitionable = false;
			              ((Tokens)(yyval.obj)).isUniqueColumn = false;
			              ((Tokens)(yyval.obj)).columnRefTable = null;
				      ((Tokens)(yyval.obj)).columnRefField = null;
			           }
			           else {
			              ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " - " + ((Tokens)(val_peek(0).obj)).text;
			           }
			         }
		break;
		case 250:
//		#line 3657 "sql.y"
		{
				    if(onlyText == 0) {
				      ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
				      ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
				      ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
				      ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
		                      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				      ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				      ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
				    }
				    else {
		                      ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				    }
				  }
		break;
		case 251:
//		#line 3671 "sql.y"
		{
		                    if(onlyText == 0) {
		                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " * " + ((Tokens)(val_peek(0).obj)).text;
		                       getResultMultiplicationType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
		                       ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		                       ((Tokens)(yyval.obj)).isInPartitionable = false;
		                       ((Tokens)(yyval.obj)).isUniqueColumn = false;
		                       ((Tokens)(yyval.obj)).columnRefTable = null;
				       ((Tokens)(yyval.obj)).columnRefField = null;
		                    }
		                    else {
		                       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " * " + ((Tokens)(val_peek(0).obj)).text;
		                    }
		                  }
		break;
		case 252:
//		#line 3685 "sql.y"
		{
				    if(onlyText == 0) {
				       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " / " + ((Tokens)(val_peek(0).obj)).text;
		                       getResultDivisionType( (Tokens)(val_peek(2).obj), (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
		                       ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		                       ((Tokens)(yyval.obj)).isInPartitionable = false;
		                       ((Tokens)(yyval.obj)).isUniqueColumn = false;
		                       ((Tokens)(yyval.obj)).columnRefTable = null;
				       ((Tokens)(yyval.obj)).columnRefField = null;
		                    }
		                    else {
				       ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " / " + ((Tokens)(val_peek(0).obj)).text;
		                    }
		                  }
		break;
		case 253:
//		#line 3701 "sql.y"
		{
		  		         if(onlyText == 0) {
		  		            ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		 		            ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
					    ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
					    ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
		 			    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		 			    ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				            ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
					 }
					 else {
		 			    ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
					 }
					}
		break;
		case 254:
//		#line 3715 "sql.y"
		{
			                  if(onlyText == 0) {
			        		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text +  ((Tokens)(val_peek(1).obj)).text +
			                    		                  ((Tokens)(val_peek(0).obj)).text;
			        		getResultConcatenationType( (Tokens)(val_peek(2).obj),(Tokens)(val_peek(0).obj),(Tokens)(yyval.obj) );
		                		((Tokens)(yyval.obj)).isJoinPartitionable = false;
		                		((Tokens)(yyval.obj)).isInPartitionable = false;
		                		((Tokens)(yyval.obj)).isUniqueColumn = false;
		  		                ((Tokens)(yyval.obj)).columnRefTable = null;
		 		                ((Tokens)(yyval.obj)).columnRefField = null;
			    		  }
			    		  else {
			        		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + ((Tokens)(val_peek(1).obj)).text +
			                    		                  ((Tokens)(val_peek(0).obj)).text;
			    		  }
			    		}
		break;
		case 255:
//		#line 3733 "sql.y"
		{
				  	       if(onlyText == 0) {
				  		 ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
				  	 	 ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
				  		 ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
				  		 ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
		                         	 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   		 ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				   		 ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(0).obj)).isUniqueColumn;
				   	       }
				   	       else {
		                         	 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   	       }
				   	     }
		break;
		case 256:
//		#line 3747 "sql.y"
		{
		                               if(onlyText == 0) {
		                                  ((Tokens)(yyval.obj)).text = "-" + ((Tokens)(val_peek(0).obj)).text;
		 	                          getResultSignType( (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
		                                  ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		                                  ((Tokens)(yyval.obj)).isInPartitionable = false;
		                                  ((Tokens)(yyval.obj)).isUniqueColumn = false;
		                                  ((Tokens)(yyval.obj)).columnRefTable = null;
				      		  ((Tokens)(yyval.obj)).columnRefField = null;
		                               }
		                               else {
		                                   ((Tokens)(yyval.obj)).text = "-" + ((Tokens)(val_peek(0).obj)).text;
		                              }
		                             }
		break;
		case 257:
//		#line 3762 "sql.y"
		{
		                                if(onlyText == 0) {
		                                   ((Tokens)(yyval.obj)).text = "+" + ((Tokens)(val_peek(0).obj)).text;
		                                   getResultSignType( (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
		                                   ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		                                   ((Tokens)(yyval.obj)).isInPartitionable = false;
		                                   ((Tokens)(yyval.obj)).isUniqueColumn = false;
		                                   ((Tokens)(yyval.obj)).columnRefTable = null;
				      		   ((Tokens)(yyval.obj)).columnRefField = null;
		                                }
		                                else {
		                                   ((Tokens)(yyval.obj)).text = "+" + ((Tokens)(val_peek(0).obj)).text;
		                                }
		                             }
		break;
		case 258:
//		#line 3778 "sql.y"
		{
		                      if(onlyText == 0) {
		                   	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				  	((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				  	((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
				  	((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
				  	((Tokens)(yyval.obj)).isInPartitionable = false;
				  	((Tokens)(yyval.obj)).isJoinPartitionable = true;
				  	((Tokens)(yyval.obj)).isUniqueColumn = true;
				      }
				      else {
		                   	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				      }
				    }
		break;
		case 259:
//		#line 3793 "sql.y"
		{
		          	      if(onlyText == 0) {
		          	         ((Tokens)(yyval.obj)).text="(" + ((Tokens)(val_peek(1).obj)).text + ")";
		          	         ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(1).obj)).type;
				  	 ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(1).obj)).columnRefTable;
		 		  	 ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(1).obj)).columnRefField;
		          	         ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(1).obj)).isJoinPartitionable;
		          	         ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(1).obj)).isInPartitionable;
		          	         ((Tokens)(yyval.obj)).isUniqueColumn = ((Tokens)(val_peek(1).obj)).isUniqueColumn;
		          	      }
		          	      else {
		            	         ((Tokens)(yyval.obj)).text="(" + ((Tokens)(val_peek(1).obj)).text + ")";
		        	      }
		          	    }
		break;
		case 260:
//		#line 3808 "sql.y"
		{
		                      if(onlyText == 0) {
		                  	 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				  	 ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				  	 ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		 		  	 ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
		 		  	 ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		 		  	 ((Tokens)(yyval.obj)).isInPartitionable = false;
				  	 ((Tokens)(yyval.obj)).isUniqueColumn = false;
				      }
				      else {
		                  	 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				      }
				    }
		break;
		case 261:
//		#line 3822 "sql.y"
		{
		                      if(onlyText == 0) {
		                  	 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				  	 ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				  	 ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		 		  	 ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
		 		  	 ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		 		  	 ((Tokens)(yyval.obj)).isInPartitionable = false;
				  	 ((Tokens)(yyval.obj)).isUniqueColumn = false;
				      }
				      else {
		                  	 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				      }		      
				    }
		break;
		case 262:
//		#line 3836 "sql.y"
		{
		                      if(onlyText == 0) {
		                  	 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				  	 ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				  	 ((Tokens)(yyval.obj)).columnRefTable = ((Tokens)(val_peek(0).obj)).columnRefTable;
		 		  	 ((Tokens)(yyval.obj)).columnRefField = ((Tokens)(val_peek(0).obj)).columnRefField;
		 		  	 ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		 		  	 ((Tokens)(yyval.obj)).isInPartitionable = false;
				  	 ((Tokens)(yyval.obj)).isUniqueColumn = false;
				      }
				      else {
		                  	 ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				      }		      
				    }
		break;
		case 263:
//		#line 3853 "sql.y"
		{
		                   	     if(onlyText == 0) {
		                   		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   		((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				   	        ((Tokens)(yyval.obj)).isJoinPartitionable = false;
				   	        ((Tokens)(yyval.obj)).isInPartitionable = false;
		                                ((Tokens)(yyval.obj)).columnRefTable = null;
				      		((Tokens)(yyval.obj)).columnRefField = null;
				   	     }
				   	     else {
		                   		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   	     }
				   	   }
		break;
		case 264:
//		#line 3866 "sql.y"
		{
		                   	     if(onlyText == 0) {
		                   		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   		((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				   		((Tokens)(yyval.obj)).isJoinPartitionable = false;
				   		((Tokens)(yyval.obj)).isInPartitionable = false;
		                                ((Tokens)(yyval.obj)).columnRefTable = null;
				      		((Tokens)(yyval.obj)).columnRefField = null;
				   	     }
				   	     else {
		                   		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   	     }
				   	   }
		break;
		case 265:
//		#line 3879 "sql.y"
		{
		                   	     if(onlyText == 0) {
		                   		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   		((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
				   		((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
		                                ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
		                                ((Tokens)(yyval.obj)).columnRefTable = null;
				      		((Tokens)(yyval.obj)).columnRefField = null;
		                             }
		                             else {
		                   		((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                             }
		                           }
		break;
		case 266:
//		#line 3894 "sql.y"
		{
		                          if(onlyText == 0) {
		                            ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text+" " +((Tokens)(val_peek(3).obj)).text + " " +
		                                                      ((Tokens)(val_peek(2).obj)).text+" "+((Tokens)(val_peek(1).obj)).text + " " +
		                                                      ((Tokens)(val_peek(0).obj)).text;
		                             getResultRelationalOpType((Tokens)(val_peek(4).obj),(Tokens)(val_peek(2).obj),(Tokens)(val_peek(0).obj),(Tokens)(yyval.obj));
		                             ((Tokens)(yyval.obj)).columnRefTable = null;
				             ((Tokens)(yyval.obj)).columnRefField = null;
		                          }
		                          else {
		                            ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text +" "+((Tokens)(val_peek(3).obj)).text + " " +
		                                                      ((Tokens)(val_peek(2).obj)).text +" "+((Tokens)(val_peek(1).obj)).text + " " +
		                                                      ((Tokens)(val_peek(0).obj)).text;
		                         }
		                        }
		break;
		case 267:
//		#line 3910 "sql.y"
		{
		                   if(onlyText == 0) {
		                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(5).obj)).text + " " + ((Tokens)(val_peek(4).obj)).text + " " +
		                                               ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
		                                               ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		                     getResultRelationalOpType((Tokens)(val_peek(5).obj),(Tokens)(val_peek(3).obj),(Tokens)(val_peek(1).obj),(Tokens)(yyval.obj));
		                     ((Tokens)(yyval.obj)).columnRefTable = null;
				     ((Tokens)(yyval.obj)).columnRefField = null;
		                    }
		                    else {
		                     ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(5).obj)).text + " " + ((Tokens)(val_peek(4).obj)).text + " " +
		                                               ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
		                                               ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		                   }
		                  }
		break;
		case 268:
//		#line 3927 "sql.y"
		{
		                       if(onlyText == 0) {
		                          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
		                                                    ((Tokens)(val_peek(0).obj)).text;
			      	           getResultLikeType( (Tokens)(val_peek(2).obj),(Tokens)(val_peek(0).obj),(Tokens)(yyval.obj) );
		                          ((Tokens)(yyval.obj)).columnRefTable = null;
				          ((Tokens)(yyval.obj)).columnRefField = null;
		                       }
		                       else {
		                          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
		                                                    ((Tokens)(val_peek(0).obj)).text;
		                       }
		                     }
		break;
		case 269:
//		#line 3940 "sql.y"
		{
		                       if(onlyText == 0) {
		                          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
		                                                    ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
			      	          getResultLikeType( (Tokens)(val_peek(3).obj),(Tokens)(val_peek(1).obj),(Tokens)(yyval.obj) );
		                          ((Tokens)(yyval.obj)).columnRefTable = null;
				          ((Tokens)(yyval.obj)).columnRefField = null;
		                       }
		                       else {
		                          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
		                                                    ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		                       }
		                     }
		break;
		case 270:
//		#line 3953 "sql.y"
		{
		                       if(onlyText == 0) {
		                          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
		                                                    ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
			      	          getResultLikeType( (Tokens)(val_peek(3).obj),(Tokens)(val_peek(0).obj),(Tokens)(yyval.obj) );
		                          ((Tokens)(yyval.obj)).columnRefTable = null;
				          ((Tokens)(yyval.obj)).columnRefField = null;
		                       }
		                       else {
		                          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
		                                                    ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		                      }
		                     }
		break;
		case 271:
//		#line 3966 "sql.y"
		{
				       if(onlyText == 0) {
				          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text + " " + ((Tokens)(val_peek(3).obj)).text + " " +
				                                    ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
		                                                    ((Tokens)(val_peek(0).obj)).text;
			      	          getResultLikeType( (Tokens)(val_peek(4).obj),(Tokens)(val_peek(1).obj),(Tokens)(yyval.obj) );
		                          ((Tokens)(yyval.obj)).columnRefTable = null;
				          ((Tokens)(yyval.obj)).columnRefField = null;
		                       }
		                       else {
		 		          ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text + " " + ((Tokens)(val_peek(3).obj)).text + " " +
				                                    ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
		                                                    ((Tokens)(val_peek(0).obj)).text;
		                      }
		                     }
		break;
		case 272:
//		#line 3983 "sql.y"
		{
		              if(onlyText == 0) {
		            	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
				getResultEscapeType( (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
		                ((Tokens)(yyval.obj)).columnRefTable = null;
				((Tokens)(yyval.obj)).columnRefField = null;
			      }
			      else {
		            	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
			      }
			     }
		break;
		case 273:
//		#line 3994 "sql.y"
		{
		               if(onlyText == 0) {
		                ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
				getResultEscapeType( (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
		                ((Tokens)(yyval.obj)).columnRefTable = null;
				((Tokens)(yyval.obj)).columnRefField = null;
		               }
		               else {
		                ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		               }
		           }
		break;
		case 274:
//		#line 4012 "sql.y"
		{
			         if(onlyText == 0) {
			            ((Tokens)(yyval.obj)).text = "\n"+((Tokens)(val_peek(3).obj)).text + "(" + ((Tokens)(val_peek(1).obj)).text + ")";
				    ((Tokens)(yyval.obj)).type = Const.BOOLEAN;
				    ((Tokens)(yyval.obj)).typeSize = 0;
				    ((Tokens)(yyval.obj)).typePrecision = 0;
				    ((Tokens)(yyval.obj)).typeLength = 0;
				    ((Tokens)(yyval.obj)).alias = "Exists";
		                    ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(1).obj)).isJoinPartitionable;
		                    ((Tokens)(yyval.obj)).isJoinPartitionable = false;
		                    ((Tokens)(yyval.obj)).columnRefTable = null;
				    ((Tokens)(yyval.obj)).columnRefField = null;
				    if(notExists>0)
				    	throw(new ParserSilentException("InterQuery : NOT EXISTS subquery. Line : "+line+" Column : "+column));
			         }
			         else {
			            ((Tokens)(yyval.obj)).text = "\n"+((Tokens)(val_peek(3).obj)).text + "(" + ((Tokens)(val_peek(1).obj)).text + ")";
			         }
			       }
		break;
		case 275:
//		#line 4038 "sql.y"
		{
				     if(onlyText == 0) {
					((Tokens)(yyval.obj)).isInPartitionable = false;
					String textTemp = ((Tokens)(val_peek(6).obj)).text + " in (" + ((Tokens)(val_peek(3).obj)).text + " " +
				        	 	  ((Tokens)(val_peek(2).obj)).text + ((Tokens)(val_peek(1).obj)).text + ")";
				        if(((Tokens)(val_peek(2).obj)).selectColumnCount>1)
				           yyerror("Subquery has too many columns : "+ new String(((Tokens)(yyval.obj)).text));
				        else {
				           if((((Tokens)(yyval.obj)).type=getResultInPredicateType(((Tokens)(val_peek(6).obj)).type,((Tokens)(val_peek(2).obj)).type))==Const.NONE)
				       	 	   yyerror("Type mismatch in the operation : "+ new String(((Tokens)(yyval.obj)).text));
				     	}
				     	if( ((Tokens)(val_peek(6).obj)).isUniqueColumn && ((Tokens)(val_peek(2).obj)).isUniqueColumn &&
				     	    ((Tokens)(val_peek(6).obj)).columnRefTable != null &&
				     	    ((Tokens)(val_peek(2).obj)).columnRefTable != null ){

				     	   if( isVpAttribute((Tokens)(val_peek(6).obj)) && isVpAttribute((Tokens)(val_peek(2).obj)) &&
		                               ((Tokens)(val_peek(6).obj)).columnRefTable.tableLevel < ((Tokens)(val_peek(2).obj)).columnRefTable.tableLevel &&
		                               ((Tokens)(val_peek(2).obj)).columnRefTable.tableLevel == subqueryLevel ) {
		                                 /*inserir a sub faixa em select_tail*/

		             /*caso onde no where dentro do in jah se tem uma juncao q permite a introducao de faixa*/
		             /*entao nao preciso incluir uma nova faixa(na verdade trocar a faixa q ja existe pela em questao)*/
		             /*(otimizacao poderia decidir qual tem a maior cardinalidade para fazer esta escolha)*/
				     	         /*if(!((Tokens)($6.obj)).isJoinPartitionable) {*/
		                                    String indexTemp = new String( ((Tokens)(val_peek(1).obj)).compositorText.replaceAll(" 1#1 ", new String(" " + findAlias(((Tokens)(val_peek(2).obj)).columnRefTable.name,subqueryLevel)+"."+((Tokens)(val_peek(2).obj)).columnRefField + " ")));
				              	    textTemp = ((Tokens)(val_peek(6).obj)).text + " in (" + ((Tokens)(val_peek(3).obj)).text + " " +
				              	    	       ((Tokens)(val_peek(2).obj)).text + indexTemp + ")";
		              	                    qvpCount++;
		              	                 /*}*/
		              			 if( ((Tokens)(val_peek(6).obj)).columnRefTable.tableLevel == (subqueryLevel-1) ) {
		                                 	((Tokens)(yyval.obj)).isInPartitionable = true;
		                                 	subqueryVpa = new String(((Tokens)(val_peek(6).obj)).text);
		                                 }
		                                 else {
		                                     ((Tokens)(yyval.obj)).isInPartitionable = false;
		                                     if(!this.isFromClauseInnerSelect)
		                                 	throw(new ParserSilentException("InterQuery : No vpa join in the IN subquery. Line : "+line+" Column : "+column));
		                                 }

		                           }
		                           else {
		                                ((Tokens)(yyval.obj)).isInPartitionable = false;
		                                if(!this.isFromClauseInnerSelect)
				     	        	throw(new ParserSilentException("InterQuery : No vpa join in the IN subquery. Line : "+line+" Column : "+column));
				     	   }
				     	}
				     	else {
		                             ((Tokens)(yyval.obj)).isInPartitionable = false;
		                             if(!this.isFromClauseInnerSelect)
				      	     	  throw(new ParserSilentException("InterQuery : No vpa join in the IN subquery. Line : "+line+" Column : "+column));
				     	}

				        ((Tokens)(yyval.obj)).text = textTemp;
				     	((Tokens)(yyval.obj)).type = Const.BOOLEAN;
				        subqueryLevel--;
				     }
				     else {
					((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(6).obj)).text + " in (" +
				        		          ((Tokens)(val_peek(3).obj)).text + " " +  ((Tokens)(val_peek(2).obj)).text +
		              				          ((Tokens)(val_peek(1).obj)).text + ")";
				     }
				   }
		break;
		case 276:
//		#line 4100 "sql.y"
		{
				     if(onlyText == 0) {
				        ((Tokens)(yyval.obj)).isInPartitionable = false;
				        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(7).obj)).text + " not in (" +
				        			  ((Tokens)(val_peek(3).obj)).text + " " +
				        			  ((Tokens)(val_peek(2).obj)).text +
		              				          ((Tokens)(val_peek(1).obj)).text + ")";
				        if(((Tokens)(val_peek(2).obj)).selectColumnCount>1)
				           yyerror("Subquery has too many columns : "+ new String(((Tokens)(yyval.obj)).text));
				        else {
				           if((((Tokens)(yyval.obj)).type=getResultInPredicateType(((Tokens)(val_peek(7).obj)).type,((Tokens)(val_peek(2).obj)).type))==Const.NONE)
				       	 	   yyerror("Type mismatch in the operation : "+ new String(((Tokens)(yyval.obj)).text));
				     	}
				     	((Tokens)(yyval.obj)).type = Const.BOOLEAN;
				        subqueryLevel--;
				     	if(!this.isFromClauseInnerSelect)
				     		throw(new ParserSilentException("InterQuery : NOT IN subquery. Line : "+line+" Column : "+column));
				     }
				     else {
				        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(7).obj)).text + " not in (" +
				        			  ((Tokens)(val_peek(3).obj)).text + " " +
				        			  ((Tokens)(val_peek(2).obj)).text +  ((Tokens)(val_peek(1).obj)).text + ")";
				     }
				   }
		break;
		case 277:
//		#line 4124 "sql.y"
		{
				     if(onlyText == 0) {
				        ((Tokens)(yyval.obj)).isInPartitionable = false;
				        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text + " in (" + ((Tokens)(val_peek(1).obj)).text + ")";
				        if((((Tokens)(yyval.obj)).type=getResultInPredicateType(((Tokens)(val_peek(4).obj)).type,((Tokens)(val_peek(1).obj)).type))==Const.NONE)
				       		yyerror("Type mismatch in the operation : "+ new String(((Tokens)(yyval.obj)).text));
				        ((Tokens)(yyval.obj)).type = Const.BOOLEAN;
				        ((Tokens)(yyval.obj)).isInPartitionable = false;
				     }
				     else {
				        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(4).obj)).text + " in (" + ((Tokens)(val_peek(1).obj)).text + ")";
				     }
				   }
		break;
		case 278:
//		#line 4137 "sql.y"
		{
				     if(onlyText == 0) {
				        ((Tokens)(yyval.obj)).isInPartitionable = false;
				        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(5).obj)).text + " not in (" + ((Tokens)(val_peek(1).obj)).text + ")";
				        if((((Tokens)(yyval.obj)).type=getResultInPredicateType(((Tokens)(val_peek(5).obj)).type,((Tokens)(val_peek(1).obj)).type))==Const.NONE)
				       		yyerror("Type mismatch in the operation : "+ new String(((Tokens)(yyval.obj)).text));

				        ((Tokens)(yyval.obj)).type = Const.BOOLEAN;
				        ((Tokens)(yyval.obj)).isInPartitionable = false;
				     }
				     else {
				        ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(5).obj)).text + " not in (" + ((Tokens)(val_peek(1).obj)).text + ")";
				     }
				   }
		break;
		case 279:
//		#line 4153 "sql.y"
		{
				if(onlyText == 0) {
				   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				   ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(0).obj)).type;
			        }
			        else {
				   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			        }
			      }
		break;
		case 280:
//		#line 4162 "sql.y"
		{
				if(onlyText == 0) {
				   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "," + ((Tokens)(val_peek(0).obj)).text;
				   ((Tokens)(yyval.obj)).type = getResultInPredicateType( ((Tokens)(val_peek(2).obj)).type ,
			                                                               ((Tokens)(val_peek(0).obj)).type );
			        }
			        else {
				   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + "," + ((Tokens)(val_peek(0).obj)).text;
			        }
			      }
		break;
		case 281:
//		#line 4180 "sql.y"
		{
			    if(this.isFromClauseInnerSelect){
		                  if(((Tokens)(val_peek(1).obj)).aggregationFunction!=Const.NONE){
		                  	if(columnsNotInGroupError)
		                  		yyerror("The column(s)" + columnsNotInGroup.substring(0,columnsNotInGroup.length() - 1) + " must appear in the GROUP BY clause" );

		                  	if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		                 		qvpColumnsList = new ArrayList<Column>(qvpColumnsListTemp);
					}
		                  }
		                  else {
		                        if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		                  	   int typeTemp;
		                  	   boolean isConst;
		                  	   if( constVerify(((Tokens)(val_peek(1).obj)).type)) {
		                  	  	   isConst = true;
		                  		   typeTemp = ((Tokens)(val_peek(1).obj)).type-1;
		                  	   	   qvpColumnsList.add( new Column(((Tokens)(val_peek(1).obj)).text, typeTemp,
		                  		       ((Tokens)(val_peek(1).obj)).aggregationFunction, getTypeText((Tokens)(val_peek(1).obj)),
		                  		                                               isConst) );
		                  	    	   qvpColumnsListTemp = new ArrayList<Column>(qvpColumnsList);
		                  	   	   ((Tokens)(val_peek(1).obj)).compositor.clear();
		                  	   	   ((Tokens)(val_peek(1).obj)).compositor.trimToSize();
		                  	   	   ((Tokens)(val_peek(1).obj)).compositor.add(new ColumnIndex(qvpColumnsList.size()-1));
		                    	   }
		                  	   else {
		                  		   isConst = false;
		                  		   typeTemp = ((Tokens)(val_peek(1).obj)).type;
		                  		   qvpColumnsList.add( new Column(((Tokens)(val_peek(1).obj)).text, typeTemp,
		                  		      ((Tokens)(val_peek(1).obj)).aggregationFunction, getTypeText((Tokens)(val_peek(1).obj)),
		                  		   	                               	       isConst) );
		                  	   	   qvpColumnsListTemp = new ArrayList<Column>(qvpColumnsList);
		                  	   	   ((Tokens)(val_peek(1).obj)).compositorText = Const.COLUMN_PREFIX + (qvpColumnsList.size()-1);
		                  	  	   ((Tokens)(val_peek(1).obj)).compositor.clear();
		                  	   	   ((Tokens)(val_peek(1).obj)).compositor.trimToSize();
		                  	   	   ((Tokens)(val_peek(1).obj)).compositor.add(new ColumnIndex(qvpColumnsList.size()-1));
		                  	   }
					}
		                  	if(existsAggregationSelect.get(subqueryLevel)){
						if(mustIncludeInGroupBy(((Tokens)(val_peek(1).obj)).text, subqueryLevel))
							if(columnsNotInGroupError)
								yyerror("The column(s)" + columnsNotInGroup.substring(0,columnsNotInGroup.length() - 1) + " must appear in the GROUP BY clause" );
				  	}
		                  }
		                  ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(1).obj)).type;
				  ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text;
		                  columnsNotInGroupError = false;
		                  columnsNotInGroup = "";
		                  havingCase--;
		                  if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		                   	((Tokens)(yyval.obj)).text = "";/*nao tem Having em Qvp*/
		                        havingCompositorText = new String(((Tokens)(val_peek(0).obj)).compositorText);
				        havingCompositor = ((Tokens)(val_peek(1).obj)).compositor.toArray();
		                        selectCompTemp.trimToSize();
		                  }
		                  else {
		                        ((Tokens)(yyval.obj)).text = "\n"+ ((Tokens)(val_peek(1).obj)).text+" "+((Tokens)(val_peek(0).obj)).text;
		                  }
		                  if( (((Tokens)(val_peek(0).obj)).type!=Const.BOOLEAN) && (((Tokens)(val_peek(0).obj)).type!=Const.CONST_BOOLEAN) )
		                      yyerror("The HAVING expression "+ new String(((Tokens)(val_peek(0).obj)).text) + " must be BOOLEAN.");
		                  
		                  ((Tokens)(yyval.obj)).text = "\n"+ ((Tokens)(val_peek(1).obj)).text+" "+((Tokens)(val_peek(0).obj)).text;
			    }
			    else {

		                if(onlyText == 0) {
		                  if(((Tokens)(val_peek(1).obj)).aggregationFunction!=Const.NONE){
		                  	if(columnsNotInGroupError)
		                  		yyerror("The column(s)" + columnsNotInGroup.substring(0,columnsNotInGroup.length() - 1) + " must appear in the GROUP BY clause" );

		                  	if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		                 		qvpColumnsList = new ArrayList<Column>(qvpColumnsListTemp);
					}
		                  }
		                  else {
		                        if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		                  	   int typeTemp;
		                  	   boolean isConst;
		                  	   if( constVerify(((Tokens)(val_peek(1).obj)).type)) {
		                  	  	   isConst = true;
		                  		   typeTemp = ((Tokens)(val_peek(1).obj)).type-1;
		                  	   	   qvpColumnsList.add( new Column(((Tokens)(val_peek(1).obj)).text, typeTemp,
		                  		       ((Tokens)(val_peek(1).obj)).aggregationFunction, getTypeText((Tokens)(val_peek(1).obj)),
		                  		                                               isConst) );
		                  	    	   qvpColumnsListTemp = new ArrayList<Column>(qvpColumnsList);
		                  	   	   ((Tokens)(val_peek(1).obj)).compositor.clear();
		                  	   	   ((Tokens)(val_peek(1).obj)).compositor.trimToSize();
		                  	   	   ((Tokens)(val_peek(1).obj)).compositor.add(new ColumnIndex(qvpColumnsList.size()-1));
		                    	   }
		                  	   else {
		                  		   isConst = false;
		                  		   typeTemp = ((Tokens)(val_peek(1).obj)).type;
		                  		   qvpColumnsList.add( new Column(((Tokens)(val_peek(1).obj)).text, typeTemp,
		                  		      ((Tokens)(val_peek(1).obj)).aggregationFunction, getTypeText((Tokens)(val_peek(1).obj)),
		                  		   	                               	       isConst) );
		                  	   	   qvpColumnsListTemp = new ArrayList<Column>(qvpColumnsList);
		                  	   	   ((Tokens)(val_peek(1).obj)).compositorText = Const.COLUMN_PREFIX + (qvpColumnsList.size()-1);
		                  	  	   ((Tokens)(val_peek(1).obj)).compositor.clear();
		                  	   	   ((Tokens)(val_peek(1).obj)).compositor.trimToSize();
		                  	   	   ((Tokens)(val_peek(1).obj)).compositor.add(new ColumnIndex(qvpColumnsList.size()-1));
		                  	   }
					}
		                  	if(existsAggregationSelect.get(subqueryLevel)){
						if(mustIncludeInGroupBy(((Tokens)(val_peek(1).obj)).text, subqueryLevel))
							if(columnsNotInGroupError)
								yyerror("The column(s)" + columnsNotInGroup.substring(0,columnsNotInGroup.length() - 1) + " must appear in the GROUP BY clause" );
				  	}
		                  }
		                  ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(1).obj)).type;
		                  columnsNotInGroupError = false;
		                  columnsNotInGroup = "";
		                  havingCase--;
		                  if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0){
		                   	((Tokens)(yyval.obj)).text = "";/*nao tem Having em Qvp*/
		                        havingCompositorText = new String(((Tokens)(val_peek(0).obj)).compositorText);
				        havingCompositor = ((Tokens)(val_peek(1).obj)).compositor.toArray();
		                        selectCompTemp.trimToSize();
		                  }
		                  else {
		                        ((Tokens)(yyval.obj)).text = "\n"+ ((Tokens)(val_peek(1).obj)).text+" "+((Tokens)(val_peek(0).obj)).text;
		                  }
		                  if( (((Tokens)(val_peek(0).obj)).type!=Const.BOOLEAN) && (((Tokens)(val_peek(0).obj)).type!=Const.CONST_BOOLEAN) )
		                      yyerror("The HAVING expression "+ new String(((Tokens)(val_peek(0).obj)).text) + " must be BOOLEAN.");                   
		                }
		                else {
		                        ((Tokens)(yyval.obj)).text = "\n"+ ((Tokens)(val_peek(1).obj)).text+" "+((Tokens)(val_peek(0).obj)).text;
		                }
		             }
		          }
		break;
		case 282:
//		#line 4310 "sql.y"
		{
				    if(onlyText == 0) {
				    	havingCase++;
				    	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
				    }
				    else {
				    	((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                    }
				  }
		break;
		case 283:
//		#line 4322 "sql.y"
		{
		                if(onlyText == 0) {
		                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
		                                             ((Tokens)(val_peek(0).obj)).text ;
		                   ((Tokens)(yyval.obj)).type = Const.BOOLEAN;
		                   ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
		                   ((Tokens)(yyval.obj)).compositorText=((Tokens)(val_peek(2).obj)).compositorText + " is null";
		                   ((Tokens)(yyval.obj)).compositor=new ArrayList<Object>(addCompositor(Const.IS_NULL,(Tokens)val_peek(2).obj));
		                   ((Tokens)(yyval.obj)).columnRefTable = null;
				   ((Tokens)(yyval.obj)).columnRefField = null;
		                }
		                else {
		                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text + " " + ((Tokens)(val_peek(1).obj)).text + " " +
		                                             ((Tokens)(val_peek(0).obj)).text ;
		               }
		              }
		break;
		case 284:
//		#line 4338 "sql.y"
		{
		                if(onlyText == 0) {
		                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
		                                             ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		                   ((Tokens)(yyval.obj)).type = Const.BOOLEAN;
		                   ((Tokens)(yyval.obj)).aggregationFunction = Const.NONE;
		                   ((Tokens)(yyval.obj)).compositorText=((Tokens)(val_peek(3).obj)).compositorText + " is not null";
		                   ((Tokens)(yyval.obj)).compositor=new ArrayList<Object>(addCompositor(Const.IS_NOT_NULL,(Tokens)val_peek(3).obj));
		                   ((Tokens)(yyval.obj)).columnRefTable = null;
				   ((Tokens)(yyval.obj)).columnRefField = null;
		                }
		                else {
		                   ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(3).obj)).text + " " + ((Tokens)(val_peek(2).obj)).text + " " +
		                                             ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		               }
		              }
		break;
		case 285:
//		#line 4356 "sql.y"
		{
		                ((Tokens)(yyval.obj)).text = "=";
		                ((Tokens)(yyval.obj)).operator = Const.EQUAL;
		             }
		break;
		case 286:
//		#line 4360 "sql.y"
		{
		                ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                ((Tokens)(yyval.obj)).operator = Const.DIFFERENT;
		             }
		break;
		case 287:
//		#line 4364 "sql.y"
		{
		                ((Tokens)(yyval.obj)).text = "<";
		                ((Tokens)(yyval.obj)).operator = Const.LESS;
		             }
		break;
		case 288:
//		#line 4368 "sql.y"
		{
		                ((Tokens)(yyval.obj)).text = ">";
		                ((Tokens)(yyval.obj)).operator = Const.GREATER;
		             }
		break;
		case 289:
//		#line 4372 "sql.y"
		{
		                ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                ((Tokens)(yyval.obj)).operator = Const.LESS_EQUAL;
		             }
		break;
		case 290:
//		#line 4376 "sql.y"
		{
		                ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
		                ((Tokens)(yyval.obj)).operator = Const.GREATER_EQUAL;
		             }
		break;
		case 291:
//		#line 4382 "sql.y"
		{
		          if(onlyText == 0) {
		            if(isFunctionParameter==0) {
		            	if( (columnsNotInGroupError = mustIncludeInGroupBy( (Tokens)(val_peek(0).obj), subqueryLevel)) )
		            	  	 	columnsNotInGroup += " " + new String(((Tokens)(val_peek(0).obj)).text + "," );
		            }
		            if(subqueryLevel==0 && isSelectExp==0 && isFunctionParameter==0)
		            	addColumnsList( ((Tokens)(val_peek(0).obj)), qvpColumnsListTemp );

		            ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		            ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).compositorText;
			    getResultEscapeType( (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
		            ((Tokens)(yyval.obj)).columnRefTable = null;
		 	    ((Tokens)(yyval.obj)).columnRefField = null;
		         }
		         else {
		            ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		         }
		       }
		break;
		case 292:
//		#line 4401 "sql.y"
		{
		         if(onlyText == 0) {
		            ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		            ((Tokens)(yyval.obj)).compositorText = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
			    getResultEscapeType( (Tokens)(val_peek(0).obj), (Tokens)(yyval.obj) );
		            ((Tokens)(yyval.obj)).columnRefTable = null;
			    ((Tokens)(yyval.obj)).columnRefField = null;
		         }
		         else {
		            ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(1).obj)).text + " " + ((Tokens)(val_peek(0).obj)).text;
		         }
		       }
		break;
		case 293:
//		#line 4420 "sql.y"
		{
		           if(onlyText == 0) {
		              ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text+" "+((Tokens)(val_peek(1).obj)).text+((Tokens)(val_peek(0).obj)).text;
		              ((Tokens)(yyval.obj)).type = ((Tokens)(val_peek(1).obj)).type;
		              ((Tokens)(yyval.obj)).isJoinPartitionable = ((Tokens)(val_peek(0).obj)).isJoinPartitionable;
		              ((Tokens)(yyval.obj)).isInPartitionable = ((Tokens)(val_peek(0).obj)).isInPartitionable;
		              ((Tokens)(yyval.obj)).selectColumnCount = ((Tokens)(val_peek(1).obj)).selectColumnCount;
		              subqueryLevel--;
		           }
		           else {
		              ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(2).obj)).text+" "+((Tokens)(val_peek(1).obj)).text+((Tokens)(val_peek(0).obj)).text;
		           }
		         }
		break;
		case 294:
//		#line 4435 "sql.y"
		{
			       if(onlyText == 0) {
			           subqueryLevel++;
			           ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			       }
			       else {
			           ((Tokens)(yyval.obj)).text = ((Tokens)(val_peek(0).obj)).text;
			       }
			     }
		break;	
	}
}

//## run() --- for Thread #######################################
//## The -Jnorun option was used ##
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
