querymanager.waiting=Query #{0} waiting...
querymanager.error=Query Manager Error: {0}
querymanager.readyToGo=Query #{0} ready to go!
serverconnection.queryCreate=Query #{0} created! [type = {1}] [sql = {2}]
dbconnection.newconnection=[Connection {0}] A new connection was created.
dbconnection.closed=[Connection {0}] A connected was closed.
dbconnection.queryexecuted=[Connection {0}] Query executed : {1}
dbconnection.updateexecuted=[Connection {0}] Update executed : {1}
dbconnection.rowsmodified=[Connection {0}] {1} rows modified.
dbconnection.prepare=[Connection {0}] Query prepared: {1}
dbconnection.executeprepared=[Connection {0}] Query elapsed time: {1}
dbconnectionpool.closed=Connection pool was closed.
updateManager.ok=All updates done alright!
updateManager.threadscreated=Update manager created {0} threads to run a update.
updateManager.workerexception=Update manager worker got an exception: {0}
updateManager.errorOnNode=Error on node#{0}
serverconnection.newconnection=New connection created.
clusterQueryProcessorEngine.addingNode=Connecting to //{0}:{1}/NodeQueryProcessor. Attempt number: {3}
clusterQueryProcessorEngine.nodeConnected=Connected to //{0}:{1}/NodeQueryProcessor
clusterQueryProcessorEngine.creatingGlobaQueryTask=Creating GlobalQueryTask Engine!
clusterQueryProcessorEngine.alreadyStarted={0} - start(): Already Started!
clusterQueryProcessorEngine.shutdown=Shuting down...
clusterQueryProcessorEngine.disconnecting=Disconnecting from NodeQueryProcessors...
clusterQueryProcessorEngine.exit=Exit.
connectionManagerImpl.init=Connection Manager initializing...
connectionManagerImpl.step1=Cluster Query Processor loaded. (1/4)
connectionManagerImpl.step2=Query Scheduler loaded. (2/4)
connectionManagerImpl.step3=Load Balancer loaded. (3/4)
connectionManagerImpl.step4=Database Metadata loaded. (4/4)
connectionManagerImpl.pargresReady=Pargres DB Cluster ready to receive calls...
connectionManagerImpl.metadataReloading=Please wait. DatabaseMetadata is been reloaded
connectionManagerImpl.metadataReloaded=DatabaseMetadata reloaded
connectionManagerImpl.register=RMI Bind: port: {0}, address: {1}
connectionManagerImpl.finalize=Running ConnectionManager finalize!
longTransactionQueue.wait=Query #{0} in LongTransaction wait
longTransactionQueue.blocked=Query #{0} waiting for long transaction by Thread #{1}
longTransactionQueue.notYet=Query #{0} longTransaction not yet!
longTransactionQueue.passed=Query #{0} passed LongTransaction block by Thread #{1}
longTransactionQueue.blockingIsNull=Blocking thread is null!
longTransactionQueue.blockingIsSame=Blocking thread is the same!
longTransactionQueue.unblock=Long transaction UNBLOCK by Thread #{0}
longTransactionQueue.block=Long transaction BLOCK by Thread #{0}
queryScheduler.added=Query #{0} added to scheduler!
queryScheduler.remove=Query #{0} removed from scheduler!
queryScheduler.waitingForUpdateEnd=Scheduler waiting the end of a update request...
queryScheduler.waitingForPending=Scheduler waiting the end of requests to go with a update request...
queryScheduler.dispatching=Scheduler dispatching query #{0}
queryScheduler.running=Scheduller running..!
queryScheduler.waitingForMore=Scheduler waiting for more requests...
queryScheduler.queryExecuted=Query #{0} executed!
queryScheduler.queryError=Query #{0} error: {1}
globalQueryTaskEngine.createGRC=Task: Creating Global ResultComposer
globalQueryTaskEngine.createLQTs=GlobalQueryTask: Starting LocalQueryTasks
globalQueryTaskEngine.createLQT=Task: Creating Local Query Task {0} to process interval ({1} - {2}).
globalQueryTaskEngine.waitingForIntervals=GlobalQueryTask: Waiting for Intervals Processing
globalQueryTaskEngine.waitingForLQTs=GlobalQueryTask: Waiting for LQTs Finishing
globalQueryTaskEngine.getFinalResult=Task: Getting Final Result.
globalQueryTaskEngine.finished=Global Query Task: Finished.
globalQueryTaskEngine.intervalFinished=Interval under responsibility of node {0} is finished!
globalQueryTaskEngine.grouperSize=Grouper {0} Size: {1}
globalQueryTaskEngine.grouperDropped=Grouper - {0} table dropped
localQueryTaskEngine.waiting=LQT {0} waiting for distributed composer...
localQueryTaskEngine.done=LQT {0} distributed composer done...
localQueryTaskEngine.exception=Local Query Task Exception: {0}
localQueryTaskEngine.intervalProcessed=Interval ({0}-{1}) processed by node {2}
localQueryTaskEngine.helping=Helping {0}
localQueryTaskEngine.refuseToHelp=Refuse to help offer number {0} arrived from node {1}
localQueryTaskEngine.refusing=Refusing help offer number {0} originated from node {1} and received from node {2}
localQueryTaskEngine.resendingOffer=Resending offer!
localQueryTaskEngine.ignored=Ignored!
localQueryTaskEngine.helpOffer=Help offer number {0} sent to neighbors.
localQueryTaskEngine.propagateOffer=Propagating Help offer number {0} originated from node {1} and received from node {2}
localQueryTaskEngine.acceptOffer=Accepting Help offer number {0} originated from node {1} and received from node {2}
localQueryTaskEngine.acceptanceMsg=Acceptance msg sent to {0}
nodeQueryProcessorEngine.running=NodeQueryProcessor is Running on port {0} [{1}]
nodeQueryProcessorEngine.unbinding=[NQP] Unbinding...
queryExecutor.vp=VP: {0} - {1}. Size = {2}
queryExecutorAvp.elapsedTime=QE AVP - Elapsed Time: {0} {1}
resultComposerEngineDistributed.init=Initializing Distributed Composer {0}...
resultComposerEngineDistributed.finishing=Finishing Distributed Composer {0}...
resultComposerEngineDistributed.sending=Distributed Composer {0} sending results to Global Composer..."
resultComposerEngineDistributed.finishDistribution=Distributed composer {0} {1} {2}
resultComposerEngineGlobal.init=Inititializing Global Composer...
resultComposerEngineGlobal.finishing=Finalizing Global Composer...
resultComposerEngineGlobal.waitingForResults=Waiting for results being consumed...
resultComposerEngineGlobal.resultsConsumed=Results consumed...
resultComposerEngineLocal.init=Initializing LRC - {0}
resultComposerEngineLocal.finishLRC=Finalizing LRC - {0} Elapsed time: {1}
resultComposerEngineLocal.sendingResults=LRC - {0} sending results to Distributed Composers...
parser.vpQuery=vpQuery : \n{0}
parser.compositorText=Q.{0} = {1}
parser.groupByText=GroupBy.{0} = {1}
parser.orderByText=OrderBy.{0} = {1}
parser.alias=Q.{0} as {1}
parser.qvpTextType=qvpTextType.{0} = {1}
parser.havingCompositor=Having = {0}
parser.limit=Limit = {0}
grouperImpl.gettingAgregatedResult=Illegal method option {0}